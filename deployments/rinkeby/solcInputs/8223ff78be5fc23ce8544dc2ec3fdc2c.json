{
  "language": "Solidity",
  "sources": {
    "src/Theopetra/TheopetraTreasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"../Libraries/SafeMath.sol\";\nimport \"../Libraries/SafeERC20.sol\";\nimport \"../Libraries/SignedSafeMath.sol\";\nimport \"../Libraries/SafeCast.sol\";\n\nimport \"../Interfaces/IERC20.sol\";\nimport \"../Interfaces/IERC20Metadata.sol\";\nimport \"../Interfaces/ITHEO.sol\";\nimport \"../Interfaces/ITokenDebt.sol\";\nimport \"../Interfaces/IBondCalculator.sol\";\nimport \"../Interfaces/ITreasury.sol\";\nimport \"../Interfaces/IYieldReporter.sol\";\nimport \"../Interfaces/IBondDepository.sol\";\n\nimport \"../Types/TheopetraAccessControlled.sol\";\n\ncontract TheopetraTreasury is TheopetraAccessControlled, ITreasury {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using SignedSafeMath for int256;\n    using SafeERC20 for IERC20;\n\n    /* ========== EVENTS ========== */\n\n    event Deposit(address indexed token, uint256 amount, uint256 value);\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\n    event CreateDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\n    event RepayDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\n    event Managed(address indexed token, uint256 amount);\n    event ReservesAudited(uint256 indexed totalReserves);\n    event Minted(address indexed caller, address indexed recipient, uint256 amount);\n    event PermissionQueued(STATUS indexed status, address queued);\n    event Permissioned(address addr, STATUS indexed status, bool result);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    enum STATUS {\n        RESERVEDEPOSITOR,\n        RESERVESPENDER,\n        RESERVETOKEN,\n        RESERVEMANAGER,\n        LIQUIDITYDEPOSITOR,\n        LIQUIDITYTOKEN,\n        LIQUIDITYMANAGER,\n        RESERVEDEBTOR,\n        REWARDMANAGER,\n        STHEO,\n        THEODEBTOR,\n        YIELDREPORTER\n    }\n\n    struct Queue {\n        STATUS managing;\n        address toPermit;\n        address calculator;\n        uint256 timelockEnd;\n        bool nullify;\n        bool executed;\n    }\n\n    struct PriceInfo {\n        int256 deltaTreasuryYield;\n        uint256 timeLastUpdated;\n        uint256 lastTokenPrice;\n        uint256 currentTokenPrice;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    ITHEO public immutable THEO;\n    ITokenDebt public sTHEO;\n    IYieldReporter private yieldReporter;\n    IBondCalculator private theoBondingCalculator;\n\n    mapping(STATUS => address[]) public registry;\n    mapping(STATUS => mapping(address => bool)) public permissions;\n    mapping(address => address) public bondCalculator;\n\n    mapping(address => uint256) public debtLimit;\n\n    uint256 public totalReserves;\n    uint256 public totalDebt;\n    uint256 public theoDebt;\n    Queue[] public permissionQueue;\n    uint256 public immutable blocksNeededForQueue;\n\n    PriceInfo private priceInfo;\n\n    bool public timelockEnabled;\n    bool public initialized;\n\n    uint256 public onChainGovernanceTimelock;\n    bytes32 public constant BOND_ROLE = keccak256(\"BOND_ROLE\");\n\n    string internal notAccepted = \"Treasury: not accepted\";\n    string internal notApproved = \"Treasury: not approved\";\n    string internal invalidToken = \"Treasury: invalid token\";\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _theo,\n        uint256 _timelock,\n        address _authority\n    ) TheopetraAccessControlled(ITheopetraAuthority(_authority)) {\n        require(_theo != address(0), \"Zero address: THEO\");\n        THEO = ITHEO(_theo);\n\n        timelockEnabled = false;\n        initialized = false;\n        blocksNeededForQueue = _timelock;\n        priceInfo.timeLastUpdated = block.timestamp;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice allow approved address to deposit an asset for THEO\n     * @param _amount uint256\n     * @param _token address\n     * @param _profit uint256\n     * @return send_ uint256\n     */\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external override returns (uint256 send_) {\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\n        } else if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            require(permissions[STATUS.LIQUIDITYDEPOSITOR][msg.sender], notApproved);\n        } else {\n            revert(invalidToken);\n        }\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 value = tokenValue(_token, _amount);\n        // mint THEO needed and store amount of rewards for distribution\n        send_ = value.sub(_profit);\n        THEO.mint(msg.sender, send_);\n\n        totalReserves = totalReserves.add(value);\n\n        emit Deposit(_token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to burn THEO for reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function withdraw(uint256 _amount, address _token) external override {\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted); // Only reserves can be used for redemptions\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\n\n        uint256 value = tokenValue(_token, _amount);\n        THEO.burnFrom(msg.sender, value);\n\n        totalReserves = totalReserves.sub(value);\n\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n\n        emit Withdrawal(_token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to withdraw assets\n     * @param _token address\n     * @param _amount uint256\n     */\n    function manage(address _token, uint256 _amount) external override {\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            require(permissions[STATUS.LIQUIDITYMANAGER][msg.sender], notApproved);\n        } else {\n            require(permissions[STATUS.RESERVEMANAGER][msg.sender], notApproved);\n        }\n        if (permissions[STATUS.RESERVETOKEN][_token] || permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            uint256 value = tokenValue(_token, _amount);\n            totalReserves = totalReserves.sub(value);\n        }\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n        emit Managed(_token, _amount);\n    }\n\n    /**\n     * @notice mint new THEO using excess reserves\n     * @param _recipient address\n     * @param _amount uint256\n     */\n    function mint(address _recipient, uint256 _amount) external override {\n        require(permissions[STATUS.REWARDMANAGER][msg.sender], \"Caller is not a Reward manager\");\n\n        THEO.mint(_recipient, _amount);\n        emit Minted(msg.sender, _recipient, _amount);\n    }\n\n    /**\n     * DEBT: The debt functions allow approved addresses to borrow treasury assets\n     * or THEO from the treasury, using stheo as collateral. This might allow an\n     * sTHEO holder to provide theo liquidity without taking on the opportunity cost\n     * of unstaking, or alter their backing without imposing risk onto the treasury.\n     * Many of these use cases are yet to be defined, but they appear promising.\n     * However, we urge the community to think critically and move slowly upon\n     * proposals to acquire these permissions.\n     */\n\n    /**\n     * @notice allow approved address to borrow reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function incurDebt(uint256 _amount, address _token) external override {\n        uint256 value;\n        if (_token == address(THEO)) {\n            require(permissions[STATUS.THEODEBTOR][msg.sender], notApproved);\n            value = _amount;\n        } else {\n            require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\n            require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\n            value = tokenValue(_token, _amount);\n        }\n        require(value != 0, invalidToken);\n\n        sTHEO.changeDebt(value, msg.sender, true);\n        require(sTHEO.debtBalances(msg.sender) <= debtLimit[msg.sender], \"Treasury: exceeds limit\");\n        totalDebt = totalDebt.add(value);\n\n        if (_token == address(THEO)) {\n            THEO.mint(msg.sender, value);\n            theoDebt = theoDebt.add(value);\n        } else {\n            totalReserves = totalReserves.sub(value);\n            IERC20(_token).safeTransfer(msg.sender, _amount);\n        }\n        emit CreateDebt(msg.sender, _token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to repay borrowed reserves with reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function repayDebtWithReserve(uint256 _amount, address _token) external override {\n        require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 value = tokenValue(_token, _amount);\n        sTHEO.changeDebt(value, msg.sender, false);\n        totalDebt = totalDebt.sub(value);\n        totalReserves = totalReserves.add(value);\n        emit RepayDebt(msg.sender, _token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to repay borrowed reserves with THEO\n     * @param _amount uint256\n     */\n    function repayDebtWithTHEO(uint256 _amount) external {\n        require(\n            permissions[STATUS.RESERVEDEBTOR][msg.sender] || permissions[STATUS.THEODEBTOR][msg.sender],\n            notApproved\n        );\n        THEO.burnFrom(msg.sender, _amount);\n        sTHEO.changeDebt(_amount, msg.sender, false);\n        totalDebt = totalDebt.sub(_amount);\n        theoDebt = theoDebt.sub(_amount);\n        emit RepayDebt(msg.sender, address(THEO), _amount, _amount);\n    }\n\n    /* ======== BONDING CALCULATOR ======== */\n\n    /**\n     * @notice                  get the address of the theo bonding calculator\n     * @return                  address for theo liquidity pool\n     */\n    function getTheoBondingCalculator() public view override returns (IBondCalculator) {\n        return IBondCalculator(theoBondingCalculator);\n    }\n\n    /**\n     * @notice             set the address for the theo bonding calculator\n     * @param _theoBondingCalculator    address of the theo bonding calculator\n     */\n    function setTheoBondingCalculator(address _theoBondingCalculator) public override onlyGuardian {\n        theoBondingCalculator = IBondCalculator(_theoBondingCalculator);\n    }\n\n    /* ========== MANAGERIAL FUNCTIONS ========== */\n\n    /**\n     * @notice takes inventory of all tracked assets\n     * @notice always consolidate to recognized reserves before audit\n     */\n    function auditReserves() external onlyGovernor {\n        uint256 reserves;\n        address[] memory reserveToken = registry[STATUS.RESERVETOKEN];\n        for (uint256 i = 0; i < reserveToken.length; i++) {\n            if (permissions[STATUS.RESERVETOKEN][reserveToken[i]]) {\n                reserves = reserves.add(tokenValue(reserveToken[i], IERC20(reserveToken[i]).balanceOf(address(this))));\n            }\n        }\n        address[] memory liquidityToken = registry[STATUS.LIQUIDITYTOKEN];\n        for (uint256 i = 0; i < liquidityToken.length; i++) {\n            if (permissions[STATUS.LIQUIDITYTOKEN][liquidityToken[i]]) {\n                reserves = reserves.add(\n                    tokenValue(liquidityToken[i], IERC20(liquidityToken[i]).balanceOf(address(this)))\n                );\n            }\n        }\n        totalReserves = reserves;\n        emit ReservesAudited(reserves);\n    }\n\n    /**\n     * @notice set max debt for address\n     * @param _address address\n     * @param _limit uint256\n     */\n    function setDebtLimit(address _address, uint256 _limit) external onlyGovernor {\n        debtLimit[_address] = _limit;\n    }\n\n    /**\n     * @notice enable permission from queue\n     * @param _status STATUS\n     * @param _address address\n     * @param _calculator address\n     */\n    function enable(\n        STATUS _status,\n        address _address,\n        address _calculator\n    ) external onlyGovernor {\n        require(timelockEnabled == false, \"Use queueTimelock\");\n        if (_status == STATUS.STHEO) {\n            sTHEO = ITokenDebt(_address);\n        } else if (_status == STATUS.YIELDREPORTER) {\n            yieldReporter = IYieldReporter(_address);\n        } else {\n            permissions[_status][_address] = true;\n\n            if (_status == STATUS.LIQUIDITYTOKEN) {\n                bondCalculator[_address] = _calculator;\n            }\n\n            (bool registered, ) = indexInRegistry(_address, _status);\n            if (!registered) {\n                registry[_status].push(_address);\n\n                if (_status == STATUS.LIQUIDITYTOKEN || _status == STATUS.RESERVETOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(_address, _status);\n                    if (reg) {\n                        delete registry[_status][index];\n                    }\n                }\n            }\n        }\n        emit Permissioned(_address, _status, true);\n    }\n\n    /**\n     *  @notice disable permission from address\n     *  @param _status STATUS\n     *  @param _toDisable address\n     */\n    function disable(STATUS _status, address _toDisable) external {\n        require(msg.sender == authority.governor() || msg.sender == authority.guardian(), \"Only governor or guardian\");\n        permissions[_status][_toDisable] = false;\n        emit Permissioned(_toDisable, _status, false);\n    }\n\n    /**\n     * @notice check if registry contains address\n     * @return (bool, uint256)\n     */\n    function indexInRegistry(address _address, STATUS _status) public view returns (bool, uint256) {\n        address[] memory entries = registry[_status];\n        for (uint256 i = 0; i < entries.length; i++) {\n            if (_address == entries[i]) {\n                return (true, i);\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @notice              update the current token price and previous (last) token price.\n     *                      Token price is calculated with the theoBondingCalculator, as set by the Governor\n     * @dev                 this method can be called at any time but will only update contract state every 8 hours\n     */\n    function tokenPerformanceUpdate() public override {\n        if (block.timestamp >= priceInfo.timeLastUpdated + 28800) {\n            priceInfo.lastTokenPrice = priceInfo.currentTokenPrice;\n            priceInfo.currentTokenPrice = IBondCalculator(theoBondingCalculator).valuation(\n                address(THEO),\n                1_000_000_000\n            );\n            priceInfo.timeLastUpdated = block.timestamp;\n        }\n    }\n\n    /* ========== TIMELOCKED FUNCTIONS ========== */\n\n    // functions are used prior to enabling on-chain governance\n\n    /**\n     * @notice queue address to receive permission\n     * @param _status STATUS\n     * @param _address address\n     * @param _calculator address\n     */\n    function queueTimelock(\n        STATUS _status,\n        address _address,\n        address _calculator\n    ) external onlyGovernor {\n        require(_address != address(0));\n        require(timelockEnabled == true, \"Timelock is disabled, use enable\");\n\n        uint256 timelock = block.number.add(blocksNeededForQueue);\n        if (_status == STATUS.RESERVEMANAGER || _status == STATUS.LIQUIDITYMANAGER) {\n            timelock = block.number.add(blocksNeededForQueue.mul(2));\n        }\n        permissionQueue.push(\n            Queue({\n                managing: _status,\n                toPermit: _address,\n                calculator: _calculator,\n                timelockEnd: timelock,\n                nullify: false,\n                executed: false\n            })\n        );\n        emit PermissionQueued(_status, _address);\n    }\n\n    /**\n     *  @notice enable queued permission\n     *  @param _index uint256\n     */\n    function execute(uint256 _index) external {\n        require(timelockEnabled == true, \"Timelock is disabled, use enable\");\n\n        Queue memory info = permissionQueue[_index];\n\n        require(!info.nullify, \"Action has been nullified\");\n        require(!info.executed, \"Action has already been executed\");\n        require(block.number >= info.timelockEnd, \"Timelock not complete\");\n\n        if (info.managing == STATUS.STHEO) {\n            // 9\n            sTHEO = ITokenDebt(info.toPermit);\n        } else {\n            permissions[info.managing][info.toPermit] = true;\n\n            if (info.managing == STATUS.LIQUIDITYTOKEN) {\n                bondCalculator[info.toPermit] = info.calculator;\n            }\n            (bool registered, ) = indexInRegistry(info.toPermit, info.managing);\n            if (!registered) {\n                registry[info.managing].push(info.toPermit);\n\n                if (info.managing == STATUS.LIQUIDITYTOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.RESERVETOKEN);\n                    if (reg) {\n                        delete registry[STATUS.RESERVETOKEN][index];\n                    }\n                } else if (info.managing == STATUS.RESERVETOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.LIQUIDITYTOKEN);\n                    if (reg) {\n                        delete registry[STATUS.LIQUIDITYTOKEN][index];\n                    }\n                }\n            }\n        }\n        permissionQueue[_index].executed = true;\n        emit Permissioned(info.toPermit, info.managing, true);\n    }\n\n    /**\n     * @notice cancel timelocked action\n     * @param _index uint256\n     */\n    function nullify(uint256 _index) external onlyGovernor {\n        permissionQueue[_index].nullify = true;\n    }\n\n    /**\n     * @notice disables timelocked functions\n     */\n    function disableTimelock() external onlyGovernor {\n        require(timelockEnabled == true, \"timelock already disabled\");\n        if (onChainGovernanceTimelock != 0 && onChainGovernanceTimelock <= block.number) {\n            timelockEnabled = false;\n        } else {\n            onChainGovernanceTimelock = block.number.add(blocksNeededForQueue.mul(7)); // 7-day timelock\n        }\n    }\n\n    /**\n     * @notice enables timelocks after initilization\n     */\n    function initialize() external onlyGovernor {\n        require(initialized == false, \"Already initialized\");\n        timelockEnabled = true;\n        initialized = true;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice returns THEO valuation for an amount of Quote Tokens\n     * @param _token address\n     * @param _amount uint256\n     * @return value_ uint256\n     */\n    function tokenValue(address _token, uint256 _amount) public view override returns (uint256 value_) {\n        value_ = _amount.mul(10**IERC20Metadata(address(THEO)).decimals()).div(10**IERC20Metadata(_token).decimals());\n\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            value_ = IBondCalculator(bondCalculator[_token]).valuation(_token, _amount);\n        }\n    }\n\n    /**\n     * @notice returns supply metric that cannot be manipulated by debt\n     * @dev use this any time you need to query supply\n     * @return uint256\n     */\n    function baseSupply() external view override returns (uint256) {\n        return THEO.totalSupply() - theoDebt;\n    }\n\n    /**\n     * @notice  calculate the proportional change (i.e. a percentage as a decimal) in token price, with 9 decimals\n     * @dev     calculated as (currentPrice - lastPrice) / lastPrice\n     *           using 9 decimals for the price values and for return value.\n     * @return  int256 proportional change in treasury yield. 9 decimals\n     */\n    function deltaTokenPrice() public view override returns (int256) {\n        return\n            ((priceInfo.currentTokenPrice.toInt256()).sub(priceInfo.lastTokenPrice.toInt256()) * 10**9).div(\n                priceInfo.lastTokenPrice.toInt256()\n            );\n    }\n\n    /**\n     * @notice  calculate the proportional change (i.e. a percentage as a decimal) in treasury yield, with 9 decimals\n     * @dev     calculated as (currentYield - lastYield) / lastYield\n     *           using 9 decimals for the yield values and for return value.\n     *           example: ((10_000_000_000 - 15_000_000_000)*(10**9)) / 15_000_000_000 = -333333333\n     *           -333333333 is equivalent to the proportion -0.333333333 (that is, -33.3333333%)\n     * @return  int256 proportional change in treasury yield. 9 decimals\n     */\n    function deltaTreasuryYield() public view override returns (int256) {\n        require(address(yieldReporter) != address(0), \"Zero address: YieldReporter\");\n        return\n            (((IYieldReporter(yieldReporter).currentYield()).sub(IYieldReporter(yieldReporter).lastYield())) * 10**9)\n                .div(IYieldReporter(yieldReporter).lastYield());\n    }\n}\n"
    },
    "src/Libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\n        if (a > 3) {\n            c = a;\n            uint256 b = add(div(a, 2), 1);\n            while (b < c) {\n                c = b;\n                b = div(add(div(a, b), b), 2);\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n\n    /*\n     * Expects percentage to be trailed by 00,\n     */\n    function percentageAmount(uint256 total_, uint8 percentage_) internal pure returns (uint256 percentAmount_) {\n        return div(mul(total_, percentage_), 1000);\n    }\n\n    /*\n     * Expects percentage to be trailed by 00,\n     */\n    function substractPercentage(uint256 total_, uint8 percentageToSub_) internal pure returns (uint256 result_) {\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\n    }\n\n    function percentageOfTotal(uint256 part_, uint256 total_) internal pure returns (uint256 percent_) {\n        return div(mul(part_, 100), total_);\n    }\n\n    /**\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n\n    function quadraticPricing(uint256 payment_, uint256 multiplier_) internal pure returns (uint256) {\n        return sqrrt(mul(multiplier_, payment_));\n    }\n\n    function bondingCurve(uint256 supply_, uint256 multiplier_) internal pure returns (uint256) {\n        return mul(multiplier_, supply_);\n    }\n}\n"
    },
    "src/Libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport { IERC20 } from \"../Interfaces/IERC20.sol\";\n\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\n/// Taken from Solmate\nlibrary SafeERC20 {\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        (bool success, ) = to.call{ value: amount }(new bytes(0));\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "src/Libraries/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 private constant _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
    },
    "src/Libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "src/Interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/Interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "src/Interfaces/ITHEO.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface ITHEO is IERC20 {\n    function mint(address account_, uint256 amount_) external;\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address account_, uint256 amount_) external;\n}\n"
    },
    "src/Interfaces/ITokenDebt.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface ITokenDebt is IERC20 {\n    function changeDebt(\n        uint256 amount,\n        address debtor,\n        bool add\n    ) external;\n\n    function debtBalances(address _address) external view returns (uint256);\n}\n"
    },
    "src/Interfaces/IBondCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity >=0.7.5 <=0.8.10;\n\ninterface IBondCalculator {\n    function valuation(address tokenIn, uint256 amount_) external view returns (uint256 amountOut);\n}\n"
    },
    "src/Interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IBondCalculator.sol\";\n\ninterface ITreasury {\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external returns (uint256);\n\n    function withdraw(uint256 _amount, address _token) external;\n\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\n\n    function mint(address _recipient, uint256 _amount) external;\n\n    function manage(address _token, uint256 _amount) external;\n\n    function incurDebt(uint256 amount_, address token_) external;\n\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\n\n    function tokenPerformanceUpdate() external;\n\n    function baseSupply() external view returns (uint256);\n\n    function deltaTokenPrice() external view returns (int256);\n\n    function deltaTreasuryYield() external view returns (int256);\n\n    function getTheoBondingCalculator() external view returns (IBondCalculator);\n\n    function setTheoBondingCalculator(address _theoBondingCalculator) external;\n}\n"
    },
    "src/Interfaces/IYieldReporter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IYieldReporter {\n    event ReportYield(uint256 indexed id, int256 yield);\n\n    function lastYield() external view returns (int256);\n\n    function currentYield() external view returns (int256);\n\n    function getYieldById(uint256 id) external view returns (int256);\n\n    function reportYield(int256 _amount) external returns (uint256);\n}\n"
    },
    "src/Interfaces/IBondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IBondDepository {\n    // Info about each type of market\n    struct Market {\n        uint256 capacity; // capacity remaining\n        IERC20 quoteToken; // token to accept as payment\n        bool capacityInQuote; // capacity limit is in payment token (true) or in THEO (false, default)\n        uint256 sold; // base tokens out\n        uint256 purchased; // quote tokens in\n        uint256 totalDebt; // total debt from market\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\n    }\n\n    // Info for creating new markets\n    struct Terms {\n        bool fixedTerm; // fixed term or fixed expiration\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\n        int64 bondRateFixed; // 9 decimal fixed discount expressed as a proportion (that is, a percentage in its decimal form)\n        int64 maxBondRateVariable; // 9 decimal maximum proportion (that is, a percentage in its decimal form) discount on current market price\n        int64 discountRateBond; // 9 decimal\n        int64 discountRateYield; // 9 decimal\n        uint256 maxDebt; // 9 decimal debt maximum in THEO\n    }\n\n    // Additional info about market.\n    struct Metadata {\n        uint48 lastTune; // last timestamp when control variable was tuned\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\n        uint64 depositInterval; // target frequency of deposits\n        uint64 tuneInterval; // frequency of tuning\n        uint8 quoteDecimals; // decimals of quote token\n    }\n\n    struct DepositArgs {\n        uint256 id;\n        uint256 amount;\n        uint256 maxPrice;\n        address user;\n        address referral;\n        bool autoStake;\n    }\n\n    /**\n     * @notice deposit market\n     * @param _bid uint256\n     * @param _amount uint256\n     * @param _maxPrice uint256\n     * @param _user address\n     * @param _referral address\n     * @return payout_ uint256\n     * @return expiry_ uint256\n     * @return index_ uint256\n     */\n    function deposit(\n        uint256 _bid,\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _user,\n        address _referral,\n        bool _autoStake\n    )\n        external\n        returns (\n            uint256 payout_,\n            uint256 expiry_,\n            uint256 index_\n        );\n\n    function create(\n        IERC20 _quoteToken, // token used to deposit\n        uint256[3] memory _market, // [capacity, initial price]\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\n        uint256[2] memory _terms, // [vesting, conclusion]\n        int64[4] memory _rates, // [bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]\n        uint64[2] memory _intervals // [deposit interval, tune interval]\n    ) external returns (uint256 id_);\n\n    function close(uint256 _id) external;\n\n    function isLive(uint256 _bid) external view returns (bool);\n\n    function liveMarkets() external view returns (uint256[] memory);\n\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\n\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\n\n    function marketPrice(uint256 _bid) external view returns (uint256);\n\n    function currentDebt(uint256 _bid) external view returns (uint256);\n\n    function debtDecay(uint256 _bid) external view returns (uint64);\n\n    function setDiscountRateBond(uint256 _id, int64 _discountRateBond) external;\n\n    function setDiscountRateYield(uint256 _id, int64 _discountRateYield) external;\n\n    function bondRateVariable(uint256 _id) external view returns (uint256);\n}\n"
    },
    "src/Types/TheopetraAccessControlled.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport \"../Interfaces/ITheopetraAuthority.sol\";\n\nabstract contract TheopetraAccessControlled {\n    /* ========== EVENTS ========== */\n\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\n\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\n\n    /* ========== STATE VARIABLES ========== */\n\n    ITheopetraAuthority public authority;\n\n    /* ========== Constructor ========== */\n\n    constructor(ITheopetraAuthority _authority) {\n        authority = _authority;\n        emit AuthorityUpdated(_authority);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyGovernor() {\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyGuardian() {\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyPolicy() {\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyManager() {\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyVault() {\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\n        _;\n    }\n\n    /* ========== GOV ONLY ========== */\n\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\n        authority = _newAuthority;\n        emit AuthorityUpdated(_newAuthority);\n    }\n}\n"
    },
    "src/Interfaces/ITheopetraAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface ITheopetraAuthority {\n    /* ========== EVENTS ========== */\n\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n\n    event GovernorPulled(address indexed from, address indexed to);\n    event GuardianPulled(address indexed from, address indexed to);\n    event PolicyPulled(address indexed from, address indexed to);\n    event ManagerPulled(address indexed from, address indexed to);\n    event VaultPulled(address indexed from, address indexed to);\n    event SignerPulled(address indexed from, address indexed to);\n\n    /* ========== VIEW ========== */\n\n    function governor() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function policy() external view returns (address);\n\n    function manager() external view returns (address);\n\n    function vault() external view returns (address);\n\n    function whitelistSigner() external view returns (address);\n}\n"
    },
    "src/Theopetra/sTheopetraERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"../Interfaces/IStakedTHEOToken.sol\";\nimport \"../Interfaces/ITokenDebt.sol\";\n\nimport \"../Types/ERC20Permit.sol\";\nimport \"../Types/TheopetraAccessControlled.sol\";\n\ncontract sTheopetra is IStakedTHEOToken, ITokenDebt, ERC20Permit, TheopetraAccessControlled {\n    using SafeMath for uint256;\n\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"UNAUTHORIZED\");\n        _;\n    }\n\n    address public stakingContract;\n    address public initializer;\n\n    event LogSupply(uint256 indexed epoch, uint256 timestamp, uint256 totalSupply);\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\n    event LogStakingContractUpdated(address stakingContract);\n\n    struct Rebase {\n        uint256 epoch;\n        uint256 rebase; // 18 decimals\n        uint256 totalStakedBefore;\n        uint256 totalStakedAfter;\n        uint256 amountRebased;\n        uint256 index;\n        uint256 blockNumberOccured;\n    }\n    Rebase[] public rebases;\n\n    uint256 public INDEX;\n\n    uint256 private constant MAX_UINT256 = ~uint256(0);\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\n\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n    // Use the highest value that fits in a uint256 for max granularity.\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n\n    uint256 private _gonsPerFragment;\n    mapping(address => uint256) private _gonBalances;\n\n    mapping(address => mapping(address => uint256)) private _allowedValue;\n\n    address public treasury;\n    mapping(address => uint256) public override debtBalances;\n\n    constructor(address _authority)\n        ERC20(\"Staked THEO\", \"sTHEO\", 9)\n        ERC20Permit()\n        TheopetraAccessControlled(ITheopetraAuthority(_authority))\n    {\n        initializer = msg.sender;\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n    }\n\n    function initialize(address stakingContract_, address _treasury) external returns (bool) {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n        require(stakingContract_ != address(0), \"Zero address: Staking\");\n        stakingContract = stakingContract_;\n        _gonBalances[stakingContract] = TOTAL_GONS;\n\n        require(_treasury != address(0), \"Zero address: Treasury\");\n        treasury = _treasury;\n\n        emit Transfer(address(0x0), stakingContract, _totalSupply);\n        emit LogStakingContractUpdated(stakingContract_);\n\n        initializer = address(0);\n        return true;\n    }\n\n    function setIndex(uint256 _INDEX) external onlyManager returns (bool) {\n        require(INDEX == 0);\n        INDEX = gonsForBalance(_INDEX);\n        return true;\n    }\n\n    /**\n        @notice increases sTHEO supply to increase staking balances relative to profit_\n        @param profit_ uint256\n        @return uint256\n     */\n    function rebase(uint256 profit_, uint256 epoch_) public override onlyStakingContract returns (uint256) {\n        uint256 rebaseAmount;\n        uint256 circulatingSupply_ = circulatingSupply();\n\n        if (profit_ == 0) {\n            emit LogSupply(epoch_, block.timestamp, _totalSupply);\n            emit LogRebase(epoch_, 0, index());\n            return _totalSupply;\n        } else if (circulatingSupply_ > 0) {\n            rebaseAmount = profit_.mul(_totalSupply).div(circulatingSupply_);\n        } else {\n            rebaseAmount = profit_;\n        }\n\n        _totalSupply = _totalSupply.add(rebaseAmount);\n\n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n\n        _storeRebase(circulatingSupply_, profit_, epoch_);\n\n        return _totalSupply;\n    }\n\n    /**\n        @notice emits event with data about rebase\n        @param previousCirculating_ uint\n        @param profit_ uint\n        @param epoch_ uint\n        @return bool\n     */\n    function _storeRebase(\n        uint256 previousCirculating_,\n        uint256 profit_,\n        uint256 epoch_\n    ) internal returns (bool) {\n        uint256 rebasePercent = profit_.mul(1e18).div(previousCirculating_);\n\n        rebases.push(\n            Rebase({\n                epoch: epoch_,\n                rebase: rebasePercent, // 18 decimals\n                totalStakedBefore: previousCirculating_,\n                totalStakedAfter: circulatingSupply(),\n                amountRebased: profit_,\n                index: index(),\n                blockNumberOccured: block.number\n            })\n        );\n\n        emit LogSupply(epoch_, block.timestamp, _totalSupply);\n        emit LogRebase(epoch_, rebasePercent, index());\n\n        return true;\n    }\n\n    function balanceOf(address who) public view override(IStakedTHEOToken, IERC20, ERC20) returns (uint256) {\n        return _gonBalances[who].div(_gonsPerFragment);\n    }\n\n    function gonsForBalance(uint256 amount) public view override returns (uint256) {\n        return amount.mul(_gonsPerFragment);\n    }\n\n    function balanceForGons(uint256 gons) public view override returns (uint256) {\n        return gons.div(_gonsPerFragment);\n    }\n\n    // Staking contract holds excess sTHEO\n    function circulatingSupply() public view override returns (uint256) {\n        return _totalSupply.sub(balanceOf(stakingContract));\n    }\n\n    function index() public view override returns (uint256) {\n        return balanceForGons(INDEX);\n    }\n\n    function transfer(address to, uint256 value) public override(ERC20, IERC20) returns (bool) {\n        uint256 gonValue = gonsForBalance(value);\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner_, address spender) public view override(ERC20, IERC20) returns (uint256) {\n        return _allowedValue[owner_][spender];\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public override(ERC20, IERC20) returns (bool) {\n        _allowedValue[from][msg.sender] = _allowedValue[from][msg.sender].sub(value);\n        emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\n\n        uint256 gonValue = gonsForBalance(value);\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n        emit Transfer(from, to, value);\n\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public override(ERC20, IERC20) returns (bool) {\n        _allowedValue[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // What gets called in a permit\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal virtual override {\n        _allowedValue[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\n        _allowedValue[msg.sender][spender] = _allowedValue[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\n        uint256 oldValue = _allowedValue[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _allowedValue[msg.sender][spender] = 0;\n        } else {\n            _allowedValue[msg.sender][spender] = oldValue.sub(subtractedValue);\n        }\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @notice this function is called by the treasury, and informs sTHEO of changes to debt.\n     * @dev    addresses with debt balances cannot transfer collateralized sTHEO until the debt has been repaid.\n     * @param amount uint256\n     * @param debtor address\n     * @param add    bool\n     */\n    function changeDebt(\n        uint256 amount,\n        address debtor,\n        bool add\n    ) external override {\n        require(msg.sender == treasury, \"Only treasury\");\n\n        if (add) {\n            debtBalances[debtor] = debtBalances[debtor].add(amount);\n        } else {\n            debtBalances[debtor] = debtBalances[debtor].sub(amount);\n        }\n        require(debtBalances[debtor] <= balanceOf(debtor), \"sTHEO: insufficient balance\");\n    }\n}\n"
    },
    "src/Interfaces/IStakedTHEOToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IStakedTHEOToken is IERC20 {\n    function rebase(uint256 theoProfit_, uint256 epoch_) external returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view override returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n}\n"
    },
    "src/Types/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"./ERC20.sol\";\nimport \"../Interfaces/IERC2612Permit.sol\";\nimport \"../Libraries/Counters.sol\";\n\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    bytes32 public DOMAIN_SEPARATOR;\n\n    constructor() {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                keccak256(bytes(\"1\")), // Version\n                chainID,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev See {IERC2612Permit-permit}.\n     *\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"Permit: expired deadline\");\n\n        bytes32 hashStruct = keccak256(\n            abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline)\n        );\n\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\n\n        address signer = ecrecover(_hash, v, r, s);\n        require(signer != address(0) && signer == owner, \"ZeroSwapPermit: Invalid signature\");\n\n        _nonces[owner].increment();\n        _approve(owner, spender, amount);\n    }\n\n    /**\n     * @dev See {IERC2612Permit-nonces}.\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return _nonces[owner].current();\n    }\n}\n"
    },
    "src/Types/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\nimport \"../Libraries/SafeMath.sol\";\n\nimport \"../Interfaces/IERC20.sol\";\n\nabstract contract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    // TODO comment actual hash value.\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256(\"ERC20Token\");\n\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 internal _totalSupply;\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal immutable _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from_,\n        address to_,\n        uint256 amount_\n    ) internal virtual {}\n}\n"
    },
    "src/Interfaces/IERC2612Permit.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ninterface IERC2612Permit {\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n}\n"
    },
    "src/Libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"./SafeMath.sol\";\n\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "src/Theopetra/TheopetraERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"../Types/ERC20Permit.sol\";\nimport \"../Types/ERC20.sol\";\nimport \"../Types/TheopetraAccessControlled.sol\";\n\nimport \"../Libraries/SafeMath.sol\";\n\ncontract TheopetraERC20Token is ERC20Permit, TheopetraAccessControlled {\n    using SafeMath for uint256;\n\n    uint256 private _initialSupply;\n\n    constructor(address _authority)\n        ERC20(\"Theopetra\", \"THEO\", 9)\n        TheopetraAccessControlled(ITheopetraAuthority(_authority))\n    {}\n\n    function getInitialSupply() public view returns (uint256) {\n        return _initialSupply;\n    }\n\n    /** @dev If `_initialSupply` is not zero, the amount to mint is\n     * limited to at most 5% of `_initialSupply`.\n     *\n     * The first time mint is successfully called, it will update the `_initialSupply`\n     * to equal the mint `amount_`\n     *\n     * Note _initialSupply is initialized to zero\n     */\n    function mint(address account_, uint256 amount_) external onlyVault {\n        uint256 amount = amount_;\n        uint256 mintLimit = (_initialSupply * 5) / 100;\n\n        if (_initialSupply == 0) {\n            _initialSupply = amount_;\n        } else if (_initialSupply != 0 && amount_ > mintLimit) {\n            amount = mintLimit;\n        }\n        _mint(account_, amount);\n    }\n\n    function burn(uint256 amount) public virtual {\n        _burn(msg.sender, amount);\n    }\n\n    function burnFrom(address account_, uint256 amount_) public virtual {\n        _burnFrom(account_, amount_);\n    }\n\n    function _burnFrom(address account_, uint256 amount_) public virtual {\n        uint256 decreasedAllowance_ = allowance(account_, msg.sender).sub(\n            amount_,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n\n        _approve(account_, msg.sender, decreasedAllowance_);\n        _burn(account_, amount_);\n    }\n}\n"
    },
    "src/Theopetra/TheopetraFounderVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.5;\n\nimport \"../Types/TheopetraAccessControlled.sol\";\n\nimport \"../Libraries/SafeMath.sol\";\nimport \"../Libraries/SafeERC20.sol\";\nimport \"../Libraries/SignedSafeMath.sol\";\n\nimport \"../Interfaces/IFounderVesting.sol\";\nimport \"../Interfaces/ITHEO.sol\";\nimport \"../Interfaces/ITreasury.sol\";\n\n/**\n * @title TheopetraFounderVesting\n * @dev This contract allows to split THEO payments among a group of accounts. The sender does not need to be aware\n * that the THEO will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the THEO that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `TheopetraFounderVesting` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n */\ncontract TheopetraFounderVesting is IFounderVesting, TheopetraAccessControlled {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n    ITreasury private treasury;\n    ITHEO private THEO;\n\n    uint256 private fdvTarget;\n\n    uint256 private totalShares;\n\n    mapping(address => uint256) private shares;\n    address[] private payees;\n\n    mapping(IERC20 => uint256) private erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private erc20Released;\n\n    uint256 private deployTime = block.timestamp;\n    uint256[] private unlockTimes;\n    uint256[] private unlockAmounts;\n\n    bool private founderRebalanceLocked = false;\n    bool private initialized = false;\n\n    /**\n     * @notice return the decimals in the percentage values and\n     * thus the number of shares per percentage point (1% = 10_000_000 shares)\n     */\n    function decimals() public pure returns (uint8) {\n        return 9;\n    }\n\n    /**\n     * @dev Creates an instance of `TheopetraFounderVesting` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(\n        ITheopetraAuthority _authority,\n        address _treasury,\n        address _theo,\n        uint256 _fdvTarget,\n        address[] memory _payees,\n        uint256[] memory _shares,\n        uint256[] memory _unlockTimes,\n        uint256[] memory _unlockAmounts\n    ) TheopetraAccessControlled(_authority) {\n        require(_payees.length == _shares.length, \"TheopetraFounderVesting: payees and shares length mismatch\");\n        require(_payees.length > 0, \"TheopetraFounderVesting: no payees\");\n        require(\n            _unlockTimes.length == _unlockAmounts.length,\n            \"TheopetraFounderVesting: unlock times and amounts length mismatch\"\n        );\n        require(_unlockTimes.length > 0, \"TheopetraFounderVesting: no unlock schedule\");\n\n        fdvTarget = _fdvTarget;\n        THEO = ITHEO(_theo);\n        treasury = ITreasury(_treasury);\n        unlockTimes = _unlockTimes;\n        unlockAmounts = _unlockAmounts;\n\n        for (uint256 i = 0; i < _payees.length; i++) {\n            _addPayee(_payees[i], _shares[i]);\n        }\n    }\n\n    function initialMint() public onlyGovernor {\n        require(!initialized, \"TheopetraFounderVesting: initialMint can only be run once\");\n        initialized = true;\n\n        // mint tokens for the initial shares\n        uint256 tokensToMint = totalShares.mul(THEO.totalSupply()).div(10**decimals() - totalShares);\n        treasury.mint(address(this), tokensToMint);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function getTotalShares() public view override returns (uint256) {\n        return totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function getTotalReleased(IERC20 token) public view override returns (uint256) {\n        return erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function getShares(address account) public view override returns (uint256) {\n        return shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function getReleased(IERC20 token, address account) public view override returns (uint256) {\n        return erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for unlocked multiplier for time-locked funds. This is the percent currently unlocked as a decimal ratio of 1.\n     */\n    function getUnlockedMultiplier() public view returns (uint256) {\n        uint256 timeSinceDeploy = block.timestamp - deployTime;\n        for (uint256 i = unlockTimes.length; i > 0; i--) {\n            if (timeSinceDeploy >= unlockTimes[i - 1]) {\n                return unlockAmounts[i - 1];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Scale the founder amount with respect to the FDV target value\n     * @dev calculated as currentFDV / FDVtarget (using 9 decimals)\n     * @return uint256 proportion of FDV target, 9 decimals\n     */\n    function getFdvFactor() public view returns (uint256) {\n        IBondCalculator theoBondingCalculator = treasury.getTheoBondingCalculator();\n        if (address(theoBondingCalculator) == address(0)) {\n            revert(\"TheopetraFounderVesting: No bonding calculator\");\n        }\n\n        // expects valuation to be come back as fixed point with 9 decimals\n        uint256 currentPrice = IBondCalculator(theoBondingCalculator).valuation(address(THEO), 1);\n        uint256 calculatedFdv = currentPrice.mul(THEO.totalSupply());\n\n        if (calculatedFdv >= fdvTarget.mul(10**decimals())) {\n            return 10**decimals();\n        }\n\n        return calculatedFdv.div(fdvTarget);\n    }\n\n    /**\n     * @dev Mints or burns tokens for this contract to balance shares to their appropriate percentage\n     */\n    function rebalance() public {\n        require(shares[msg.sender] > 0, \"TheopetraFounderVesting: account has no shares\");\n\n        uint256 totalSupply = THEO.totalSupply();\n        uint256 contractBalance = THEO.balanceOf(address(this));\n        uint256 totalReleased = erc20TotalReleased[THEO];\n\n        // Checks if rebalance has been locked\n        if (founderRebalanceLocked) return;\n\n        uint256 founderAmount = totalShares\n            .mul(totalSupply - (contractBalance + totalReleased))\n            .mul(getFdvFactor())\n            .div(10**decimals())\n            .div(10**decimals() - totalShares);\n\n        if (founderAmount > (contractBalance + totalReleased)) {\n            treasury.mint(address(this), founderAmount - (contractBalance + totalReleased));\n        } else if (founderAmount < (contractBalance + totalReleased)) {\n            THEO.burn(contractBalance + totalReleased - founderAmount);\n        }\n\n        // locks the rebalance to not occur again after it is called once after unlock schedule\n        uint256 timeSinceDeploy = block.timestamp - deployTime;\n        if (timeSinceDeploy > unlockTimes[unlockTimes.length - 1]) {\n            founderRebalanceLocked = true;\n        }\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token) public override {\n        address account = msg.sender;\n        require(shares[account] > 0, \"TheopetraFounderVesting: account has no shares\");\n\n        rebalance();\n\n        uint256 totalReceived = token.balanceOf(address(this)) + getTotalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, getReleased(token, account));\n\n        require(payment != 0, \"TheopetraFounderVesting: account is not due payment\");\n\n        erc20Released[token][account] += payment;\n        erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens specified, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function releaseAmount(IERC20 token, uint256 amount) public override {\n        address account = msg.sender;\n        require(shares[account] > 0, \"TheopetraFounderVesting: account has no shares\");\n        require(amount > 0, \"TheopetraFounderVesting: amount cannot be 0\");\n\n        rebalance();\n\n        uint256 totalReceived = token.balanceOf(address(this)) + getTotalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, getReleased(token, account));\n\n        require(payment != 0, \"TheopetraFounderVesting: account is not due payment\");\n        require(amount <= payment, \"TheopetraFounderVesting: requested amount is more than due payment for account\");\n\n        erc20Released[token][account] += amount;\n        erc20TotalReleased[token] += amount;\n\n        SafeERC20.safeTransfer(token, account, amount);\n        emit ERC20PaymentReleased(token, account, amount);\n    }\n\n    /**\n     * @dev Returns the amount of tokens that could be paid to `account` at the current time.\n     */\n    function getReleasable(IERC20 token, address account) external view override returns (uint256) {\n        require(shares[account] > 0, \"TheopetraFounderVesting: account has no shares\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + getTotalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, getReleased(token, account));\n\n        return payment;\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return\n            (totalReceived * shares[account] * getUnlockedMultiplier()) /\n            (totalShares * 10**decimals()) -\n            alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"TheopetraFounderVesting: account is the zero address\");\n        require(shares_ > 0, \"TheopetraFounderVesting: shares are 0\");\n        require(shares[account] == 0, \"TheopetraFounderVesting: account already has shares\");\n\n        payees.push(account);\n        shares[account] = shares_;\n        totalShares = totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "src/Interfaces/IFounderVesting.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IFounderVesting {\n    event PayeeAdded(address account, uint256 shares);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    function getTotalShares() external view returns (uint256);\n\n    function getTotalReleased(IERC20 token) external view returns (uint256);\n\n    function getShares(address account) external view returns (uint256);\n\n    function getReleased(IERC20 token, address account) external view returns (uint256);\n\n    function release(IERC20 token) external;\n\n    function releaseAmount(IERC20 token, uint256 amount) external;\n\n    function getReleasable(IERC20 token, address account) external view returns (uint256);\n}\n"
    },
    "src/Theopetra/Staking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\nimport \"../Types/TheopetraAccessControlled.sol\";\nimport \"../Libraries/SafeMath.sol\";\nimport \"../Libraries/SafeERC20.sol\";\n\nimport \"../Interfaces/IDistributor.sol\";\nimport \"../Interfaces/IStakedTHEOToken.sol\";\nimport \"../Interfaces/ITHEO.sol\";\nimport \"../Interfaces/ITreasury.sol\";\n\ncontract TheopetraStaking is TheopetraAccessControlled {\n    using SafeMath for *;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IStakedTHEOToken;\n    using SafeERC20 for ITHEO;\n\n    /* ====== VARIABLES ====== */\n\n    Epoch public epoch;\n\n    address public immutable THEO;\n    address public immutable sTHEO;\n    address public immutable treasury;\n    uint256 public immutable stakingTerm;\n\n    address public distributor;\n\n    address public locker;\n    uint256 public totalBonus;\n\n    address public warmupContract;\n    uint256 public warmupPeriod;\n\n    uint256 private gonsInWarmup;\n    uint256 private slashedGons;\n\n    mapping(address => Claim[]) public stakingInfo;\n    mapping(address => bool) private isExternalLocked;\n    mapping(address => mapping(uint256 => address)) private claimTransfers; // change claim ownership\n    mapping(uint256 => uint256) penaltyBands;\n    mapping(address => bool) private bondDepos;\n\n    /* ====== STRUCTS ====== */\n\n    struct Epoch {\n        uint256 length;\n        uint256 number;\n        uint256 end;\n        uint256 distribute;\n    }\n\n    struct Claim {\n        uint256 deposit;\n        uint256 gonsInWarmup;\n        uint256 warmupExpiry;\n        uint256 stakingExpiry;\n        uint256 gonsRemaining;\n    }\n\n    struct UnstakeAmounts {\n        uint256 _amountSingle;\n        uint256 _gonsRemaining;\n    }\n\n    constructor(\n        address _THEO,\n        address _sTHEO,\n        uint256 _epochLength,\n        uint256 _firstEpochNumber,\n        uint256 _firstEpochTime,\n        uint256 _stakingTerm,\n        address _authority,\n        address _treasury\n    ) TheopetraAccessControlled(ITheopetraAuthority(_authority)) {\n        uint256[] memory bands = new uint256[](20);\n        uint256[] memory penalties = new uint256[](20);\n\n        for (uint256 i = 1; i < 21; i++) {\n            bands[i - 1] = i;\n            penalties[i - 1] = 21 - i;\n        }\n\n        _definePenalties(bands, penalties);\n\n        require(_THEO != address(0), \"Invalid address\");\n        THEO = _THEO;\n        require(_sTHEO != address(0), \"Invalid address\");\n        sTHEO = _sTHEO;\n        stakingTerm = _stakingTerm;\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n\n        epoch = Epoch({ length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0 });\n    }\n\n    /**\n        @notice stake THEO to enter warmup\n        @dev    if warmupPeriod is 0 and _claim is true, funds are sent immediately, and warmupExpiry is 0:\n                this is so that the staker cannot retrieve sTHEO from warmup using the stored\n                Claim (see also `claim`). If warmupPeriod is not 0, or if _claim is false, then funds go into warmup (sTheo is not sent)\n        @param _amount uint\n        @param _claim bool\n        @return uint256 _amount staked\n        @return _index uint256 the index of the claim added for the recipient in the recipient's stakingInfo\n     */\n    function stake(\n        address _recipient,\n        uint256 _amount,\n        bool _claim\n    ) external returns (uint256, uint256 _index) {\n        rebase();\n        IERC20(THEO).safeTransferFrom(msg.sender, address(this), _amount);\n\n        if (!isExternalLocked[_recipient]) {\n            require(_recipient == msg.sender, \"External deposits for account are locked\");\n        }\n\n        uint256 _index = stakingInfo[_recipient].length;\n\n        if (warmupPeriod == 0 && _claim) {\n            stakingInfo[_recipient].push(\n                Claim({\n                    deposit: _amount,\n                    gonsInWarmup: 0,\n                    warmupExpiry: 0,\n                    stakingExpiry: block.timestamp.add(stakingTerm),\n                    gonsRemaining: IStakedTHEOToken(sTHEO).gonsForBalance(_amount)\n                })\n            );\n            _send(_recipient, _amount);\n        } else {\n            gonsInWarmup = gonsInWarmup.add(IStakedTHEOToken(sTHEO).gonsForBalance(_amount));\n            stakingInfo[_recipient].push(\n                Claim({\n                    deposit: _amount,\n                    gonsInWarmup: IStakedTHEOToken(sTHEO).gonsForBalance(_amount),\n                    warmupExpiry: block.timestamp.add(warmupPeriod),\n                    stakingExpiry: block.timestamp.add(stakingTerm),\n                    gonsRemaining: 0\n                })\n            );\n        }\n\n        return (_amount, _index);\n    }\n\n    /**\n        @notice retrieve sTHEO from warmup\n        @dev    After a claim has been retrieved (and a subsequent call to `isUnRetrieved` returns false),\n                the claim cannot be re-retrieved; gonsRemaining is therefore only set once by this method for each Claim\n        @param _recipient address\n        @param _indexes uint256[]      indexes of the sTHEO to retrieve\n        @return amount_                The sum total amount of sTHEO sent\n     */\n    function claim(address _recipient, uint256[] memory _indexes) public returns (uint256 amount_) {\n        if (!isExternalLocked[_recipient]) {\n            require(_recipient == msg.sender, \"External claims for account are locked\");\n        }\n\n        uint256 amount_ = 0;\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            if (isUnRetrieved(_recipient, i)) {\n                Claim memory info = stakingInfo[_recipient][_indexes[i]];\n\n                if (block.timestamp >= info.warmupExpiry && info.warmupExpiry != 0) {\n                    stakingInfo[_recipient][_indexes[i]].gonsInWarmup = 0;\n\n                    gonsInWarmup = gonsInWarmup.sub(info.gonsInWarmup);\n                    uint256 balanceForGons = IStakedTHEOToken(sTHEO).balanceForGons(info.gonsInWarmup);\n                    stakingInfo[_recipient][_indexes[i]].gonsRemaining = info.gonsInWarmup;\n                    amount_ = amount_.add(balanceForGons);\n                }\n            }\n        }\n\n        return _send(_recipient, amount_);\n    }\n\n    /**\n     * @notice             claim all retrievable (from warmup) claims for user\n     * @dev                if possible, query indexesFor() off-chain and input in claim() to save gas\n     * @param _recipient   address. The recipient to retrieve sTHEO from all claims for\n     * @return             sum of claim amounts sent, in sTHEO\n     */\n    function claimAll(address _recipient) external returns (uint256) {\n        return claim(_recipient, indexesFor(_recipient, true));\n    }\n\n    /**\n        @notice forfeit sTHEO in warmup and retrieve THEO\n     */\n    function forfeit(uint256 _index) external {\n        Claim memory info = stakingInfo[msg.sender][_index];\n        delete stakingInfo[msg.sender][_index];\n\n        gonsInWarmup = gonsInWarmup.sub(info.gonsInWarmup);\n\n        IERC20(THEO).safeTransfer(msg.sender, info.deposit);\n    }\n\n    /**\n        @notice prevent new deposits or claims to/from external address (protection from malicious activity)\n     */\n    function toggleLock() external {\n        isExternalLocked[msg.sender] = !isExternalLocked[msg.sender];\n    }\n\n    /**\n     * @notice redeem sTHEO for THEO from un-redeemed claims\n     * @dev    if `stakingExpiry` has not yet passed, Determine the penalty for removing early.\n     *         `percentageComplete` is the percentage of time that the stake has completed (versus the `stakingTerm`), expressed with 4 decimals.\n     *         note that For unstaking before 100% of staking term, only the principle deposit -- less a penalty -- is returned. In this case, the full claim must be redeemed\n     *         and gonsRemaining becomes zero.\n     *         note that For unstaking at or beyond 100% of the staking term, a part-redeem can be made: that is, a user may redeem less than 100% of the total amount available to redeem\n     *         (as represented by gonsRemaining), during a call to `unstake`\n     *         note that The penalty is added (after conversion to gons) to `slasheGons` and subtracted from the amount to return\n     *         gonsRemaining keeps track of the amount of sTheo (as gons) that can be redeemed for a Claim\n     *         note that When unstaking from the locked tranche (stakingTerm > 0) after the stake reaches maturity,\n     *         the Stake becomes eligible to claim against bonus pool rewards (tracked in `slashedGons`; see also `getSlashedRewards`)\n     * @param _to address\n     * @param _amounts uint\n     * @param _trigger bool\n     * @param _indexes uint256[]\n     * @return amount_ uint\n     */\n    function unstake(\n        address _to,\n        uint256[] memory _amounts,\n        bool _trigger,\n        uint256[] memory _indexes\n    ) external returns (uint256 amount_) {\n        if (!isExternalLocked[_to]) {\n            require(_to == msg.sender, \"External unstaking for account is locked\");\n        }\n        require(_amounts.length == _indexes.length, \"Amounts and indexes lengths do not match\");\n\n        amount_ = 0;\n        uint256 bounty;\n\n        uint256[] memory amountsAsGons = new uint256[](_indexes.length);\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            amountsAsGons[i] = IStakedTHEOToken(sTHEO).gonsForBalance(_amounts[i]);\n        }\n\n        if (_trigger) {\n            bounty = rebase();\n        }\n\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            Claim memory info = stakingInfo[_to][_indexes[i]];\n            UnstakeAmounts memory unstakeAmounts;\n            unstakeAmounts._amountSingle = IStakedTHEOToken(sTHEO).balanceForGons(amountsAsGons[i]);\n\n            if (isUnRedeemed(_to, _indexes[i])) {\n                unstakeAmounts._gonsRemaining = IStakedTHEOToken(sTHEO).gonsForBalance(\n                    IStakedTHEOToken(sTHEO).balanceForGons(info.gonsRemaining)\n                );\n\n                stakingInfo[_to][_indexes[i]].gonsRemaining = (unstakeAmounts._gonsRemaining).sub(\n                    IStakedTHEOToken(sTHEO).gonsForBalance(unstakeAmounts._amountSingle)\n                );\n\n                IStakedTHEOToken(sTHEO).safeTransferFrom(msg.sender, address(this), unstakeAmounts._amountSingle);\n\n                if (block.timestamp >= info.stakingExpiry) {\n                    uint256 slashedRewards = 0;\n                    if (stakingTerm > 0) {\n                        slashedRewards = getSlashedRewards(unstakeAmounts._amountSingle);\n                    }\n\n                    amount_ = amount_.add(bounty).add(unstakeAmounts._amountSingle).add(slashedRewards);\n                } else if (block.timestamp < info.stakingExpiry) {\n                    require(\n                        stakingInfo[_to][_indexes[i]].gonsRemaining == 0,\n                        \"Amount does not match available remaining to redeem\"\n                    );\n\n                    uint256 penalty = getPenalty(\n                        stakingInfo[_to][_indexes[i]].deposit,\n                        (1000000.sub(((info.stakingExpiry.sub(block.timestamp)).mul(1000000)).div(stakingTerm))).div(\n                            10000\n                        )\n                    );\n\n                    slashedGons = slashedGons.add(IStakedTHEOToken(sTHEO).gonsForBalance(penalty));\n\n                    amount_ = amount_.add(stakingInfo[_to][_indexes[i]].deposit).sub(penalty);\n                }\n            }\n        }\n\n        require(amount_ <= ITHEO(THEO).balanceOf(address(this)), \"Insufficient THEO balance in contract\");\n        ITHEO(THEO).safeTransfer(_to, amount_);\n    }\n\n    /**\n        @dev slashedRewards is calculated as: (StakerTokens/totalStakedTokens) * totalSlashedTokens\n     */\n    function getSlashedRewards(uint256 amount) private view returns (uint256) {\n        uint256 circulatingSupply = IStakedTHEOToken(sTHEO).circulatingSupply();\n        uint256 baseDecimals = 10**9;\n\n        return\n            circulatingSupply > 0\n                ? ((amount.add(circulatingSupply)).mul(baseDecimals).div(circulatingSupply).sub(baseDecimals))\n                    .mul(IStakedTHEOToken(sTHEO).balanceForGons(slashedGons))\n                    .div(baseDecimals)\n                : 0;\n    }\n\n    function _definePenalties(uint256[] memory bands, uint256[] memory penalties) private {\n        require(bands.length == penalties.length, \"Arrays must be the same length\");\n        for (uint256 i = 0; i < bands.length; i++) {\n            _definePenalty(bands[i], penalties[i]);\n        }\n    }\n\n    function definePenalties(uint256[] memory bands, uint256[] memory penalties) public onlyPolicy {\n        _definePenalties(bands, penalties);\n    }\n\n    function _definePenalty(uint256 _percentBandMax, uint256 _penalty) private {\n        penaltyBands[_percentBandMax] = _penalty;\n    }\n\n    function ceil(uint256 a, uint256 m) private view returns (uint256) {\n        return a == 0 ? m : ((a.add(m).sub(1)).div(m)).mul(m);\n    }\n\n    function getPenalty(uint256 _amount, uint256 stakingTimePercentComplete) public view returns (uint256) {\n        if (stakingTimePercentComplete == 100) {\n            return 0;\n        }\n\n        uint256 penaltyBand = ceil(stakingTimePercentComplete, 5).div(5);\n        uint256 penaltyPercent = penaltyBands[penaltyBand];\n\n        return _amount.mul(penaltyPercent).div(100);\n    }\n\n    /**\n        @notice trigger rebase if epoch over\n        @return uint256\n     */\n    function rebase() public returns (uint256) {\n        uint256 bounty;\n        if (epoch.end <= block.timestamp) {\n            ITreasury(treasury).tokenPerformanceUpdate();\n\n            IStakedTHEOToken(sTHEO).rebase(epoch.distribute, epoch.number);\n\n            epoch.end = epoch.end.add(epoch.length);\n            epoch.number++;\n\n            if (distributor != address(0)) {\n                IDistributor(distributor).distribute();\n                bounty = IDistributor(distributor).retrieveBounty(); // Will mint THEO for this contract if there exists a bounty\n            }\n\n            uint256 balance = contractBalance();\n            uint256 staked = IStakedTHEOToken(sTHEO).circulatingSupply();\n\n            if (balance <= staked.add(bounty)) {\n                epoch.distribute = 0;\n            } else {\n                epoch.distribute = balance.sub(staked).sub(bounty);\n            }\n        }\n        return bounty;\n    }\n\n    /**\n        @notice returns contract THEO holdings, including bonuses provided\n        @return uint\n     */\n    function contractBalance() public view returns (uint256) {\n        return IERC20(THEO).balanceOf(address(this)).add(totalBonus);\n    }\n\n    /**\n        @notice provide bonus to locked staking contract\n        @param _amount uint\n     */\n    function giveLockBonus(uint256 _amount) external {\n        require(msg.sender == locker);\n        totalBonus = totalBonus.add(_amount);\n        IERC20(sTHEO).safeTransfer(locker, _amount);\n    }\n\n    /**\n        @notice reclaim bonus from locked staking contract\n        @param _amount uint\n     */\n    function returnLockBonus(uint256 _amount) external {\n        require(msg.sender == locker);\n        totalBonus = totalBonus.sub(_amount);\n        IERC20(sTHEO).safeTransferFrom(locker, address(this), _amount);\n    }\n\n    enum CONTRACTS {\n        DISTRIBUTOR,\n        WARMUP,\n        LOCKER\n    }\n\n    /**\n        @notice sets the contract address for LP staking\n        @param _contract address\n     */\n    function setContract(CONTRACTS _contract, address _address) external onlyManager {\n        if (_contract == CONTRACTS.DISTRIBUTOR) {\n            // 0\n            distributor = _address;\n        } else if (_contract == CONTRACTS.WARMUP) {\n            // 1\n            require(warmupContract == address(0), \"Warmup cannot be set more than once\");\n            warmupContract = _address;\n        } else if (_contract == CONTRACTS.LOCKER) {\n            // 2\n            require(locker == address(0), \"Locker cannot be set more than once\");\n            locker = _address;\n        }\n    }\n\n    /**\n     * @notice set warmup period for new stakers\n     * @param _warmupPeriod uint\n     */\n    function setWarmup(uint256 _warmupPeriod) external onlyManager {\n        warmupPeriod = _warmupPeriod;\n    }\n\n    /**\n     * @notice set the address of a bond depo to allow it to push claims to users when redeeming bonds\n     * @dev    see also `pushClaimForBond`\n     * @param _bondDepo address of the bond depo\n     */\n    function setBondDepo(address _bondDepo, bool val) external onlyGovernor {\n        bondDepos[_bondDepo] = val;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @notice send staker their amount as sTHEO (equal unit as THEO)\n     * @param _recipient address\n     * @param _amount uint\n     */\n    function _send(address _recipient, uint256 _amount) internal returns (uint256) {\n        IStakedTHEOToken(sTHEO).safeTransfer(_recipient, _amount);\n        return _amount;\n    }\n\n    /* ========== TRANSFER ========== */\n\n    /**\n     * @notice             approve an address to transfer a claim\n     * @param _to          address to approve claim transfer for\n     * @param _index       index of claim to approve transfer for\n     */\n    function pushClaim(address _to, uint256 _index) external {\n        require(stakingInfo[msg.sender][_index].stakingExpiry != 0, \"Staking: claim not found\");\n        claimTransfers[msg.sender][_index] = _to;\n    }\n\n    /**\n     * @notice             transfer a claim that has been approved by an address\n     * @param _from        the address that approved the claim transfer\n     * @param _index       the index of the claim to transfer (in the sender's array)\n     */\n    function pullClaim(address _from, uint256 _index) external returns (uint256 newIndex_) {\n        require(claimTransfers[_from][_index] == msg.sender, \"Staking: claim not found\");\n        require(\n            stakingInfo[_from][_index].gonsInWarmup > 0 || stakingInfo[_from][_index].gonsRemaining > 0,\n            \"Staking: claim redeemed\"\n        );\n\n        newIndex_ = stakingInfo[msg.sender].length;\n        stakingInfo[msg.sender].push(stakingInfo[_from][_index]);\n\n        delete stakingInfo[_from][_index];\n    }\n\n    /**\n     * @notice             transfer a claim that has been approved by an address\n     * @param _to          the address to push the claim to (must be pre-approved for transfer via `pushClaim`)\n     * @param _index       the index of the claim to transfer (in the sender's array)\n     */\n    function pushClaimForBond(address _to, uint256 _index) external returns (uint256 newIndex_) {\n        require(bondDepos[msg.sender], \"Caller is not a bond depository\");\n        require(claimTransfers[msg.sender][_index] == _to, \"Staking: claim not found\");\n        require(\n            stakingInfo[msg.sender][_index].gonsInWarmup > 0 || stakingInfo[msg.sender][_index].gonsRemaining > 0,\n            \"Staking: claim redeemed\"\n        );\n\n        newIndex_ = stakingInfo[_to].length;\n        stakingInfo[_to].push(stakingInfo[msg.sender][_index]);\n\n        delete stakingInfo[msg.sender][_index];\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n        @notice returns the sTHEO index, which tracks rebase growth\n        @return uint\n     */\n    function index() public view returns (uint256) {\n        return IStakedTHEOToken(sTHEO).index();\n    }\n\n    /**\n     * @notice total supply in warmup\n     */\n    function supplyInWarmup() public view returns (uint256) {\n        return IStakedTHEOToken(sTHEO).balanceForGons(gonsInWarmup);\n    }\n\n    /**\n     * @notice                all un-retrieved claims (sTHEO available to retrieve from warmup), or all un-redeemed claims (sTHEO retrieved but yet to be redeemed for THEO) for a user\n     * @param _user           the user to query claims for\n     * @param unRetrieved   bool. If true, return indexes of all un-claimed claims from warmup, else return indexes of all claims with un-redeemed sTheo\n     * @return                indexes of un-retrieved claims, or of un-redeemed claims, for the user\n     */\n    function indexesFor(address _user, bool unRetrieved) public view returns (uint256[] memory) {\n        Claim[] memory claims = stakingInfo[_user];\n\n        uint256 length;\n        for (uint256 i = 0; i < claims.length; i++) {\n            if (unRetrieved ? isUnRetrieved(_user, i) : isUnRedeemed(_user, i)) length++;\n        }\n\n        uint256[] memory indexes = new uint256[](length);\n        uint256 position;\n\n        for (uint256 i = 0; i < claims.length; i++) {\n            if (unRetrieved ? isUnRetrieved(_user, i) : isUnRedeemed(_user, i)) {\n                indexes[position] = i;\n                position++;\n            }\n        }\n\n        return indexes;\n    }\n\n    /**\n     * @notice             determine whether sTHEO has been retrieved (via `claim`) for a Claim\n     * @param _user        the user to query claims for\n     * @param _index       the index of the claim\n     * @return bool        true if the sTHEO has not yet been retrieved for the claim\n     */\n    function isUnRetrieved(address _user, uint256 _index) public view returns (bool) {\n        Claim memory claim = stakingInfo[_user][_index];\n        return claim.gonsInWarmup > 0;\n    }\n\n    /**\n     * @notice             determine whether a claim has a (non-zero) sTHEO balance remaining that can be redeemed for THEO\n     *                     if the claim is still in warmup, this method will return false (as no sTheo can yet be redeemed against the claim)\n     * @param _user        the user to query claims for\n     * @param _index       the index of the claim\n     * @return bool        true if the total sTHEO on the claim has not yet been redeemed for THEO\n     */\n    function isUnRedeemed(address _user, uint256 _index) public view returns (bool) {\n        Claim memory claim = stakingInfo[_user][_index];\n        return claim.gonsInWarmup == 0 && claim.gonsRemaining > 0;\n    }\n\n    function getClaimsCount(address _user) public view returns (uint256) {\n        return stakingInfo[_user].length;\n    }\n\n    /**\n     * @notice                  return the current expected rewards for a claim\n     * @param _user             the user that the claim belongs to\n     * @param _index            the index of the claim in the user's array\n     * @return currentRewards_  the current total rewards expected for a claim (valid only for claims out of warmup),\n                                calculated as: (sTHEO remaining + slashedRewards) - deposit amount\n                                note that currentRewards_ does not include any potential bounty or additional sTheo balance that\n                                may be applied if rebasing when unstaking\n     */\n    function rewardsFor(address _user, uint256 _index) public view returns (uint256 currentRewards_) {\n        Claim memory claim = stakingInfo[_user][_index];\n        uint256 _amountRemaining = IStakedTHEOToken(sTHEO).balanceForGons(claim.gonsRemaining);\n        currentRewards_ = 0;\n        if (isUnRedeemed(_user, _index)) {\n            currentRewards_ = (_amountRemaining.add(getSlashedRewards(_amountRemaining))).sub(claim.deposit);\n        }\n        return currentRewards_;\n    }\n\n    /**\n     * @notice             return the staking token that the tranche is based on\n     *\n     * @return address     the address of the staking token\n     */\n    function basis() public view returns (address) {\n        return sTHEO;\n    }\n}\n"
    },
    "src/Interfaces/IDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5 <=0.8.10;\n\ninterface IDistributor {\n    function distribute() external returns (bool);\n\n    function bounty() external view returns (uint256);\n\n    function retrieveBounty() external returns (uint256);\n\n    function nextRewardAt(uint256 _rate, address _recipient) external view returns (uint256);\n\n    function nextRewardFor(address _recipient) external view returns (uint256);\n\n    function nextRewardRate(uint256 _index) external view returns (uint256);\n\n    function setBounty(uint256 _bounty) external;\n\n    function addRecipient(\n        address _recipient,\n        uint256 _startRate,\n        int256 _drs,\n        int256 _dys,\n        bool _locked\n    ) external;\n\n    function removeRecipient(uint256 _index) external;\n\n    function setDiscountRateStaking(uint256 _index, int256 _drs) external;\n\n    function setDiscountRateYield(uint256 _index, int256 _dys) external;\n\n    function setStaking(address _addr) external;\n}\n"
    },
    "src/Mocks/TreasuryMock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"../Interfaces/ITHEO.sol\";\nimport \"../Interfaces/IBondCalculator.sol\";\n\ncontract TreasuryMock {\n    event Minted(address indexed caller, address indexed recipient, uint256 amount);\n\n    ITHEO public immutable THEO;\n    IBondCalculator private theoBondingCalculator;\n\n    constructor(address _theo) {\n        THEO = ITHEO(_theo);\n    }\n\n    function mint(address _recipient, uint256 _amount) external {\n        THEO.mint(_recipient, _amount);\n        emit Minted(msg.sender, _recipient, _amount);\n    }\n\n    function baseSupply() external pure returns (uint256) {\n        return 10_000_000_000_000_000;\n    }\n\n    function deltaTokenPrice() public view returns (int256) {\n        return 100_000_000; // 10%. 0.01 (9 decimals)\n    }\n\n    function deltaTreasuryYield() public view returns (int256) {\n        return 200_000_000; // 20%. 0.02 (9 decimals)\n    }\n\n    function getTheoBondingCalculator() public view returns (IBondCalculator) {\n        return IBondCalculator(theoBondingCalculator);\n    }\n\n    function setTheoBondingCalculator(address _theoBondingCalculator) public {\n        theoBondingCalculator = IBondCalculator(_theoBondingCalculator);\n    }\n}\n"
    },
    "src/Mocks/BondingCalculatorMock.sol": {
      "content": "pragma solidity ^0.7.5;\n\n// import \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\n// import \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\n// import \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\n// import \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\";\n// import \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\nimport \"../Interfaces/ITHEO.sol\";\n\ncontract BondingCalculatorMock {\n    // 0x1F98431c8aD98523631AE4a59f267346ea31F984 // Uniswapv3 factory\n    // 0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8 // Example-only Uniswap V3 pool address for USDC/ETH\n\n    address public immutable theo;\n    address public immutable quoteToken;\n    uint160 public mockPrice = 4120754590000; // 9 decimals\n\n    constructor(address _theo, address _quoteToken) {\n        theo = _theo;\n        quoteToken = _quoteToken;\n    }\n\n    /**\n     * @notice Sets the mock price to be returned.\n     * @param _mockPrice price to set the mock valuation (9 decimals)\n     */\n    function setValuation(uint160 _mockPrice) public {\n        mockPrice = _mockPrice;\n    }\n\n    function valuation(address tokenIn, uint256 _amount) public view returns (uint256 amountOut) {\n        return mockPrice;\n    }\n}\n"
    },
    "src/Theopetra/BondingCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\";\n\nimport \"../Interfaces/IERC20Metadata.sol\";\nimport \"../Interfaces/IBondCalculator.sol\";\nimport \"../Libraries/SafeCast.sol\";\n\ncontract TwapGetter is IBondCalculator {\n    using SafeCast for uint256;\n\n    address public immutable factory;\n    address public immutable theo;\n    address public immutable performanceToken;\n    uint32 public immutable secondsAgo;\n    uint24 public immutable fee;\n\n    /**\n     * @param _factory     address of the UniswapV3Factory\n     * @param _theo        address of THEO token\n     * @param _performanceToken    address of the token with which THEO will be paired\n     * @param _fee         the fee collected upon every swap in the pool, denominated in hundredths of a bip (i.e. 1e-6; e.g. 3000 for 0.3% fee tier);\n     * @param _secondsAgo  the time range, in seconds, used for the twap\n     */\n    constructor(\n        address _factory,\n        address _theo,\n        address _performanceToken,\n        uint24 _fee,\n        uint32 _secondsAgo\n    ) {\n        factory = _factory;\n        theo = _theo;\n        performanceToken = _performanceToken;\n        fee = _fee;\n\n        require(_secondsAgo != 0, \"No time period provided\");\n        secondsAgo = _secondsAgo;\n    }\n\n    function valuation(address tokenIn, uint256 _amount) external view override returns (uint256 amountOut) {\n        address tokenOut = tokenIn == theo ? performanceToken : theo;\n\n        address _pool = IUniswapV3Factory(factory).getPool(tokenIn, tokenOut, fee);\n        require(_pool != address(0), \"Pool does not exist\");\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(_pool).observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n\n        int24 tick = int24(tickCumulativesDelta / secondsAgo);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) tick--;\n\n        uint128 amount_ = _amount.toUint128();\n        amountOut = OracleLibrary.getQuoteAtTick(tick, amount_, tokenIn, tokenOut);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\n    {\n        require(secondsAgo != 0, 'BP');\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) =\n            IUniswapV3Pool(pool).observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        uint160 secondsPerLiquidityCumulativesDelta =\n            secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0];\n\n        arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick--;\n\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n        harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\n    }\n\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick Tick value used to calculate the quote\n    /// @param baseAmount Amount of token to be converted\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n    /// @param pool Address of Uniswap V3 pool that we want to observe\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\n    function getOldestObservationSecondsAgo(address pool) internal view returns (uint32 secondsAgo) {\n        (, , uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n        require(observationCardinality > 0, 'NI');\n\n        (uint32 observationTimestamp, , , bool initialized) =\n            IUniswapV3Pool(pool).observations((observationIndex + 1) % observationCardinality);\n\n        // The next index might not be initialized if the cardinality is in the process of increasing\n        // In this case the oldest observation is always in index 0\n        if (!initialized) {\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\n        }\n\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\n    }\n\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\n    /// @param pool Address of Uniswap V3 pool\n    /// @return The tick that the pool was in at the start of the current block\n    function getBlockStartingTickAndLiquidity(address pool) internal view returns (int24, uint128) {\n        (, int24 tick, uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n\n        // 2 observations are needed to reliably calculate the block starting tick\n        require(observationCardinality > 1, 'NEO');\n\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\n        (uint32 observationTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, ) =\n            IUniswapV3Pool(pool).observations(observationIndex);\n        if (observationTimestamp != uint32(block.timestamp)) {\n            return (tick, IUniswapV3Pool(pool).liquidity());\n        }\n\n        uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\n        (\n            uint32 prevObservationTimestamp,\n            int56 prevTickCumulative,\n            uint160 prevSecondsPerLiquidityCumulativeX128,\n            bool prevInitialized\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\n\n        require(prevInitialized, 'ONI');\n\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\n        tick = int24((tickCumulative - prevTickCumulative) / delta);\n        uint128 liquidity =\n            uint128(\n                (uint192(delta) * type(uint160).max) /\n                    (uint192(secondsPerLiquidityCumulativeX128 - prevSecondsPerLiquidityCumulativeX128) << 32)\n            );\n        return (tick, liquidity);\n    }\n\n    /// @notice Information for calculating a weighted arithmetic mean tick\n    struct WeightedTickData {\n        int24 tick;\n        uint128 weight;\n    }\n\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n    /// @param weightedTickData An array of ticks and weights\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\n    function getWeightedArithmeticMeanTick(WeightedTickData[] memory weightedTickData)\n        internal\n        pure\n        returns (int24 weightedArithmeticMeanTick)\n    {\n        // Accumulates the sum of products between each tick and its weight\n        int256 numerator;\n\n        // Accumulates the sum of the weights\n        uint256 denominator;\n\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\n        for (uint256 i; i < weightedTickData.length; i++) {\n            numerator += weightedTickData[i].tick * int256(weightedTickData[i].weight);\n            denominator += weightedTickData[i].weight;\n        }\n\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\n        // Always round to negative infinity\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedArithmeticMeanTick--;\n    }\n\n    /// @notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n    /// @dev Useful for calculating relative prices along routes.\n    /// @dev There must be one tick for each pairwise set of tokens.\n    /// @param tokens The token contract addresses\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks)\n        internal\n        pure\n        returns (int256 syntheticTick)\n    {\n        require(tokens.length - 1 == ticks.length, 'DL');\n        for (uint256 i = 1; i <= ticks.length; i++) {\n            // check the tokens for address sort order, then accumulate the\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \"cancel out\"\n            tokens[i - 1] < tokens[i] ? syntheticTick += ticks[i - 1] : syntheticTick -= ticks[i - 1];\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "src/Mocks/NewBondingCalculatorMock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\";\n\nimport \"../Interfaces/IERC20Metadata.sol\";\nimport \"../Interfaces/IBondCalculator.sol\";\n\nimport \"../Libraries/SafeMath.sol\";\nimport \"../Libraries/SafeCast.sol\";\n\nimport \"../Types/TheopetraAccessControlled.sol\";\n\ncontract NewBondingCalculatorMock is IBondCalculator, TheopetraAccessControlled {\n    using SafeCast for *;\n\n    address public immutable theo;\n    uint256 public performanceTokenAmount;\n    address public weth;\n    address public usdc;\n    uint256 public timePerformanceTokenLastUpdated;\n\n    constructor(\n        address _theo,\n        address _authority\n    ) TheopetraAccessControlled(ITheopetraAuthority(_authority)) {\n        theo = _theo;\n    }\n\n    /**\n     * @dev when tokenIn is theo, valuation is being used for the Treasury (`tokenPerformanceUpdate`)\n     *      when tokenIn is WETH or USDC (aka, a 'quote token'), valuation is being used for the Bond Depository (`marketPrice`)\n     *      If tokenIn is WETH (or USDC), the method returns the number of THEO expected per `_amount` of WETH (or USDC)\n     *      where the number of THEO per quote token is calculated based on the following mock dollar prices:\n     *      2000 dollars per WETH\n     *      1 dollar per USDC\n     *      0.01 dollars per THEO\n     *      THEO per WETH is 2000 / 0.01 (i.e., 200000)\n     *      THEO per USDC is 1 / 0.01 (i.e. 100)\n     *      THEO is 9 decimals, WETH is 18 decimals, USDC is 6 decimals\n     */\n    function valuation(address tokenIn, uint256 _amount) external view override returns (uint256) {\n        if (tokenIn == theo) {\n            return performanceTokenAmount;\n        } else if (tokenIn == weth) {\n            return (_amount * (200000 * 10**9)) / 10**18;\n        } else if (tokenIn == usdc) {\n            return (_amount * (100 * 10**9)) / 10**6;\n        }\n    }\n\n    function setPerformanceTokenAmount(uint256 _amount) public onlyGovernor {\n        performanceTokenAmount = _amount;\n    }\n\n    function setWethAddress(address _weth) public onlyGovernor {\n        weth = _weth;\n    }\n\n    function setUsdcAddress(address _usdc) public onlyGovernor {\n        usdc = _usdc;\n    }\n\n    /**\n     * @param _percentageChange   the percentage by which the performance token should be updated\n     * @dev                 use to update the Token ROI (deltaTokenPrice) by the specified percentage\n     */\n    function updatePerformanceTokenAmount(int256 _percentageChange) public onlyGovernor {\n        performanceTokenAmount = ((performanceTokenAmount).toInt256() + ((performanceTokenAmount).toInt256() * _percentageChange / 100)).toUint256();\n        timePerformanceTokenLastUpdated = block.timestamp;\n    }\n}\n"
    },
    "src/Mocks/StakingMock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"../Interfaces/IERC20.sol\";\nimport \"../Libraries/SafeERC20.sol\";\n\ncontract StakingMock {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable THEO;\n    address public immutable sTHEO;\n    uint256 public claimIndexCount;\n\n    constructor(address _theo, address _sTheo) {\n        THEO = IERC20(_theo);\n        sTHEO = _sTheo;\n    }\n\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _claim\n    ) external returns (uint256, uint256) {\n        THEO.safeTransferFrom(msg.sender, address(this), _amount);\n        claimIndexCount += 1;\n        return (_amount, claimIndexCount);\n    }\n\n    function pushClaim(address _to, uint256 _index) external {}\n\n    function pushClaimForBond(address _to, uint256 _index) external returns (uint256 newIndex_) {\n        return 0;\n    }\n\n    function basis() external returns (address) {\n        return sTHEO;\n    }\n}\n"
    },
    "src/Theopetra/pTheopetraERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"../Interfaces/IStakedTHEOToken.sol\";\n\nimport \"../Types/ERC20Permit.sol\";\nimport \"../Types/TheopetraAccessControlled.sol\";\n\ncontract pTheopetra is IStakedTHEOToken, ERC20Permit, TheopetraAccessControlled {\n    using SafeMath for uint256;\n\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"UNAUTHORIZED\");\n        _;\n    }\n\n    address public stakingContract;\n    address public initializer;\n\n    event LogSupply(uint256 indexed epoch, uint256 timestamp, uint256 totalSupply);\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\n    event LogStakingContractUpdated(address stakingContract);\n\n    struct Rebase {\n        uint256 epoch;\n        uint256 rebase; // 18 decimals\n        uint256 totalStakedBefore;\n        uint256 totalStakedAfter;\n        uint256 amountRebased;\n        uint256 index;\n        uint256 blockNumberOccured;\n    }\n    Rebase[] public rebases;\n\n    uint256 public INDEX;\n\n    uint256 private constant MAX_UINT256 = ~uint256(0);\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\n\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n    // Use the highest value that fits in a uint256 for max granularity.\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n\n    uint256 private _gonsPerFragment;\n    mapping(address => uint256) private _gonBalances;\n\n    mapping(address => mapping(address => uint256)) private _allowedValue;\n\n    address public treasury;\n\n    constructor(address _authority)\n        ERC20(\"Platinum Staked Theo\", \"pTHEO\", 9)\n        ERC20Permit()\n        TheopetraAccessControlled(ITheopetraAuthority(_authority))\n    {\n        initializer = msg.sender;\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n    }\n\n    function initialize(address stakingContract_) external returns (bool) {\n        require(msg.sender == initializer);\n        require(stakingContract_ != address(0));\n        stakingContract = stakingContract_;\n        _gonBalances[stakingContract] = TOTAL_GONS;\n\n        emit Transfer(address(0x0), stakingContract, _totalSupply);\n        emit LogStakingContractUpdated(stakingContract_);\n\n        initializer = address(0);\n        return true;\n    }\n\n    function setIndex(uint256 _INDEX) external onlyManager returns (bool) {\n        require(INDEX == 0);\n        INDEX = gonsForBalance(_INDEX);\n        return true;\n    }\n\n    /**\n        @notice increases sTHEO supply to increase staking balances relative to profit_\n        @param profit_ uint256\n        @return uint256\n     */\n    function rebase(uint256 profit_, uint256 epoch_) public override onlyStakingContract returns (uint256) {\n        uint256 rebaseAmount;\n        uint256 circulatingSupply_ = circulatingSupply();\n\n        if (profit_ == 0) {\n            emit LogSupply(epoch_, block.timestamp, _totalSupply);\n            emit LogRebase(epoch_, 0, index());\n            return _totalSupply;\n        } else if (circulatingSupply_ > 0) {\n            rebaseAmount = profit_.mul(_totalSupply).div(circulatingSupply_);\n        } else {\n            rebaseAmount = profit_;\n        }\n\n        _totalSupply = _totalSupply.add(rebaseAmount);\n\n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n\n        _storeRebase(circulatingSupply_, profit_, epoch_);\n\n        return _totalSupply;\n    }\n\n    /**\n        @notice emits event with data about rebase\n        @param previousCirculating_ uint\n        @param profit_ uint\n        @param epoch_ uint\n        @return bool\n     */\n    function _storeRebase(\n        uint256 previousCirculating_,\n        uint256 profit_,\n        uint256 epoch_\n    ) internal returns (bool) {\n        uint256 rebasePercent = profit_.mul(1e18).div(previousCirculating_);\n\n        rebases.push(\n            Rebase({\n                epoch: epoch_,\n                rebase: rebasePercent, // 18 decimals\n                totalStakedBefore: previousCirculating_,\n                totalStakedAfter: circulatingSupply(),\n                amountRebased: profit_,\n                index: index(),\n                blockNumberOccured: block.number\n            })\n        );\n\n        emit LogSupply(epoch_, block.timestamp, _totalSupply);\n        emit LogRebase(epoch_, rebasePercent, index());\n\n        return true;\n    }\n\n    function balanceOf(address who) public view override(IStakedTHEOToken, ERC20) returns (uint256) {\n        return _gonBalances[who].div(_gonsPerFragment);\n    }\n\n    function gonsForBalance(uint256 amount) public view override returns (uint256) {\n        return amount.mul(_gonsPerFragment);\n    }\n\n    function balanceForGons(uint256 gons) public view override returns (uint256) {\n        return gons.div(_gonsPerFragment);\n    }\n\n    // Staking contract holds excess sTHEO\n    function circulatingSupply() public view override returns (uint256) {\n        return _totalSupply.sub(balanceOf(stakingContract));\n    }\n\n    function index() public view override returns (uint256) {\n        return balanceForGons(INDEX);\n    }\n\n    function transfer(address to, uint256 value) public override(ERC20, IERC20) returns (bool) {\n        uint256 gonValue = gonsForBalance(value);\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner_, address spender) public view override(ERC20, IERC20) returns (uint256) {\n        return _allowedValue[owner_][spender];\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public override(ERC20, IERC20) returns (bool) {\n        _allowedValue[from][msg.sender] = _allowedValue[from][msg.sender].sub(value);\n        emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\n\n        uint256 gonValue = gonsForBalance(value);\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n        emit Transfer(from, to, value);\n\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public override(ERC20, IERC20) returns (bool) {\n        _allowedValue[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // What gets called in a permit\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal virtual override {\n        _allowedValue[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\n        _allowedValue[msg.sender][spender] = _allowedValue[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\n        uint256 oldValue = _allowedValue[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _allowedValue[msg.sender][spender] = 0;\n        } else {\n            _allowedValue[msg.sender][spender] = oldValue.sub(subtractedValue);\n        }\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}