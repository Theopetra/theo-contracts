{
  "address": "0xCD1a66F06eC36Db3F040C6065e5AAC0866FcD77A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "LogRebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        }
      ],
      "name": "LogStakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "LogSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gons",
          "type": "uint256"
        }
      ],
      "name": "balanceForGons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "changeDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "gonsForBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingContract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch_",
          "type": "uint256"
        }
      ],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rebases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rebase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRebased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumberOccured",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_INDEX",
          "type": "uint256"
        }
      ],
      "name": "setIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xce5c1f7b5941fc9f3dc0f7f34aa09c1ec4a5c9c6d7cf8e30833e80df5b383e28",
  "receipt": {
    "to": null,
    "from": "0x0a4B56B375aEAfB5A02ACaeEc5Ca0F6a6efb0025",
    "contractAddress": "0xCD1a66F06eC36Db3F040C6065e5AAC0866FcD77A",
    "transactionIndex": 34,
    "gasUsed": "1769795",
    "logsBloom": "0x
    "blockHash": "0xa4b1df3b7d25060fffb809050a1928056af00be0720c4d566fcd5219dcc3a2ff",
    "transactionHash": "0xce5c1f7b5941fc9f3dc0f7f34aa09c1ec4a5c9c6d7cf8e30833e80df5b383e28",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 10606041,
        "transactionHash": "0xce5c1f7b5941fc9f3dc0f7f34aa09c1ec4a5c9c6d7cf8e30833e80df5b383e28",
        "address": "0xCD1a66F06eC36Db3F040C6065e5AAC0866FcD77A",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000bcdf034ce6624a817c1bfeffbde8691443e5fdbb"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0xa4b1df3b7d25060fffb809050a1928056af00be0720c4d566fcd5219dcc3a2ff"
      }
    ],
    "blockNumber": 10606041,
    "cumulativeGasUsed": "13248441",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBcdF034cE6624A817c1BfEffBDE8691443e5fDbB"
  ],
  "numDeployments": 1,
  "solcInputHash": "446a1be813bfb9f78647a023efb0da17",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"LogStakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"}],\"name\":\"balanceForGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"changeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gonsForBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rebases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRebased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberOccured\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_INDEX\",\"type\":\"uint256\"}],\"name\":\"setIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeDebt(uint256,address,bool)\":{\"details\":\"addresses with debt balances cannot transfer collateralized sTHEO until the debt has been repaid.\",\"params\":{\"add\":\"bool\",\"amount\":\"uint256\",\"debtor\":\"address\"}},\"nonces(address)\":{\"details\":\"See {IERC2612Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC2612Permit-permit}.\"},\"rebase(uint256,uint256)\":{\"params\":{\"profit_\":\"uint256\"},\"returns\":{\"_0\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeDebt(uint256,address,bool)\":{\"notice\":\"this function is called by the treasury, and informs sTHEO of changes to debt.\"},\"rebase(uint256,uint256)\":{\"notice\":\"increases sTHEO supply to increase staking balances relative to profit_\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/sTheopetraERC20.sol\":\"sTheopetra\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC2612Permit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\ninterface IERC2612Permit {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaae0319e92b1a8c90e19ebd0912a261e7a0b3affe3ff8fc3bd0f2a56f2bd7ec3\",\"license\":\"AGPL-3.0-or-later\"},\"src/Interfaces/IStakedTHEOToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IStakedTHEOToken is IERC20 {\\n    function rebase(uint256 theoProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view override returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3143d844fbf32d8dc30ab9e1ea6bcc30825a74cd5586f185be87ce88a9887ebb\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITheopetraAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event ManagerPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event SignerPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function whitelistSigner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb2878b057ac95bafe9f359c26c4e7b470dcd6d00df5797f992a576d79182b287\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITokenDebt.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ITokenDebt is IERC20 {\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78de8009037eb33cd0add354d1caf4a746e98ce3d9cd1f77dd2ee0f127856c0e\",\"license\":\"AGPL-3.0\"},\"src/Libraries/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x135e84f2d487ba3beb65609d2f75f61650a54c985196cf15f5cb6152518dc4f7\",\"license\":\"AGPL-3.0-or-later\"},\"src/Libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function percentageAmount(uint256 total_, uint8 percentage_) internal pure returns (uint256 percentAmount_) {\\n        return div(mul(total_, percentage_), 1000);\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function substractPercentage(uint256 total_, uint8 percentageToSub_) internal pure returns (uint256 result_) {\\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\\n    }\\n\\n    function percentageOfTotal(uint256 part_, uint256 total_) internal pure returns (uint256 percent_) {\\n        return div(mul(part_, 100), total_);\\n    }\\n\\n    /**\\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function quadraticPricing(uint256 payment_, uint256 multiplier_) internal pure returns (uint256) {\\n        return sqrrt(mul(multiplier_, payment_));\\n    }\\n\\n    function bondingCurve(uint256 supply_, uint256 multiplier_) internal pure returns (uint256) {\\n        return mul(multiplier_, supply_);\\n    }\\n}\\n\",\"keccak256\":\"0xc6ed927b09d3135cf05c030db1f6ff0816a8aa7d303c52c34e43a5ba03a19e78\",\"license\":\"AGPL-3.0-or-later\"},\"src/Theopetra/sTheopetraERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"../Interfaces/IStakedTHEOToken.sol\\\";\\nimport \\\"../Interfaces/ITokenDebt.sol\\\";\\n\\nimport \\\"../Types/ERC20Permit.sol\\\";\\nimport \\\"../Types/TheopetraAccessControlled.sol\\\";\\n\\ncontract sTheopetra is IStakedTHEOToken, ITokenDebt, ERC20Permit, TheopetraAccessControlled {\\n    using SafeMath for uint256;\\n\\n    modifier onlyStakingContract() {\\n        require(msg.sender == stakingContract, \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    address public stakingContract;\\n    address public initializer;\\n\\n    event LogSupply(uint256 indexed epoch, uint256 timestamp, uint256 totalSupply);\\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\\n    event LogStakingContractUpdated(address stakingContract);\\n\\n    struct Rebase {\\n        uint256 epoch;\\n        uint256 rebase; // 18 decimals\\n        uint256 totalStakedBefore;\\n        uint256 totalStakedAfter;\\n        uint256 amountRebased;\\n        uint256 index;\\n        uint256 blockNumberOccured;\\n    }\\n    Rebase[] public rebases;\\n\\n    uint256 public INDEX;\\n\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\\n\\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\\n    // Use the highest value that fits in a uint256 for max granularity.\\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n\\n    uint256 private _gonsPerFragment;\\n    mapping(address => uint256) private _gonBalances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowedValue;\\n\\n    address public treasury;\\n    mapping(address => uint256) public override debtBalances;\\n\\n    constructor(address _authority)\\n        ERC20(\\\"Staked THEO\\\", \\\"sTHEO\\\", 9)\\n        ERC20Permit()\\n        TheopetraAccessControlled(ITheopetraAuthority(_authority))\\n    {\\n        initializer = msg.sender;\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n    }\\n\\n    function initialize(address stakingContract_, address _treasury) external returns (bool) {\\n        require(msg.sender == initializer, \\\"Initializer:  caller is not initializer\\\");\\n        require(stakingContract_ != address(0), \\\"Zero address: Staking\\\");\\n        stakingContract = stakingContract_;\\n        _gonBalances[stakingContract] = TOTAL_GONS;\\n\\n        require(_treasury != address(0), \\\"Zero address: Treasury\\\");\\n        treasury = _treasury;\\n\\n        emit Transfer(address(0x0), stakingContract, _totalSupply);\\n        emit LogStakingContractUpdated(stakingContract_);\\n\\n        initializer = address(0);\\n        return true;\\n    }\\n\\n    function setIndex(uint256 _INDEX) external onlyManager returns (bool) {\\n        require(INDEX == 0);\\n        INDEX = gonsForBalance(_INDEX);\\n        return true;\\n    }\\n\\n    /**\\n        @notice increases sTHEO supply to increase staking balances relative to profit_\\n        @param profit_ uint256\\n        @return uint256\\n     */\\n    function rebase(uint256 profit_, uint256 epoch_) public override onlyStakingContract returns (uint256) {\\n        uint256 rebaseAmount;\\n        uint256 circulatingSupply_ = circulatingSupply();\\n\\n        if (profit_ == 0) {\\n            emit LogSupply(epoch_, block.timestamp, _totalSupply);\\n            emit LogRebase(epoch_, 0, index());\\n            return _totalSupply;\\n        } else if (circulatingSupply_ > 0) {\\n            rebaseAmount = profit_.mul(_totalSupply).div(circulatingSupply_);\\n        } else {\\n            rebaseAmount = profit_;\\n        }\\n\\n        _totalSupply = _totalSupply.add(rebaseAmount);\\n\\n        if (_totalSupply > MAX_SUPPLY) {\\n            _totalSupply = MAX_SUPPLY;\\n        }\\n\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n        _storeRebase(circulatingSupply_, profit_, epoch_);\\n\\n        return _totalSupply;\\n    }\\n\\n    /**\\n        @notice emits event with data about rebase\\n        @param previousCirculating_ uint\\n        @param profit_ uint\\n        @param epoch_ uint\\n        @return bool\\n     */\\n    function _storeRebase(\\n        uint256 previousCirculating_,\\n        uint256 profit_,\\n        uint256 epoch_\\n    ) internal returns (bool) {\\n        uint256 rebasePercent = profit_.mul(1e18).div(previousCirculating_);\\n\\n        rebases.push(\\n            Rebase({\\n                epoch: epoch_,\\n                rebase: rebasePercent, // 18 decimals\\n                totalStakedBefore: previousCirculating_,\\n                totalStakedAfter: circulatingSupply(),\\n                amountRebased: profit_,\\n                index: index(),\\n                blockNumberOccured: block.number\\n            })\\n        );\\n\\n        emit LogSupply(epoch_, block.timestamp, _totalSupply);\\n        emit LogRebase(epoch_, rebasePercent, index());\\n\\n        return true;\\n    }\\n\\n    function balanceOf(address who) public view override(IStakedTHEOToken, IERC20, ERC20) returns (uint256) {\\n        return _gonBalances[who].div(_gonsPerFragment);\\n    }\\n\\n    function gonsForBalance(uint256 amount) public view override returns (uint256) {\\n        return amount.mul(_gonsPerFragment);\\n    }\\n\\n    function balanceForGons(uint256 gons) public view override returns (uint256) {\\n        return gons.div(_gonsPerFragment);\\n    }\\n\\n    // Staking contract holds excess sTHEO\\n    function circulatingSupply() public view override returns (uint256) {\\n        return _totalSupply.sub(balanceOf(stakingContract));\\n    }\\n\\n    function index() public view override returns (uint256) {\\n        return balanceForGons(INDEX);\\n    }\\n\\n    function transfer(address to, uint256 value) public override(ERC20, IERC20) returns (bool) {\\n        uint256 gonValue = gonsForBalance(value);\\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function allowance(address owner_, address spender) public view override(ERC20, IERC20) returns (uint256) {\\n        return _allowedValue[owner_][spender];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override(ERC20, IERC20) returns (bool) {\\n        _allowedValue[from][msg.sender] = _allowedValue[from][msg.sender].sub(value);\\n        emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\\n\\n        uint256 gonValue = gonsForBalance(value);\\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value) public override(ERC20, IERC20) returns (bool) {\\n        _allowedValue[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    // What gets called in a permit\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal virtual override {\\n        _allowedValue[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\\n        _allowedValue[msg.sender][spender] = _allowedValue[msg.sender][spender].add(addedValue);\\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\\n        uint256 oldValue = _allowedValue[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedValue[msg.sender][spender] = 0;\\n        } else {\\n            _allowedValue[msg.sender][spender] = oldValue.sub(subtractedValue);\\n        }\\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice this function is called by the treasury, and informs sTHEO of changes to debt.\\n     * @dev    addresses with debt balances cannot transfer collateralized sTHEO until the debt has been repaid.\\n     * @param amount uint256\\n     * @param debtor address\\n     * @param add    bool\\n     */\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external override {\\n        require(msg.sender == treasury, \\\"Only treasury\\\");\\n\\n        if (add) {\\n            debtBalances[debtor] = debtBalances[debtor].add(amount);\\n        } else {\\n            debtBalances[debtor] = debtBalances[debtor].sub(amount);\\n        }\\n        require(debtBalances[debtor] <= balanceOf(debtor), \\\"sTHEO: insufficient balance\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcfad1eaddd8b612d058add8c8edeb04a524b2d7ee38222e41155fa851accc12b\",\"license\":\"AGPL-3.0\"},\"src/Types/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Libraries/SafeMath.sol\\\";\\n\\nimport \\\"../Interfaces/IERC20.sol\\\";\\n\\nabstract contract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    // TODO comment actual hash value.\\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256(\\\"ERC20Token\\\");\\n\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string internal _name;\\n\\n    string internal _symbol;\\n\\n    uint8 internal immutable _decimals;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x9478e094aeeaec02df1305bb2aafd5cb263a3db62405e4f5a511026776b51ec2\",\"license\":\"AGPL-3.0-or-later\"},\"src/Types/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../Interfaces/IERC2612Permit.sol\\\";\\nimport \\\"../Libraries/Counters.sol\\\";\\n\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    constructor() {\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(\\\"1\\\")), // Version\\n                chainID,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IERC2612Permit-permit}.\\n     *\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"Permit: expired deadline\\\");\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline)\\n        );\\n\\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\\n\\n        address signer = ecrecover(_hash, v, r, s);\\n        require(signer != address(0) && signer == owner, \\\"ZeroSwapPermit: Invalid signature\\\");\\n\\n        _nonces[owner].increment();\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC2612Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n}\\n\",\"keccak256\":\"0xf2594722b9f908052ba1db5ae5ad80a88e26b93ece1b66a84527e6591817e05e\",\"license\":\"AGPL-3.0-or-later\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\n\\nabstract contract TheopetraAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ITheopetraAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(ITheopetraAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a24eaf51fcd807927a59ae694a7c752a060d278610b88c9b61d89f872a4b5\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0604052600c60a08190526b15539055551213d49256915160a21b60c09081526200002f9160079190620003ca565b503480156200003d57600080fd5b506040516200201438038062002014833981810160405260208110156200006357600080fd5b5051604080518082018252600b81526a5374616b6564205448454f60a81b602082810191825283518085019094526005845264735448454f60d81b908401528151849391600991620000b891600391620003ca565b508151620000ce906004906020850190620003ca565b5060f81b7fff0000000000000000000000000000000000000000000000000000000000000016608052504690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200012662000238565b805160209182012060408051808201825260018152603160f81b90840152805180840194909452838101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606084015260808301939093523060a0808401919091528351808403909101815260c0909201928390528151910120600655600880546001600160a01b0319166001600160a01b038416908117909155907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250600a80546001600160a01b031916331790556611c37937e0800060028190556200022e90806000190660001903620002d260201b620016f11790919060201c565b600d555062000476565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015620002c85780601f106200029c57610100808354040283529160200191620002c8565b820191906000526020600020905b815481529060010190602001808311620002aa57829003601f168201915b5050505050905090565b60006200031c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200032360201b60201c565b9392505050565b60008183620003b35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620003775781810151838201526020016200035d565b50505050905090810190601f168015620003a55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581620003c057fe5b0495945050505050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200040257600085556200044d565b82601f106200041d57805160ff19168380011785556200044d565b828001600101855582156200044d579182015b828111156200044d57825182559160200191906001019062000430565b506200045b9291506200045f565b5090565b5b808211156200045b576000815560010162000460565b60805160f81c611b806200049460003980610a965250611b806000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063a457c2d7116100a2578063c4ef1c4c11610071578063c4ef1c4c146105a2578063d505accf146105c8578063dd62ed3e14610619578063ee99205c14610647576101e5565b8063a457c2d71461050e578063a9059cbb1461053a578063ae5c6cd314610566578063bf7e214f1461059a576101e5565b80637ecebe00116100de5780637ecebe00146104d05780639358928b146104f657806395d89b41146104fe5780639ce110d714610506576101e5565b806370a082311461041057806373c69eb7146104365780637965d56d1461048b5780637a9e5e4b146104a8576101e5565b80632df75cb1116101875780633950935111610156578063395093511461037557806340a5737f146103a1578063485cc955146103be57806361d027b3146103ec576101e5565b80632df75cb11461033f57806330adf81f14610347578063313ce5671461034f5780633644e5151461036d576101e5565b806318160ddd116101c357806318160ddd146102dc5780631bd39674146102e457806323b872dd146103015780632986c0e514610337576101e5565b8063058ecdb4146101ea57806306fdde031461021f578063095ea7b31461029c575b600080fd5b61020d6004803603604081101561020057600080fd5b508035906020013561064f565b60408051918252519081900360200190f35b6102276107f3565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610261578181015183820152602001610249565b50505050905090810190601f16801561028e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c8600480360360408110156102b257600080fd5b506001600160a01b038135169060200135610889565b604080519115158252519081900360200190f35b61020d6108ef565b61020d600480360360208110156102fa57600080fd5b50356108f5565b6102c86004803603606081101561031757600080fd5b506001600160a01b0381358116916020810135909116906040013561090c565b61020d610a58565b61020d610a6a565b61020d610a70565b610357610a94565b6040805160ff9092168252519081900360200190f35b61020d610ab8565b6102c86004803603604081101561038b57600080fd5b506001600160a01b038135169060200135610abe565b6102c8600480360360208110156103b757600080fd5b5035610b51565b6102c8600480360360408110156103d457600080fd5b506001600160a01b0381358116916020013516610ca8565b6103f4610ebb565b604080516001600160a01b039092168252519081900360200190f35b61020d6004803603602081101561042657600080fd5b50356001600160a01b0316610eca565b6104536004803603602081101561044c57600080fd5b5035610ef2565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b61020d600480360360208110156104a157600080fd5b5035610f44565b6104ce600480360360208110156104be57600080fd5b50356001600160a01b0316610f5b565b005b61020d600480360360208110156104e657600080fd5b50356001600160a01b031661109e565b61020d6110bf565b6102276110e4565b6103f4611145565b6102c86004803603604081101561052457600080fd5b506001600160a01b038135169060200135611154565b6102c86004803603604081101561055057600080fd5b506001600160a01b03813516906020013561123d565b6104ce6004803603606081101561057c57600080fd5b508035906001600160a01b03602082013516906040013515156112f1565b6103f461144e565b61020d600480360360208110156105b857600080fd5b50356001600160a01b031661145d565b6104ce600480360360e08110156105de57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561146f565b61020d6004803603604081101561062f57600080fd5b506001600160a01b03813581169160200135166116b7565b6103f46116e2565b6009546000906001600160a01b031633146106b1576040805162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000806106bc6110bf565b90508461075257600254604080514281526020810192909252805186927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da492908290030190a2837f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb2600061072e610a58565b6040805192835260208301919091528051918290030190a2600254925050506107ed565b801561077e57610777816107716002548861173a90919063ffffffff16565b906116f1565b9150610782565b8491505b60025461078f9083611793565b60028190556fffffffffffffffffffffffffffffffff10156107c0576fffffffffffffffffffffffffffffffff6002555b6002546107d690660e3d2cfe61ffff19906116f1565b600d556107e48186866117ed565b50600254925050505b92915050565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561087f5780601f106108545761010080835404028352916020019161087f565b820191906000526020600020905b81548152906001019060200180831161086257829003601f168201915b5050505050905090565b336000818152600f602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b60006107ed600d548361173a90919063ffffffff16565b6001600160a01b0383166000908152600f6020908152604080832033845290915281205461093a9083611934565b6001600160a01b0385166000818152600f60209081526040808320338085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a360006109a1836108f5565b6001600160a01b0386166000908152600e60205260409020549091506109c79082611934565b6001600160a01b038087166000908152600e602052604080822093909355908616815220546109f69082611793565b6001600160a01b038086166000818152600e602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b6000610a65600c54610f44565b905090565b600c5481565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000090565b60065481565b336000908152600f602090815260408083206001600160a01b0386168452909152812054610aec9083611793565b336000818152600f602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600854604080517f481c6a7500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163481c6a75916004808301926020929190829003018186803b158015610baf57600080fd5b505afa158015610bc3573d6000803e3d6000fd5b505050506040513d6020811015610bd957600080fd5b50516007906001600160a01b03163314610c865760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610c775780601f10610c4c57610100808354040283529160200191610c77565b820191906000526020600020905b815481529060010190602001808311610c5a57829003601f168201915b50509250505060405180910390fd5b50600c5415610c9457600080fd5b610c9d826108f5565b600c55506001919050565b600a546000906001600160a01b03163314610cf45760405162461bcd60e51b8152600401808060200182810382526027815260200180611b246027913960400191505060405180910390fd5b6001600160a01b038316610d4f576040805162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a205374616b696e670000000000000000000000604482015290519081900360640190fd5b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691909117918290559081166000908152600e60205260409020660e3d2cfe61ffff1990558216610dec576040805162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a20547265617375727900000000000000000000604482015290519081900360640190fd5b6010805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384811691909117909155600954600254604080519182525191909216916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef916020908290030190a3604080516001600160a01b038516815290517f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a19181900360200190a15050600a805473ffffffffffffffffffffffffffffffffffffffff1916905550600190565b6010546001600160a01b031681565b600d546001600160a01b0382166000908152600e602052604081205490916107ed91906116f1565b600b8181548110610f0257600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b60006107ed600d54836116f190919063ffffffff16565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa957600080fd5b505afa158015610fbd573d6000803e3d6000fd5b505050506040513d6020811015610fd357600080fd5b50516007906001600160a01b031633146110465760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610c775780601f10610c4c57610100808354040283529160200191610c77565b506008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6001600160a01b03811660009081526005602052604081206107ed90611976565b600954600090610a65906110db906001600160a01b0316610eca565b60025490611934565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561087f5780601f106108545761010080835404028352916020019161087f565b600a546001600160a01b031681565b336000908152600f602090815260408083206001600160a01b03861684529091528120548083106111a857336000908152600f602090815260408083206001600160a01b03881684529091528120556111d7565b6111b28184611934565b336000908152600f602090815260408083206001600160a01b03891684529091529020555b336000818152600f602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600080611249836108f5565b336000908152600e60205260409020549091506112669082611934565b336000908152600e6020526040808220929092556001600160a01b038616815220546112929082611793565b6001600160a01b0385166000818152600e60209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b6010546001600160a01b03163314611350576040805162461bcd60e51b815260206004820152600d60248201527f4f6e6c7920747265617375727900000000000000000000000000000000000000604482015290519081900360640190fd5b8015611397576001600160a01b0382166000908152601160205260409020546113799084611793565b6001600160a01b0383166000908152601160205260409020556113d4565b6001600160a01b0382166000908152601160205260409020546113ba9084611934565b6001600160a01b0383166000908152601160205260409020555b6113dd82610eca565b6001600160a01b0383166000908152601160205260409020541115611449576040805162461bcd60e51b815260206004820152601b60248201527f735448454f3a20696e73756666696369656e742062616c616e63650000000000604482015290519081900360640190fd5b505050565b6008546001600160a01b031681565b60116020526000908152604090205481565b834211156114c4576040805162461bcd60e51b815260206004820152601860248201527f5065726d69743a206578706972656420646561646c696e650000000000000000604482015290519081900360640190fd5b6001600160a01b03871660009081526005602052604081207f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c99089908990899061150d90611976565b604080516020808201979097526001600160a01b0395861681830152939094166060840152608083019190915260a082015260c08082018990528251808303909101815260e0820183528051908401206006547f1901000000000000000000000000000000000000000000000000000000000000610100840152610102830152610122808301829052835180840390910181526101428301808552815191860191909120600091829052610162840180865281905260ff8a166101828501526101a284018990526101c28401889052935191955092936001926101e280820193601f1981019281900390910190855afa15801561160e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906116445750896001600160a01b0316816001600160a01b0316145b61167f5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ae26021913960400191505060405180910390fd5b6001600160a01b038a1660009081526005602052604090206116a09061197a565b6116ab8a8a8a611983565b50505050505050505050565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6009546001600160a01b031681565b600061173383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119e5565b9392505050565b600082611749575060006107ed565b8282028284828161175657fe5b04146117335760405162461bcd60e51b8152600401808060200182810382526021815260200180611b036021913960400191505060405180910390fd5b600082820183811015611733576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000806118068561077186670de0b6b3a764000061173a565b9050600b6040518060e0016040528085815260200183815260200187815260200161182f6110bf565b8152602001868152602001611842610a58565b81524360209182015282546001818101855560009485529382902083516007909202019081558282015193810193909355604080830151600280860191909155606084015160038601556080840151600486015560a0840151600586015560c0909301516006909401939093559054825142815291820152815185927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4928290030190a2827f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb282611911610a58565b6040805192835260208301919091528051918290030190a2506001949350505050565b600061173383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a87565b5490565b80546001019055565b6001600160a01b038084166000818152600f6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008183611a715760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a36578181015183820152602001611a1e565b50505050905090810190601f168015611a635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611a7d57fe5b0495945050505050565b60008184841115611ad95760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611a36578181015183820152602001611a1e565b50505090039056fe5a65726f537761705065726d69743a20496e76616c6964207369676e6174757265536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e697469616c697a65723a202063616c6c6572206973206e6f7420696e697469616c697a6572a26469706673582212206277ec38bf36d0d22843ac46fb30874e6a460aaa9d7607d489e7a1c3029bf60a64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063a457c2d7116100a2578063c4ef1c4c11610071578063c4ef1c4c146105a2578063d505accf146105c8578063dd62ed3e14610619578063ee99205c14610647576101e5565b8063a457c2d71461050e578063a9059cbb1461053a578063ae5c6cd314610566578063bf7e214f1461059a576101e5565b80637ecebe00116100de5780637ecebe00146104d05780639358928b146104f657806395d89b41146104fe5780639ce110d714610506576101e5565b806370a082311461041057806373c69eb7146104365780637965d56d1461048b5780637a9e5e4b146104a8576101e5565b80632df75cb1116101875780633950935111610156578063395093511461037557806340a5737f146103a1578063485cc955146103be57806361d027b3146103ec576101e5565b80632df75cb11461033f57806330adf81f14610347578063313ce5671461034f5780633644e5151461036d576101e5565b806318160ddd116101c357806318160ddd146102dc5780631bd39674146102e457806323b872dd146103015780632986c0e514610337576101e5565b8063058ecdb4146101ea57806306fdde031461021f578063095ea7b31461029c575b600080fd5b61020d6004803603604081101561020057600080fd5b508035906020013561064f565b60408051918252519081900360200190f35b6102276107f3565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610261578181015183820152602001610249565b50505050905090810190601f16801561028e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c8600480360360408110156102b257600080fd5b506001600160a01b038135169060200135610889565b604080519115158252519081900360200190f35b61020d6108ef565b61020d600480360360208110156102fa57600080fd5b50356108f5565b6102c86004803603606081101561031757600080fd5b506001600160a01b0381358116916020810135909116906040013561090c565b61020d610a58565b61020d610a6a565b61020d610a70565b610357610a94565b6040805160ff9092168252519081900360200190f35b61020d610ab8565b6102c86004803603604081101561038b57600080fd5b506001600160a01b038135169060200135610abe565b6102c8600480360360208110156103b757600080fd5b5035610b51565b6102c8600480360360408110156103d457600080fd5b506001600160a01b0381358116916020013516610ca8565b6103f4610ebb565b604080516001600160a01b039092168252519081900360200190f35b61020d6004803603602081101561042657600080fd5b50356001600160a01b0316610eca565b6104536004803603602081101561044c57600080fd5b5035610ef2565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b61020d600480360360208110156104a157600080fd5b5035610f44565b6104ce600480360360208110156104be57600080fd5b50356001600160a01b0316610f5b565b005b61020d600480360360208110156104e657600080fd5b50356001600160a01b031661109e565b61020d6110bf565b6102276110e4565b6103f4611145565b6102c86004803603604081101561052457600080fd5b506001600160a01b038135169060200135611154565b6102c86004803603604081101561055057600080fd5b506001600160a01b03813516906020013561123d565b6104ce6004803603606081101561057c57600080fd5b508035906001600160a01b03602082013516906040013515156112f1565b6103f461144e565b61020d600480360360208110156105b857600080fd5b50356001600160a01b031661145d565b6104ce600480360360e08110156105de57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561146f565b61020d6004803603604081101561062f57600080fd5b506001600160a01b03813581169160200135166116b7565b6103f46116e2565b6009546000906001600160a01b031633146106b1576040805162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000806106bc6110bf565b90508461075257600254604080514281526020810192909252805186927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da492908290030190a2837f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb2600061072e610a58565b6040805192835260208301919091528051918290030190a2600254925050506107ed565b801561077e57610777816107716002548861173a90919063ffffffff16565b906116f1565b9150610782565b8491505b60025461078f9083611793565b60028190556fffffffffffffffffffffffffffffffff10156107c0576fffffffffffffffffffffffffffffffff6002555b6002546107d690660e3d2cfe61ffff19906116f1565b600d556107e48186866117ed565b50600254925050505b92915050565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561087f5780601f106108545761010080835404028352916020019161087f565b820191906000526020600020905b81548152906001019060200180831161086257829003601f168201915b5050505050905090565b336000818152600f602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b60006107ed600d548361173a90919063ffffffff16565b6001600160a01b0383166000908152600f6020908152604080832033845290915281205461093a9083611934565b6001600160a01b0385166000818152600f60209081526040808320338085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a360006109a1836108f5565b6001600160a01b0386166000908152600e60205260409020549091506109c79082611934565b6001600160a01b038087166000908152600e602052604080822093909355908616815220546109f69082611793565b6001600160a01b038086166000818152600e602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b6000610a65600c54610f44565b905090565b600c5481565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000090565b60065481565b336000908152600f602090815260408083206001600160a01b0386168452909152812054610aec9083611793565b336000818152600f602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600854604080517f481c6a7500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163481c6a75916004808301926020929190829003018186803b158015610baf57600080fd5b505afa158015610bc3573d6000803e3d6000fd5b505050506040513d6020811015610bd957600080fd5b50516007906001600160a01b03163314610c865760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610c775780601f10610c4c57610100808354040283529160200191610c77565b820191906000526020600020905b815481529060010190602001808311610c5a57829003601f168201915b50509250505060405180910390fd5b50600c5415610c9457600080fd5b610c9d826108f5565b600c55506001919050565b600a546000906001600160a01b03163314610cf45760405162461bcd60e51b8152600401808060200182810382526027815260200180611b246027913960400191505060405180910390fd5b6001600160a01b038316610d4f576040805162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a205374616b696e670000000000000000000000604482015290519081900360640190fd5b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691909117918290559081166000908152600e60205260409020660e3d2cfe61ffff1990558216610dec576040805162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a20547265617375727900000000000000000000604482015290519081900360640190fd5b6010805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384811691909117909155600954600254604080519182525191909216916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef916020908290030190a3604080516001600160a01b038516815290517f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a19181900360200190a15050600a805473ffffffffffffffffffffffffffffffffffffffff1916905550600190565b6010546001600160a01b031681565b600d546001600160a01b0382166000908152600e602052604081205490916107ed91906116f1565b600b8181548110610f0257600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b60006107ed600d54836116f190919063ffffffff16565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa957600080fd5b505afa158015610fbd573d6000803e3d6000fd5b505050506040513d6020811015610fd357600080fd5b50516007906001600160a01b031633146110465760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610c775780601f10610c4c57610100808354040283529160200191610c77565b506008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6001600160a01b03811660009081526005602052604081206107ed90611976565b600954600090610a65906110db906001600160a01b0316610eca565b60025490611934565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561087f5780601f106108545761010080835404028352916020019161087f565b600a546001600160a01b031681565b336000908152600f602090815260408083206001600160a01b03861684529091528120548083106111a857336000908152600f602090815260408083206001600160a01b03881684529091528120556111d7565b6111b28184611934565b336000908152600f602090815260408083206001600160a01b03891684529091529020555b336000818152600f602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600080611249836108f5565b336000908152600e60205260409020549091506112669082611934565b336000908152600e6020526040808220929092556001600160a01b038616815220546112929082611793565b6001600160a01b0385166000818152600e60209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b6010546001600160a01b03163314611350576040805162461bcd60e51b815260206004820152600d60248201527f4f6e6c7920747265617375727900000000000000000000000000000000000000604482015290519081900360640190fd5b8015611397576001600160a01b0382166000908152601160205260409020546113799084611793565b6001600160a01b0383166000908152601160205260409020556113d4565b6001600160a01b0382166000908152601160205260409020546113ba9084611934565b6001600160a01b0383166000908152601160205260409020555b6113dd82610eca565b6001600160a01b0383166000908152601160205260409020541115611449576040805162461bcd60e51b815260206004820152601b60248201527f735448454f3a20696e73756666696369656e742062616c616e63650000000000604482015290519081900360640190fd5b505050565b6008546001600160a01b031681565b60116020526000908152604090205481565b834211156114c4576040805162461bcd60e51b815260206004820152601860248201527f5065726d69743a206578706972656420646561646c696e650000000000000000604482015290519081900360640190fd5b6001600160a01b03871660009081526005602052604081207f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c99089908990899061150d90611976565b604080516020808201979097526001600160a01b0395861681830152939094166060840152608083019190915260a082015260c08082018990528251808303909101815260e0820183528051908401206006547f1901000000000000000000000000000000000000000000000000000000000000610100840152610102830152610122808301829052835180840390910181526101428301808552815191860191909120600091829052610162840180865281905260ff8a166101828501526101a284018990526101c28401889052935191955092936001926101e280820193601f1981019281900390910190855afa15801561160e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906116445750896001600160a01b0316816001600160a01b0316145b61167f5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ae26021913960400191505060405180910390fd5b6001600160a01b038a1660009081526005602052604090206116a09061197a565b6116ab8a8a8a611983565b50505050505050505050565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6009546001600160a01b031681565b600061173383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119e5565b9392505050565b600082611749575060006107ed565b8282028284828161175657fe5b04146117335760405162461bcd60e51b8152600401808060200182810382526021815260200180611b036021913960400191505060405180910390fd5b600082820183811015611733576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000806118068561077186670de0b6b3a764000061173a565b9050600b6040518060e0016040528085815260200183815260200187815260200161182f6110bf565b8152602001868152602001611842610a58565b81524360209182015282546001818101855560009485529382902083516007909202019081558282015193810193909355604080830151600280860191909155606084015160038601556080840151600486015560a0840151600586015560c0909301516006909401939093559054825142815291820152815185927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4928290030190a2827f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb282611911610a58565b6040805192835260208301919091528051918290030190a2506001949350505050565b600061173383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a87565b5490565b80546001019055565b6001600160a01b038084166000818152600f6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008183611a715760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a36578181015183820152602001611a1e565b50505050905090810190601f168015611a635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611a7d57fe5b0495945050505050565b60008184841115611ad95760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611a36578181015183820152602001611a1e565b50505090039056fe5a65726f537761705065726d69743a20496e76616c6964207369676e6174757265536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e697469616c697a65723a202063616c6c6572206973206e6f7420696e697469616c697a6572a26469706673582212206277ec38bf36d0d22843ac46fb30874e6a460aaa9d7607d489e7a1c3029bf60a64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeDebt(uint256,address,bool)": {
        "details": "addresses with debt balances cannot transfer collateralized sTHEO until the debt has been repaid.",
        "params": {
          "add": "bool",
          "amount": "uint256",
          "debtor": "address"
        }
      },
      "nonces(address)": {
        "details": "See {IERC2612Permit-nonces}."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC2612Permit-permit}."
      },
      "rebase(uint256,uint256)": {
        "params": {
          "profit_": "uint256"
        },
        "returns": {
          "_0": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeDebt(uint256,address,bool)": {
        "notice": "this function is called by the treasury, and informs sTHEO of changes to debt."
      },
      "rebase(uint256,uint256)": {
        "notice": "increases sTHEO supply to increase staking balances relative to profit_"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10368,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10374,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10376,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10378,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 10380,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 10844,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)2636_storage)"
      },
      {
        "astId": 10849,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 11008,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 11010,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "authority",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITheopetraAuthority)2485"
      },
      {
        "astId": 9538,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "stakingContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9540,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "initializer",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9578,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "rebases",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Rebase)9575_storage)dyn_storage"
      },
      {
        "astId": 9580,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "INDEX",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 9611,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_gonsPerFragment",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9615,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_gonBalances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9621,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "_allowedValue",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9623,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "treasury",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 9628,
        "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
        "label": "debtBalances",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Rebase)9575_storage)dyn_storage": {
        "base": "t_struct(Rebase)9575_storage",
        "encoding": "dynamic_array",
        "label": "struct sTheopetra.Rebase[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITheopetraAuthority)2485": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)2636_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)2636_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2636_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2635,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Rebase)9575_storage": {
        "encoding": "inplace",
        "label": "struct sTheopetra.Rebase",
        "members": [
          {
            "astId": 9562,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "epoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9564,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "rebase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9566,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "totalStakedBefore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9568,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "totalStakedAfter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9570,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "amountRebased",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9572,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "index",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9574,
            "contract": "src/Theopetra/sTheopetraERC20.sol:sTheopetra",
            "label": "blockNumberOccured",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}