{
  "address": "0xbCF05b9993B5241C9F46F8a4C3459d423299D57D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_theo",
          "type": "address"
        },
        {
          "internalType": "contract IStakedTHEOToken",
          "name": "_stheo",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fixedBondPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "calculatePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "_market",
          "type": "uint256[2]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "payout_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index_",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWhitelistBondDepository.DepositInfo",
          "name": "depositInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getNotesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "sold",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdPricePerTHEO",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "discount",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "autoStake",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created_",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "expiry_",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeRemaining_",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        },
        {
          "internalType": "uint48",
          "name": "discount_",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDAO",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "secret",
          "type": "string"
        }
      ],
      "name": "setSecret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb35c5bb357f8eb71329daa75265944367098bf06d37b8a191de5dd742790c358",
  "receipt": {
    "to": null,
    "from": "0x0a4B56B375aEAfB5A02ACaeEc5Ca0F6a6efb0025",
    "contractAddress": "0xbCF05b9993B5241C9F46F8a4C3459d423299D57D",
    "transactionIndex": 2,
    "gasUsed": "3721867",
    "logsBloom": "0x
    "blockHash": "0x6f08e9049e46f765a45298a2168209bf154d98e0f501f46ede391858b0cb2e27",
    "transactionHash": "0xb35c5bb357f8eb71329daa75265944367098bf06d37b8a191de5dd742790c358",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10606255,
        "transactionHash": "0xb35c5bb357f8eb71329daa75265944367098bf06d37b8a191de5dd742790c358",
        "address": "0xbCF05b9993B5241C9F46F8a4C3459d423299D57D",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000bcdf034ce6624a817c1bfeffbde8691443e5fdbb"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x6f08e9049e46f765a45298a2168209bf154d98e0f501f46ede391858b0cb2e27"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 10606255,
        "transactionHash": "0xb35c5bb357f8eb71329daa75265944367098bf06d37b8a191de5dd742790c358",
        "address": "0x1A2EA28399A2e4f8f3EEfeA5f41770B4C61fE643",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000bcf05b9993b5241c9f46f8a4c3459d423299d57d",
          "0x00000000000000000000000079b4882b3121061c054eefebcb05b2b3ffcf59dd"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 3,
        "blockHash": "0x6f08e9049e46f765a45298a2168209bf154d98e0f501f46ede391858b0cb2e27"
      }
    ],
    "blockNumber": 10606255,
    "cumulativeGasUsed": "3854084",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBcdF034cE6624A817c1BfEffBDE8691443e5fDbB",
    "0x1A2EA28399A2e4f8f3EEfeA5f41770B4C61fE643",
    "0xCD1a66F06eC36Db3F040C6065e5AAC0866FcD77A",
    "0x79b4882B3121061C054EEFEBcB05B2b3fFcf59Dd",
    "0x6640C3FD53e4Cf446B4139f478A199147d663a44"
  ],
  "numDeployments": 3,
  "solcInputHash": "60aee56ac40beaa3576af8be2fed4c30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_theo\",\"type\":\"address\"},{\"internalType\":\"contract IStakedTHEOToken\",\"name\":\"_stheo\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedBondPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_market\",\"type\":\"uint256[2]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"internalType\":\"struct IWhitelistBondDepository.DepositInfo\",\"name\":\"depositInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNotesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"sold\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPricePerTHEO\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"discount\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created_\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"expiry_\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeRemaining_\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"discount_\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDAO\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"setSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculatePrice(uint256)\":{\"details\":\"get the latest price for the market's quote token in USD                          (`priceConsumerPrice`, with decimals `priceConsumerDecimals`)                          then `scalePrice` to scale the fixed bond price to THEO decimals when calculating `price`.                          finally, calculate `price` as quote tokens per THEO, in THEO decimals (9)\",\"params\":{\"_id\":\"market ID\"},\"returns\":{\"_0\":\"uint256 price of THEO in quote token terms, in THEO decimals (9)\"}},\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,address,uint256[2],bool[2],uint256[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_market\":\"[capacity (in THEO or quote), fixed bond price (9 decimals) USD per THEO]\",\"_priceFeed\":\"address of the price consumer, to return the USD value for the quote token when deposits are made\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"deposit(uint256,uint256,uint256,address,address,bytes)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"depositInfo\":\"DepositInfo\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"1e18 = theo decimals (9) + fixed bond price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of THEO to be paid in THEO decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"created_\":\"        the time the note was created\",\"expiry_\":\"         the time the note is redeemable\",\"matured_\":\"        if the payout can be redeemed\",\"payout_\":\"         the payout due, in sTHEO\",\"timeRemaining_\":\"  the time remaining until the note is matured\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[])\":{\"details\":\"adapted from Olympus V2. Olympus V2 either sends payout as gOHM                     or calls an `unwrap` function on the staking contract                     to convert the payout from gOHM into sOHM and then send as sOHM.                     This current contract sends payout as sTHEO.\",\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in sTHEO\"}},\"redeemAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in sTHEO\"}}},\"title\":\"Theopetra Whitelist Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculatePrice(uint256)\":{\"notice\":\"calculate the price of THEO in quote token terms; i.e. the number of quote tokens per THEO\"},\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,address,uint256[2],bool[2],uint256[2])\":{\"notice\":\"creates a new market type\"},\"deposit(uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"getLatestPrice(address)\":{\"notice\":\"Returns the latest price\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/WhitelistBondDepository.sol\":\"WhitelistTheopetraBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"src/Interfaces/IBondCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.7.5 <=0.8.10;\\n\\ninterface IBondCalculator {\\n    function valuation(address tokenIn, uint256 amount_) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x69bc452b443bad25ea668f74c2dffcdfc4bb24147cec627294d1f7ac10170c64\",\"license\":\"AGPL-1.0\"},\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n    /**\\n     * @notice  Info for market note\\n     * @dev     Note::payout is sTHEO remaining to be paid\\n     *          Note::created is the time the Note was created\\n     *          Note::matured is the timestamp when the Note is redeemable\\n     *          Note::redeemed is time market was redeemed\\n     *          Note::marketID is market ID of deposit. uint48 to avoid adding a slot.\\n     */\\n    struct Note {\\n        uint256 payout;\\n        uint48 created;\\n        uint48 matured;\\n        uint48 redeemed;\\n        uint48 marketID;\\n        uint48 discount;\\n        bool autoStake;\\n    }\\n\\n    function redeem(address _user, uint256[] memory _indexes) external returns (uint256);\\n\\n    function redeemAll(address _user) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index)\\n        external\\n        view\\n        returns (\\n            uint256 payout_,\\n            uint48 created_,\\n            uint48 expiry_,\\n            uint48 timeRemaining_,\\n            bool matured_,\\n            uint48 discount_\\n        );\\n}\\n\",\"keccak256\":\"0x43e52ad0b3559f11f0bb02fb361dcfd7d3f4dfcb23cc81351de0fb46ff813a96\",\"license\":\"AGPL-3.0-only\"},\"src/Interfaces/IStakedTHEOToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IStakedTHEOToken is IERC20 {\\n    function rebase(uint256 theoProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view override returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3143d844fbf32d8dc30ab9e1ea6bcc30825a74cd5586f185be87ce88a9887ebb\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _claim\\n    ) external returns (uint256, uint256 _index);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit(uint256 _index) external;\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function claimAll(address _recipient) external returns (uint256);\\n\\n    function pushClaim(address _to, uint256 _index) external;\\n\\n    function pullClaim(address _from, uint256 _index) external returns (uint256 newIndex_);\\n\\n    function pushClaimForBond(address _to, uint256 _index) external returns (uint256 newIndex_);\\n\\n    function basis() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf94f39165a388769ae62b60d5ec7aa01e2c67d587b9a46361a44eabcf8a7140\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITheopetraAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event ManagerPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event SignerPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function whitelistSigner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb2878b057ac95bafe9f359c26c4e7b470dcd6d00df5797f992a576d79182b287\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IBondCalculator.sol\\\";\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function tokenPerformanceUpdate() external;\\n\\n    function baseSupply() external view returns (uint256);\\n\\n    function deltaTokenPrice() external view returns (int256);\\n\\n    function deltaTreasuryYield() external view returns (int256);\\n\\n    function getTheoBondingCalculator() external view returns (IBondCalculator);\\n\\n    function setTheoBondingCalculator(address _theoBondingCalculator) external;\\n}\\n\",\"keccak256\":\"0x10a5c7e77b1e79eb7cf341bbbaf772b1f64f452cbf525d9cb7cf9ef44c04f71f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IWhitelistBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWhitelistBondDepository {\\n    /**\\n     * @notice      Info about each type of market\\n     * @dev         Market::capacity is capacity remaining\\n     *              Market::quoteToken is token to accept as payment\\n     *              Market::priceFeed is address of the price consumer, to return the USD value for the quote token when deposits are made\\n     *              Market::capacityInQuote is in payment token (true) or in THEO (false, default)\\n     *              Market::sold is base tokens out\\n     *              Market::purchased quote tokens in\\n     *              Market::usdPricePerTHEO is 9 decimal USD value for each THEO bond\\n     */\\n    struct Market {\\n        uint256 capacity;\\n        IERC20 quoteToken;\\n        address priceFeed;\\n        bool capacityInQuote;\\n        uint64 sold;\\n        uint256 purchased;\\n        uint256 usdPricePerTHEO;\\n    }\\n\\n    /**\\n     * @notice      Info for creating new markets\\n     * @dev         Terms::fixedTerm is fixed term or fixed expiration\\n     *              Terms::vesting is length of time from deposit to maturity if fixed-term\\n     *              Terms::conclusion is timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n     */\\n    struct Terms {\\n        bool fixedTerm;\\n        uint48 vesting;\\n        uint48 conclusion;\\n    }\\n\\n    /**\\n     * @notice      Additional info about market\\n     * @dev         Metadata::quoteDecimals is decimals of quote token\\n     */\\n    struct Metadata {\\n        uint8 quoteDecimals;\\n    }\\n\\n    struct DepositInfo {\\n        uint256 payout_;\\n        uint256 expiry_;\\n        uint256 index_;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @param signature bytes\\n     * @return depositInfo DepositInfo\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral,\\n        bytes calldata signature\\n    ) external returns (DepositInfo memory depositInfo);\\n\\n    /**\\n     * @notice create market\\n     * @param _quoteToken IERC20 is the token used to deposit\\n     * @param _priceFeed address is address of the price consumer, to return the USD value for the quote token when deposits are made\\n     * @param _market uint256[2] is [capacity, fixed bond price (9 decimals) USD per THEO]\\n     * @param _booleans bool[2] is [capacity in quote, fixed term]\\n     * @param _terms uint256[2] is [vesting, conclusion]\\n     * @return id_ uint256 is ID of the market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        address _priceFeed,\\n        uint256[2] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function calculatePrice(uint256 _bid) external view returns (uint256);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xefa35472245c2b4665fb04da0402e2bb4df7d27bc14a8efbbb190c56ab490a78\",\"license\":\"AGPL-3.0\"},\"src/Libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport { IERC20 } from \\\"../Interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{ value: amount }(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbba364b239a1a473ccd351490d3aff53f31369c461512837274a476027b35784\",\"license\":\"AGPL-3.0-only\"},\"src/Theopetra/WhitelistBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../Types/NoteKeeper.sol\\\";\\nimport \\\"../Types/Signed.sol\\\";\\nimport \\\"../Types/PriceConsumerV3.sol\\\";\\n\\nimport \\\"../Libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../Interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../Interfaces/IWhitelistBondDepository.sol\\\";\\n\\n/**\\n * @title Theopetra Whitelist Bond Depository\\n */\\n\\ncontract WhitelistTheopetraBondDepository is IWhitelistBondDepository, NoteKeeper, Signed, PriceConsumerV3 {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(\\n        uint256 indexed id,\\n        address indexed baseToken,\\n        address indexed quoteToken,\\n        uint256 fixedBondPrice\\n    );\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        ITheopetraAuthority _authority,\\n        IERC20 _theo,\\n        IStakedTHEOToken _stheo,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _theo, _stheo, _staking, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _theo.approve(address(_staking), 1e45);\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id          the ID of the market\\n     * @param _amount      the amount of quote token to spend\\n     * @param _maxPrice    the maximum price at which to buy\\n     * @param _user        the recipient of the payout\\n     * @param _referral    the front end operator address\\n     * @return depositInfo DepositInfo\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral,\\n        bytes calldata signature\\n    ) external override returns (DepositInfo memory depositInfo) {\\n        verifySignature(\\\"\\\", signature);\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Get the price of THEO in quote token terms\\n        // i.e. the number of quote tokens per THEO\\n        // With 9 decimal places\\n        uint256 price = calculatePrice(_id);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = THEO out, in THEO decimals (9)\\n         * amount = quote tokens in\\n         * price = quote tokens per THEO, in THEO decimals (9)\\n         *\\n         * 1e18 = THEO decimals (9) + price decimals (9)\\n         */\\n        depositInfo.payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of THEO that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n\\n        require(\\n            market.capacity >= (market.capacityInQuote ? _amount : depositInfo.payout_),\\n            \\\"Depository: capacity exceeded\\\"\\n        );\\n\\n        market.capacity -= market.capacityInQuote ? _amount : depositInfo.payout_;\\n\\n        if (market.capacity == 0) {\\n            emit CloseMarket(_id);\\n        }\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        depositInfo.expiry_ = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much THEO has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(depositInfo.payout_);\\n\\n        emit Bond(_id, _amount, price);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        depositInfo.index_ = addNote(\\n            _user,\\n            depositInfo.payout_,\\n            uint48(depositInfo.expiry_),\\n            uint48(_id),\\n            _referral,\\n            0,\\n            false\\n        );\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in THEO or quote), fixed bond price (9 decimals) USD per THEO]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _priceFeed   address of the price consumer, to return the USD value for the quote token when deposits are made\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        address _priceFeed,\\n        uint256[2] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                priceFeed: _priceFeed,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                purchased: 0,\\n                sold: 0,\\n                usdPricePerTHEO: _market[1]\\n            })\\n        );\\n\\n        terms.push(Terms({ fixedTerm: _booleans[1], vesting: uint48(_terms[0]), conclusion: uint48(_terms[1]) }));\\n\\n        metadata.push(Metadata({ quoteDecimals: uint8(decimals) }));\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(theo), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of THEO to be paid in THEO decimals\\n     *\\n     * @dev 1e18 = theo decimals (9) + fixed bond price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 1e18) / calculatePrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice                  calculate the price of THEO in quote token terms; i.e. the number of quote tokens per THEO\\n     * @dev                     get the latest price for the market's quote token in USD\\n     *                          (`priceConsumerPrice`, with decimals `priceConsumerDecimals`)\\n     *                          then `scalePrice` to scale the fixed bond price to THEO decimals when calculating `price`.\\n     *                          finally, calculate `price` as quote tokens per THEO, in THEO decimals (9)\\n     * @param _id               market ID\\n     * @return                  uint256 price of THEO in quote token terms, in THEO decimals (9)\\n     */\\n    function calculatePrice(uint256 _id) public view override returns (uint256) {\\n        (int256 priceConsumerPrice, uint8 priceConsumerDecimals) = getLatestPrice(markets[_id].priceFeed);\\n\\n        int256 scaledPrice = scalePrice(int256(markets[_id].usdPricePerTHEO), 9, 9 + priceConsumerDecimals);\\n\\n        uint256 price = uint256(scaledPrice / priceConsumerPrice);\\n        return price;\\n    }\\n\\n    /* ======== INTERNAL PURE ======== */\\n\\n    /**\\n     * @param _price            fixed bond price (USD per THEO), 9 decimals\\n     * @param _priceDecimals    decimals (9) used for the fixed bond price\\n     * @param _decimals         sum of decimals for THEO token (9) + decimals for the price feed\\n     */\\n    function scalePrice(\\n        int256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure returns (int256) {\\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10**uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10**uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n}\\n\",\"keccak256\":\"0xaccc741307427a7e8278fc1f6385c75b66a67bdbd037bdd7ede10692f9807d72\",\"license\":\"AGPL-3.0\"},\"src/Types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../Types/TheopetraAccessControlled.sol\\\";\\nimport \\\"../Interfaces/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is TheopetraAccessControlled {\\n    /* ========= STATE VARIABLES ========== */\\n\\n    uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\n    uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n    mapping(address => uint256) public rewards; // front end operator rewards\\n    mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n    IERC20 internal immutable theo; // reward token\\n\\n    constructor(ITheopetraAuthority _authority, IERC20 _theo) TheopetraAccessControlled(_authority) {\\n        theo = _theo;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to front end operator\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        theo.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice add new market payout to user data\\n     */\\n    function _giveRewards(uint256 _payout, address _referral) internal returns (uint256) {\\n        // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\n        uint256 toDAO = (_payout * daoReward) / 1e4;\\n        uint256 toRef = (_payout * refReward) / 1e4;\\n\\n        // and store them in our rewards mapping\\n        if (whitelisted[_referral]) {\\n            rewards[_referral] += toRef;\\n            rewards[authority.guardian()] += toDAO;\\n        } else {\\n            // the DAO receives both rewards if referrer is not whitelisted\\n            rewards[authority.guardian()] += toDAO + toRef;\\n        }\\n        return toDAO + toRef;\\n    }\\n\\n    /**\\n     * @notice set rewards for front end operators and DAO\\n     */\\n    function setRewards(uint256 _toFrontEnd, uint256 _toDAO) external onlyGovernor {\\n        refReward = _toFrontEnd;\\n        daoReward = _toDAO;\\n    }\\n\\n    /**\\n     * @notice add or remove addresses from the reward whitelist\\n     */\\n    function whitelist(address _operator) external onlyPolicy {\\n        whitelisted[_operator] = !whitelisted[_operator];\\n    }\\n}\\n\",\"keccak256\":\"0xd2addfc83d39e87afcaaffc0c21a58386e9d5ea4438be5e358b3be81bfe203f6\",\"license\":\"AGPL-3.0-only\"},\"src/Types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"./FrontEndRewarder.sol\\\";\\n\\nimport \\\"../Interfaces/IStakedTHEOToken.sol\\\";\\nimport \\\"../Interfaces/IStaking.sol\\\";\\nimport \\\"../Interfaces/ITreasury.sol\\\";\\nimport \\\"../Interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n    mapping(address => mapping(uint256 => uint256)) private noteForClaim; // index of staking claim for a user's note\\n\\n    IStakedTHEOToken internal immutable sTHEO;\\n    IStaking internal immutable staking;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        ITheopetraAuthority _authority,\\n        IERC20 _theo,\\n        IStakedTHEOToken _stheo,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _theo) {\\n        sTHEO = _stheo;\\n        staking = _staking;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user        the user that owns the Note\\n     * @param _payout      the amount of THEO due to the user\\n     * @param _expiry      the timestamp when the Note is redeemable\\n     * @param _marketID    the ID of the market deposited into\\n     * @param _discount    the discount on the bond (that is, the bond rate, variable). This is a proportion (that is, a percentage in its decimal form), with 9 decimals\\n     * @return index_      the index of the Note in the user's array\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral,\\n        uint48 _discount,\\n        bool _autoStake\\n    ) internal returns (uint256 index_) {\\n        // the index of the note is the next in the user's array\\n        index_ = notes[_user].length;\\n\\n        // the new note is pushed to the user's array\\n        notes[_user].push(\\n            Note({\\n                payout: _payout,\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID,\\n                discount: _discount,\\n                autoStake: _autoStake\\n            })\\n        );\\n\\n        // front end operators can earn rewards by referring users\\n        uint256 rewards = _giveRewards(_payout, _referral);\\n\\n        // mint and stake payout\\n        treasury.mint(address(this), _payout + rewards);\\n\\n        if (_autoStake) {\\n            // note that only the payout gets staked (front end rewards are in THEO)\\n            // Get index for the claim to approve for pushing\\n            (, uint256 claimIndex) = staking.stake(address(this), _payout, true);\\n            // approve the user to transfer the staking claim\\n            staking.pushClaim(_user, claimIndex);\\n\\n            // Map the index of the user's note to the claimIndex\\n            noteForClaim[_user][index_] = claimIndex;\\n        }\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @dev                adapted from Olympus V2. Olympus V2 either sends payout as gOHM\\n     *                     or calls an `unwrap` function on the staking contract\\n     *                     to convert the payout from gOHM into sOHM and then send as sOHM.\\n     *                     This current contract sends payout as sTHEO.\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @return payout_     sum of payout sent, in sTHEO\\n     */\\n    function redeem(address _user, uint256[] memory _indexes) public override returns (uint256 payout_) {\\n        uint48 time = uint48(block.timestamp);\\n        uint256 sTheoPayout = 0;\\n        uint256 theoPayout = 0;\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, , , , bool matured, ) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n                if (notes[_user][_indexes[i]].autoStake) {\\n                    uint256 _claimIndex = noteForClaim[_user][_indexes[i]];\\n                    staking.pushClaimForBond(_user, _claimIndex);\\n                    sTheoPayout += pay;\\n                } else {\\n                    theoPayout += pay;\\n                }\\n            }\\n        }\\n        if (theoPayout > 0) theo.transfer(_user, payout_);\\n        if (sTheoPayout > 0) sTHEO.transfer(_user, payout_);\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @return             sum of payout sent, in sTHEO\\n     */\\n    function redeemAll(address _user) external override returns (uint256) {\\n        return redeem(_user, indexesFor(_user));\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice                  calculate amount available for claim for a single note\\n     * @param _user             the user that the note belongs to\\n     * @param _index            the index of the note in the user's array\\n     * @return payout_          the payout due, in sTHEO\\n     * @return created_         the time the note was created\\n     * @return expiry_          the time the note is redeemable\\n     * @return timeRemaining_   the time remaining until the note is matured\\n     * @return matured_         if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 payout_,\\n            uint48 created_,\\n            uint48 expiry_,\\n            uint48 timeRemaining_,\\n            bool matured_,\\n            uint48 discount_\\n        )\\n    {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        created_ = note.created;\\n        expiry_ = note.matured;\\n        timeRemaining_ = note.matured - note.created;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n        discount_ = note.discount;\\n    }\\n\\n    function getNotesCount(address _user) public view returns (uint256) {\\n        return notes[_user].length;\\n    }\\n}\\n\",\"keccak256\":\"0x72bca2696933e7ad3ce5b904a38479d1c06f6d241def1380cff884d7710df779\",\"license\":\"AGPL-3.0-only\"},\"src/Types/PriceConsumerV3.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceConsumerV3 {\\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice(address priceFeedAddress) public view returns (int256, uint8) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            uint256 startedAt,\\n            uint256 timeStamp,\\n            uint80 answeredInRound\\n        ) = AggregatorV3Interface(priceFeedAddress).latestRoundData();\\n\\n        uint8 decimals = AggregatorV3Interface(priceFeedAddress).decimals();\\n\\n        return (price, decimals);\\n    }\\n}\\n\",\"keccak256\":\"0xc307c6c96561a990c30776173feb85d7e90d59f274bc85fa6d84ca0ef463ffd4\",\"license\":\"AGPL-3.0\"},\"src/Types/Signed.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./TheopetraAccessControlled.sol\\\";\\n\\nabstract contract Signed is TheopetraAccessControlled {\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n\\n    string private _secret;\\n\\n    function setSecret(string calldata secret) external onlyGovernor {\\n        _secret = secret;\\n    }\\n\\n    function createHash(string memory data) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), msg.sender, data, _secret));\\n    }\\n\\n    function getSigner(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        return hash.toEthSignedMessageHash().recover(signature);\\n    }\\n\\n    function isAuthorizedSigner(address extracted) internal view virtual returns (bool) {\\n        return extracted == authority.whitelistSigner();\\n    }\\n\\n    function verifySignature(string memory data, bytes calldata signature) internal view {\\n        address extracted = getSigner(createHash(data), signature);\\n        require(isAuthorizedSigner(extracted), \\\"Signature verification failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdf772fd1827db3132196d9682a1a450c721d2bddc052160699194dd95d7b2091\",\"license\":\"BSD-3\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\n\\nabstract contract TheopetraAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ITheopetraAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(ITheopetraAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a24eaf51fcd807927a59ae694a7c752a060d278610b88c9b61d89f872a4b5\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b6101009081526200003191600091906200017b565b503480156200003f57600080fd5b50604051620043ff380380620043ff83398101604081905262000062916200023a565b600180546001600160a01b0319166001600160a01b038716908117909155604051869186918691869186918691869183917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660805293841660a0525090821660c052600980546001600160a01b03191691831691909117905560405163095ea7b360e01b81528582166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908716925063095ea7b391506044016020604051808303816000875af115801562000149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016f9190620002ba565b50505050505062000322565b8280546200018990620002e5565b90600052602060002090601f016020900481019282620001ad5760008555620001f8565b82601f10620001c857805160ff1916838001178555620001f8565b82800160010185558215620001f8579182015b82811115620001f8578251825591602001919060010190620001db565b50620002069291506200020a565b5090565b5b808211156200020657600081556001016200020b565b6001600160a01b03811681146200023757600080fd5b50565b600080600080600060a086880312156200025357600080fd5b8551620002608162000221565b6020870151909550620002738162000221565b6040870151909450620002868162000221565b6060870151909350620002998162000221565b6080870151909250620002ac8162000221565b809150509295509295909350565b600060208284031215620002cd57600080fd5b81518015158114620002de57600080fd5b9392505050565b600181811c90821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c0516140916200036e6000396000818161222b01528181612b210152612bd7015260006123cb0152600081816108ba015281816115b3015261233001526140916000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063ae1042651161010f578063c9b67af5116100a2578063e0b117ff11610071578063e0b117ff14610542578063e3684e391461059b578063e481b265146105c0578063f3191a46146105d357600080fd5b8063c9b67af5146104f1578063d2390aa2146104f9578063d6db4df81461050c578063d936547e1461051f57600080fd5b8063bf7e214f116100de578063bf7e214f1461042a578063c0680e2014610455578063c0aa0e8a14610468578063c3e0fb1c146104a157600080fd5b8063ae1042651461037d578063b1283e7714610390578063b6d8eee0146103ee578063be399be51461041757600080fd5b80636a6c575d116101875780639a1e46d5116101565780639a1e46d51461033c5780639b19251a1461034f5780639c76978714610362578063a42206101461036a57600080fd5b80636a6c575d146102ce5780637a9e5e4b146102e15780637ed6c926146102f4578063964561c41461030757600080fd5b806327507458116101c357806327507458146102705780633d18b91214610293578063649144391461029b578063654e51e7146102bb57600080fd5b80630700037d146101f55780630aebeb4e1461022857806316345f181461023d5780631885f58014610267575b600080fd5b6102156102033660046135f8565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61023b610236366004613615565b6105dc565b005b61025061024b3660046135f8565b610727565b6040805192835260ff90911660208301520161021f565b61021560025481565b61028361027e366004613615565b610812565b604051901515815260200161021f565b61023b61087f565b6102ae6102a93660046135f8565b61092b565b60405161021f919061362e565b61023b6102c9366004613672565b610aba565b6102156102dc366004613672565b610b71565b61023b6102ef3660046135f8565b610be8565b61023b6103023660046136d6565b610ceb565b61031a610315366004613718565b610da8565b604080518251815260208084015190820152918101519082015260600161021f565b61021561034a366004613861565b61117a565b61023b61035d3660046135f8565b61160a565b61023b6116df565b610215610378366004613913565b611980565b61021561038b366004613615565b611d01565b6103a361039e366004613615565b611d98565b604080519788526001600160a01b0396871660208901529490951693860193909352901515606085015267ffffffffffffffff16608084015260a083015260c082015260e00161021f565b6102156103fc3660046135f8565b6001600160a01b031660009081526006602052604090205490565b6102156104253660046135f8565b611e16565b60015461043d906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b610215610463366004613913565b611e25565b61047b610476366004613615565b611e56565b60408051931515845265ffffffffffff928316602085015291169082015260600161021f565b6104b46104af366004613913565b611e96565b6040805196875265ffffffffffff9586166020880152938516938601939093529083166060850152151560808401521660a082015260c00161021f565b6102ae611fc3565b61021561050736600461393f565b6120ac565b61023b61051a366004613913565b612443565b61028361052d3660046135f8565b60056020526000908152604090205460ff1681565b610555610550366004613913565b612512565b6040805197885265ffffffffffff96871660208901529486169487019490945291841660608601528316608085015290911660a0830152151560c082015260e00161021f565b6105ae6105a9366004613615565b612597565b60405160ff909116815260200161021f565b6102ae6105ce3660046135f8565b6125bb565b61021560035481565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065391906139fa565b6001600160a01b0316336001600160a01b0316146000906106905760405162461bcd60e51b81526004016106879190613a52565b60405180910390fd5b5042600c82815481106106a5576106a5613ad7565b9060005260206000200160000160076101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600b82815481106106e9576106e9613ad7565b6000918252602082206005909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b6000806000806000806000876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190613b0c565b945094509450945094506000886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190613b5c565b9499949850939650505050505050565b6000600b828154811061082757610827613ad7565b906000526020600020906005020160000154600014158015610879575042600c838154811061085857610858613ad7565b600091825260209091200154670100000000000000900465ffffffffffff16115b92915050565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109279190613b7f565b5050565b6001600160a01b0381166000908152600e6020908152604080832080548251818502810185019093528083526060949383018282801561098a57602002820191906000526020600020905b815481526020019060010190808311610976575b50505050509050600080600090505b82518110156109e9576109c48382815181106109b7576109b7613ad7565b6020026020010151610812565b156109d757816109d381613bb2565b9250505b806109e181613bb2565b915050610999565b5060008167ffffffffffffffff811115610a0557610a0561379e565b604051908082528060200260200182016040528015610a2e578160200160208202803683370190505b5090506000805b8451811015610aaf57610a538582815181106109b7576109b7613ad7565b15610a9d57848181518110610a6a57610a6a613ad7565b6020026020010151838381518110610a8457610a84613ad7565b602090810291909101015281610a9981613bb2565b9250505b80610aa781613bb2565b915050610a35565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3191906139fa565b6001600160a01b0316336001600160a01b031614600090610b655760405162461bcd60e51b81526004016106879190613a52565b50600391909155600255565b600080600d8381548110610b8757610b87613ad7565b6000918252602091829020604080519384019052015460ff16808252909150610bb190600a613cb1565b610bba84611d01565b610bcc86670de0b6b3a7640000613cc0565b610bd69190613cf5565b610be09190613cf5565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906139fa565b6001600160a01b0316336001600160a01b031614600090610c935760405162461bcd60e51b81526004016106879190613a52565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6291906139fa565b6001600160a01b0316336001600160a01b031614600090610d965760405162461bcd60e51b81526004016106879190613a52565b50610da3600a838361354a565b505050565b610dcc60405180606001604052806000815260200160008152602001600081525090565b610de660405180602001604052806000815250848461280c565b6000600b8981548110610dfb57610dfb613ad7565b906000526020600020906005020190506000600c8a81548110610e2057610e20613ad7565b600091825260209182902060408051606081018252919092015460ff81161515825265ffffffffffff61010082048116948301949094526701000000000000009004831691810182905292504291821610610ebd5760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606401610687565b6000610ec88c611d01565b905089811115610f1a5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606401610687565b600d8c81548110610f2d57610f2d613ad7565b600091825260209091200154610f479060ff16600a613cb1565b81610f5a8d670de0b6b3a7640000613cc0565b610f649190613cf5565b610f6e9190613cf5565b85526002840154600160a01b900460ff16610f8a578451610f8c565b8a5b84541015610fdc5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a2063617061636974792065786365656465640000006044820152606401610687565b6002840154600160a01b900460ff16610ff6578451610ff8565b8a5b84600001600082825461100b9190613d09565b90915550508354611042576040518c907f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe590600090a25b8251611052578260200151611062565b8183602001516110629190613d20565b65ffffffffffff1660208601526003840180548c9190600090611086908490613d4a565b909155505084516002850180546015906110c49084907501000000000000000000000000000000000000000000900467ffffffffffffffff16613d62565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508b7f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b9618c83604051611125929190918252602082015260400190565b60405180910390a261114589866000015187602001518f8c6000806128b3565b6040860152600954600185015461116b916001600160a01b03918216913391168e612c67565b50505050979650505050505050565b600154604080517f0505c8c900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa1580156111dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120191906139fa565b6001600160a01b0316336001600160a01b0316146000906112355760405162461bcd60e51b81526004016106879190613a52565b506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190613b5c565b60ff169050600b805490509150600b6040518060e00160405280876000600281106112c7576112c7613ad7565b60200201518152602001896001600160a01b03168152602001886001600160a01b031681526020018660006002811061130257611302613ad7565b602002015115158152602001600067ffffffffffffffff168152602001600081526020018760016002811061133957611339613ad7565b60209081029190910151909152825460018082018555600094855282852084516005909302019182558383015182820180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff199091161790556040808601516002850180546060808a015160808b015167ffffffffffffffff167501000000000000000000000000000000000000000000027fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090941695881695909517929092179190911692909217905560a0870151600386015560c090960151600490940193909355825194850183528984015115158552885165ffffffffffff9081168686019081528a8601518216878601908152600c80548087018255908a5297517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c79098018054925191517fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000009093169815157fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000ff169890981761010091841691909102177fffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffff166701000000000000009190921602179094558151808401835260ff8781168252600d8054808501825590885291517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909201805460ff1916929091169190911790558b8416808652600e8452828620805492830181558652948390200186905588820151815190815290517f00000000000000000000000000000000000000000000000000000000000000009093169286927f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f63928290030190a45095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561165d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168191906139fa565b6001600160a01b0316336001600160a01b0316146000906116b55760405162461bcd60e51b81526004016106879190613a52565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611732573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175691906139fa565b6001600160a01b0316336001600160a01b031614806117fc5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906139fa565b6001600160a01b0316336001600160a01b0316145b8061188e5750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187991906139fa565b6001600160a01b0316336001600160a01b0316145b6118da5760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a656400000000000000000000000000000000006044820152606401610687565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195191906139fa565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03828116600090815260076020908152604080832085845290915281205490911633146119f65760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e6400006044820152606401610687565b6001600160a01b0383166000908152600660205260409020805483908110611a2057611a20613ad7565b60009182526020909120600290910201600101546c01000000000000000000000000900465ffffffffffff1615611a995760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d6564000000000000006044820152606401610687565b503360009081526006602052604080822080546001600160a01b038616845291909220805491929184908110611ad157611ad1613ad7565b60009182526020808320845460018181018755958552828520600294850290920180549190940290910190815591840180549290940180547fffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000811665ffffffffffff948516908117835586546601000000000000908190048616026bffffffffffffffffffffffff19909216171780825585546c01000000000000000000000000908190048516027fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff8216811783558654600160901b908190048616027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff9091167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff90921691909117178082558554600160c01b908190049094169093027fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff841681178255945460ff600160f01b91829004161515027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9095167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff909316929092179390931790556001600160a01b0385168152600690915260409020805483908110611cc057611cc0613ad7565b60009182526020822060029091020190815560010180547fff0000000000000000000000000000000000000000000000000000000000000016905592915050565b6000806000611d3e600b8581548110611d1c57611d1c613ad7565b60009182526020909120600260059092020101546001600160a01b0316610727565b915091506000611d80600b8681548110611d5a57611d5a613ad7565b9060005260206000209060050201600401546009846009611d7b9190613d85565b612db9565b90506000611d8e8483613daa565b9695505050505050565b600b8181548110611da857600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294506001600160a01b039182169391811692600160a01b820460ff1692750100000000000000000000000000000000000000000090920467ffffffffffffffff16919087565b600061087982610507846125bb565b600e6020528160005260406000208181548110611e4157600080fd5b90600052602060002001600091509150505481565b600c8181548110611e6657600080fd5b60009182526020909120015460ff8116915065ffffffffffff610100820481169167010000000000000090041683565b6000806000806000806000600660008a6001600160a01b03166001600160a01b031681526020019081526020016000208881548110611ed757611ed7613ad7565b60009182526020918290206040805160e0810182526002909302909101805480845260019091015465ffffffffffff8082169585018690526601000000000000820481169385018490526c01000000000000000000000000820481166060860152600160901b820481166080860152600160c01b82041660a085015260ff600160f01b90910416151560c084015299509197509095509050611f798686613df4565b9350806060015165ffffffffffff166000148015611fa3575042816040015165ffffffffffff1611155b8015611faf5750805115155b92508060a001519150509295509295509295565b60606000805b600b5481101561200157611fdc81610812565b15611fef5781611feb81613bb2565b9250505b80611ff981613bb2565b915050611fc9565b5060008167ffffffffffffffff81111561201d5761201d61379e565b604051908082528060200260200182016040528015612046578160200160208202803683370190505b5090506000805b600b548110156120a35761206081610812565b15612091578083838151811061207857612078613ad7565b60209081029190910101528161208d81613bb2565b9250505b8061209b81613bb2565b91505061204d565b50909392505050565b6000428180805b8551811015612303576000806120e2898985815181106120d5576120d5613ad7565b6020026020010151611e96565b509450505050915080156122ee576001600160a01b038916600090815260066020526040902088518791908a908690811061211f5761211f613ad7565b60200260200101518154811061213757612137613ad7565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555081876121769190613d4a565b6001600160a01b038a1660009081526006602052604090208951919850908990859081106121a6576121a6613ad7565b6020026020010151815481106121be576121be613ad7565b9060005260206000209060020201600101601e9054906101000a900460ff16156122e1576001600160a01b0389166000908152600860205260408120895182908b908790811061221057612210613ad7565b602002602001015181526020019081526020016000205490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3e504098b836040518363ffffffff1660e01b815260040161228b9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce9190613e1b565b506122d98387613d4a565b9550506122ee565b6122eb8285613d4a565b93505b505080806122fb90613bb2565b9150506120b3565b50801561239f5760405163a9059cbb60e01b81526001600160a01b038781166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239d9190613b7f565b505b811561243a5760405163a9059cbb60e01b81526001600160a01b038781166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124389190613b7f565b505b50505092915050565b33600090815260066020526040902080548290811061246457612464613ad7565b600091825260209091206001600290920201015465ffffffffffff166124cc5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e640000000000006044820152606401610687565b33600090815260076020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061252e57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250660100000000000082048116916c010000000000000000000000008104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1687565b600d81815481106125a757600080fd5b60009182526020909120015460ff16905081565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156126925760008481526020908190206040805160e081018252600286029092018054835260019081015465ffffffffffff80821685870152660100000000000082048116938501939093526c01000000000000000000000000810483166060850152600160901b810483166080850152600160c01b810490921660a0840152600160f01b90910460ff16151560c083015290835290920191016125f0565b505050509050600080600090505b8251811015612721578281815181106126bb576126bb613ad7565b60200260200101516060015165ffffffffffff1660001480156126fc57508281815181106126eb576126eb613ad7565b602002602001015160000151600014155b1561270f578161270b81613bb2565b9250505b8061271981613bb2565b9150506126a0565b5060008167ffffffffffffffff81111561273d5761273d61379e565b604051908082528060200260200182016040528015612766578160200160208202803683370190505b5090506000805b8451811015610aaf5784818151811061278857612788613ad7565b60200260200101516060015165ffffffffffff1660001480156127c957508481815181106127b8576127b8613ad7565b602002602001015160000151600014155b156127fa57808383815181106127e1576127e1613ad7565b6020908102919091010152816127f681613bb2565b9250505b8061280481613bb2565b91505061276d565b600061285661281a85612e2c565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e6392505050565b905061286181612e78565b6128ad5760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c65640000006044820152606401610687565b50505050565b6001600160a01b03871660009081526006602090815260408083208054825160e0810184528b815265ffffffffffff4281168287019081528c8216958301958652606083018881528c8316608085019081528b841660a086019081528b151560c0870190815260018089018a55988c52998b209551600288029096019586559251949096018054975191519651925198511515600160f01b027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff998516600160c01b02999099167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff938516600160901b027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff9886166c0100000000000000000000000002989098167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff9386166601000000000000026bffffffffffffffffffffffff19909a16969095169590951797909717169190911793909317929092169190911792909217905590612a478886612f1a565b6009549091506001600160a01b03166340c10f1930612a66848c613d4a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015612ac457600080fd5b505af1158015612ad8573d6000803e3d6000fd5b505050508215612c5b576040517f995846bd00000000000000000000000000000000000000000000000000000000815230600482015260248101899052600160448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063995846bd9060640160408051808303816000875af1158015612b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b959190613e34565b6040517f78f1f7780000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018390529193507f000000000000000000000000000000000000000000000000000000000000000090911691506378f1f77890604401600060405180830381600087803b158015612c1e57600080fd5b505af1158015612c32573d6000803e3d6000fd5b505050506001600160a01b038a1660009081526008602090815260408083208684529091529020555b50979650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691612cf99190613e84565b6000604051808303816000865af19150503d8060008114612d36576040519150601f19603f3d011682016040523d82523d6000602084013e612d3b565b606091505b5091509150818015612d65575080511580612d65575080806020019051810190612d659190613b7f565b612db15760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610687565b505050505050565b60008160ff168360ff161015612df257612dd38383613ea0565b612de19060ff16600a613ec3565b612deb9085613ecf565b9050612e25565b8160ff168360ff161115612e2257612e0a8284613ea0565b612e189060ff16600a613ec3565b612deb9085613daa565b50825b9392505050565b6000303383600a604051602001612e469493929190613f8b565b604051602081830303815290604052805190602001209050919050565b6000612e2582612e7285613148565b90613183565b600154604080517fef81b4d400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ef81b4d49160048083019260209291908290030181865afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff91906139fa565b6001600160a01b0316826001600160a01b0316149050919050565b60008061271060025485612f2e9190613cc0565b612f389190613cf5565b9050600061271060035486612f4d9190613cc0565b612f579190613cf5565b6001600160a01b03851660009081526005602052604090205490915060ff161561306d576001600160a01b03841660009081526004602052604081208054839290612fa3908490613d4a565b9091555050600154604080517f452a9320000000000000000000000000000000000000000000000000000000008152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa15801561300f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303391906139fa565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546130629190613d4a565b909155506131359050565b6130778183613d4a565b600154604080517f452a932000000000000000000000000000000000000000000000000000000000815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310091906139fa565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461312f9190613d4a565b90915550505b61313f8183613d4a565b95945050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01612e46565b600080600061319285856131a7565b9150915061319f81613217565b509392505050565b6000808251604114156131de5760208301516040840151606085015160001a6131d28782858561340b565b94509450505050613210565b82516040141561320857602083015160408401516131fd8683836134f8565b935093505050613210565b506000905060025b9250929050565b600081600481111561322b5761322b614045565b14156132345750565b600181600481111561324857613248614045565b14156132965760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610687565b60028160048111156132aa576132aa614045565b14156132f85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610687565b600381600481111561330c5761330c614045565b14156133805760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610687565b600481600481111561339457613394614045565b14156134085760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610687565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561344257506000905060036134ef565b8460ff16601b1415801561345a57508460ff16601c14155b1561346b57506000905060046134ef565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156134bf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166134e8576000600192509250506134ef565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161352e60ff86901c601b613d4a565b905061353c8782888561340b565b935093505050935093915050565b82805461355690613a17565b90600052602060002090601f01602090048101928261357857600085556135be565b82601f106135915782800160ff198235161785556135be565b828001600101855582156135be579182015b828111156135be5782358255916020019190600101906135a3565b506135ca9291506135ce565b5090565b5b808211156135ca57600081556001016135cf565b6001600160a01b038116811461340857600080fd5b60006020828403121561360a57600080fd5b8135612e25816135e3565b60006020828403121561362757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156136665783518352928401929184019160010161364a565b50909695505050505050565b6000806040838503121561368557600080fd5b50508035926020909101359150565b60008083601f8401126136a657600080fd5b50813567ffffffffffffffff8111156136be57600080fd5b60208301915083602082850101111561321057600080fd5b600080602083850312156136e957600080fd5b823567ffffffffffffffff81111561370057600080fd5b61370c85828601613694565b90969095509350505050565b600080600080600080600060c0888a03121561373357600080fd5b8735965060208801359550604088013594506060880135613753816135e3565b93506080880135613763816135e3565b925060a088013567ffffffffffffffff81111561377f57600080fd5b61378b8a828b01613694565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156137d7576137d761379e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156138065761380661379e565b604052919050565b600082601f83011261381f57600080fd5b6138276137b4565b80604084018581111561383957600080fd5b845b81811015610aaf57803584526020938401930161383b565b801515811461340857600080fd5b6000806000806000610100868803121561387a57600080fd5b8535613885816135e3565b9450602086810135613896816135e3565b94506138a5886040890161380e565b935087609f8801126138b657600080fd5b6138be6137b4565b8060c089018a8111156138d057600080fd5b60808a015b818110156138f55780356138e881613853565b84529284019284016138d5565b508195506139038b8261380e565b9450505050509295509295909350565b6000806040838503121561392657600080fd5b8235613931816135e3565b946020939093013593505050565b6000806040838503121561395257600080fd5b823561395d816135e3565b915060208381013567ffffffffffffffff8082111561397b57600080fd5b818601915086601f83011261398f57600080fd5b8135818111156139a1576139a161379e565b8060051b91506139b28483016137dd565b81815291830184019184810190898411156139cc57600080fd5b938501935b838510156139ea578435825293850193908501906139d1565b8096505050505050509250929050565b600060208284031215613a0c57600080fd5b8151612e25816135e3565b600181811c90821680613a2b57607f821691505b60208210811415613a4c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602080835260008454613a6681613a17565b80848701526040600180841660008114613a875760018114613a9b57613ac9565b60ff198516838a0152606089019550613ac9565b896000528660002060005b85811015613ac15781548b8201860152908301908801613aa6565b8a0184019650505b509398975050505050505050565b634e487b7160e01b600052603260045260246000fd5b805169ffffffffffffffffffff81168114613b0757600080fd5b919050565b600080600080600060a08688031215613b2457600080fd5b613b2d86613aed565b9450602086015193506040860151925060608601519150613b5060808701613aed565b90509295509295909350565b600060208284031215613b6e57600080fd5b815160ff81168114612e2557600080fd5b600060208284031215613b9157600080fd5b8151612e2581613853565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613bc657613bc6613b9c565b5060010190565b600181815b80851115613c08578160001904821115613bee57613bee613b9c565b80851615613bfb57918102915b93841c9390800290613bd2565b509250929050565b600082613c1f57506001610879565b81613c2c57506000610879565b8160018114613c425760028114613c4c57613c68565b6001915050610879565b60ff841115613c5d57613c5d613b9c565b50506001821b610879565b5060208310610133831016604e8410600b8410161715613c8b575081810a610879565b613c958383613bcd565b8060001904821115613ca957613ca9613b9c565b029392505050565b6000612e2560ff841683613c10565b6000816000190483118215151615613cda57613cda613b9c565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613d0457613d04613cdf565b500490565b600082821015613d1b57613d1b613b9c565b500390565b600065ffffffffffff808316818516808303821115613d4157613d41613b9c565b01949350505050565b60008219821115613d5d57613d5d613b9c565b500190565b600067ffffffffffffffff808316818516808303821115613d4157613d41613b9c565b600060ff821660ff84168060ff03821115613da257613da2613b9c565b019392505050565b600082613db957613db9613cdf565b60001983147f800000000000000000000000000000000000000000000000000000000000000083141615613def57613def613b9c565b500590565b600065ffffffffffff83811690831681811015613e1357613e13613b9c565b039392505050565b600060208284031215613e2d57600080fd5b5051919050565b60008060408385031215613e4757600080fd5b505080516020909101519092909150565b60005b83811015613e73578181015183820152602001613e5b565b838111156128ad5750506000910152565b60008251613e96818460208701613e58565b9190910192915050565b600060ff821660ff841680821015613eba57613eba613b9c565b90039392505050565b6000612e258383613c10565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615613f1057613f10613b9c565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615613f4b57613f4b613b9c565b60008712925087820587128484161615613f6757613f67613b9c565b87850587128184161615613f7d57613f7d613b9c565b505050929093029392505050565b60006bffffffffffffffffffffffff19808760601b168352808660601b16601484015250602884516020613fc482848701838a01613e58565b818501915060008654613fd681613a17565b60018281168015613fee576001811461400357614033565b60ff1984168888015287838801019450614033565b8a6000528560002060005b848110156140295781548982018b015290830190870161400e565b5050878388010194505b50929c9b505050505050505050505050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122021fb9bebd4c3a1180a9c84b6e403601f61d2a40e355bc3e10c32d2a908b7cad364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063ae1042651161010f578063c9b67af5116100a2578063e0b117ff11610071578063e0b117ff14610542578063e3684e391461059b578063e481b265146105c0578063f3191a46146105d357600080fd5b8063c9b67af5146104f1578063d2390aa2146104f9578063d6db4df81461050c578063d936547e1461051f57600080fd5b8063bf7e214f116100de578063bf7e214f1461042a578063c0680e2014610455578063c0aa0e8a14610468578063c3e0fb1c146104a157600080fd5b8063ae1042651461037d578063b1283e7714610390578063b6d8eee0146103ee578063be399be51461041757600080fd5b80636a6c575d116101875780639a1e46d5116101565780639a1e46d51461033c5780639b19251a1461034f5780639c76978714610362578063a42206101461036a57600080fd5b80636a6c575d146102ce5780637a9e5e4b146102e15780637ed6c926146102f4578063964561c41461030757600080fd5b806327507458116101c357806327507458146102705780633d18b91214610293578063649144391461029b578063654e51e7146102bb57600080fd5b80630700037d146101f55780630aebeb4e1461022857806316345f181461023d5780631885f58014610267575b600080fd5b6102156102033660046135f8565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61023b610236366004613615565b6105dc565b005b61025061024b3660046135f8565b610727565b6040805192835260ff90911660208301520161021f565b61021560025481565b61028361027e366004613615565b610812565b604051901515815260200161021f565b61023b61087f565b6102ae6102a93660046135f8565b61092b565b60405161021f919061362e565b61023b6102c9366004613672565b610aba565b6102156102dc366004613672565b610b71565b61023b6102ef3660046135f8565b610be8565b61023b6103023660046136d6565b610ceb565b61031a610315366004613718565b610da8565b604080518251815260208084015190820152918101519082015260600161021f565b61021561034a366004613861565b61117a565b61023b61035d3660046135f8565b61160a565b61023b6116df565b610215610378366004613913565b611980565b61021561038b366004613615565b611d01565b6103a361039e366004613615565b611d98565b604080519788526001600160a01b0396871660208901529490951693860193909352901515606085015267ffffffffffffffff16608084015260a083015260c082015260e00161021f565b6102156103fc3660046135f8565b6001600160a01b031660009081526006602052604090205490565b6102156104253660046135f8565b611e16565b60015461043d906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b610215610463366004613913565b611e25565b61047b610476366004613615565b611e56565b60408051931515845265ffffffffffff928316602085015291169082015260600161021f565b6104b46104af366004613913565b611e96565b6040805196875265ffffffffffff9586166020880152938516938601939093529083166060850152151560808401521660a082015260c00161021f565b6102ae611fc3565b61021561050736600461393f565b6120ac565b61023b61051a366004613913565b612443565b61028361052d3660046135f8565b60056020526000908152604090205460ff1681565b610555610550366004613913565b612512565b6040805197885265ffffffffffff96871660208901529486169487019490945291841660608601528316608085015290911660a0830152151560c082015260e00161021f565b6105ae6105a9366004613615565b612597565b60405160ff909116815260200161021f565b6102ae6105ce3660046135f8565b6125bb565b61021560035481565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065391906139fa565b6001600160a01b0316336001600160a01b0316146000906106905760405162461bcd60e51b81526004016106879190613a52565b60405180910390fd5b5042600c82815481106106a5576106a5613ad7565b9060005260206000200160000160076101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600b82815481106106e9576106e9613ad7565b6000918252602082206005909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b6000806000806000806000876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190613b0c565b945094509450945094506000886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190613b5c565b9499949850939650505050505050565b6000600b828154811061082757610827613ad7565b906000526020600020906005020160000154600014158015610879575042600c838154811061085857610858613ad7565b600091825260209091200154670100000000000000900465ffffffffffff16115b92915050565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109279190613b7f565b5050565b6001600160a01b0381166000908152600e6020908152604080832080548251818502810185019093528083526060949383018282801561098a57602002820191906000526020600020905b815481526020019060010190808311610976575b50505050509050600080600090505b82518110156109e9576109c48382815181106109b7576109b7613ad7565b6020026020010151610812565b156109d757816109d381613bb2565b9250505b806109e181613bb2565b915050610999565b5060008167ffffffffffffffff811115610a0557610a0561379e565b604051908082528060200260200182016040528015610a2e578160200160208202803683370190505b5090506000805b8451811015610aaf57610a538582815181106109b7576109b7613ad7565b15610a9d57848181518110610a6a57610a6a613ad7565b6020026020010151838381518110610a8457610a84613ad7565b602090810291909101015281610a9981613bb2565b9250505b80610aa781613bb2565b915050610a35565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3191906139fa565b6001600160a01b0316336001600160a01b031614600090610b655760405162461bcd60e51b81526004016106879190613a52565b50600391909155600255565b600080600d8381548110610b8757610b87613ad7565b6000918252602091829020604080519384019052015460ff16808252909150610bb190600a613cb1565b610bba84611d01565b610bcc86670de0b6b3a7640000613cc0565b610bd69190613cf5565b610be09190613cf5565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906139fa565b6001600160a01b0316336001600160a01b031614600090610c935760405162461bcd60e51b81526004016106879190613a52565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6291906139fa565b6001600160a01b0316336001600160a01b031614600090610d965760405162461bcd60e51b81526004016106879190613a52565b50610da3600a838361354a565b505050565b610dcc60405180606001604052806000815260200160008152602001600081525090565b610de660405180602001604052806000815250848461280c565b6000600b8981548110610dfb57610dfb613ad7565b906000526020600020906005020190506000600c8a81548110610e2057610e20613ad7565b600091825260209182902060408051606081018252919092015460ff81161515825265ffffffffffff61010082048116948301949094526701000000000000009004831691810182905292504291821610610ebd5760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606401610687565b6000610ec88c611d01565b905089811115610f1a5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606401610687565b600d8c81548110610f2d57610f2d613ad7565b600091825260209091200154610f479060ff16600a613cb1565b81610f5a8d670de0b6b3a7640000613cc0565b610f649190613cf5565b610f6e9190613cf5565b85526002840154600160a01b900460ff16610f8a578451610f8c565b8a5b84541015610fdc5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a2063617061636974792065786365656465640000006044820152606401610687565b6002840154600160a01b900460ff16610ff6578451610ff8565b8a5b84600001600082825461100b9190613d09565b90915550508354611042576040518c907f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe590600090a25b8251611052578260200151611062565b8183602001516110629190613d20565b65ffffffffffff1660208601526003840180548c9190600090611086908490613d4a565b909155505084516002850180546015906110c49084907501000000000000000000000000000000000000000000900467ffffffffffffffff16613d62565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508b7f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b9618c83604051611125929190918252602082015260400190565b60405180910390a261114589866000015187602001518f8c6000806128b3565b6040860152600954600185015461116b916001600160a01b03918216913391168e612c67565b50505050979650505050505050565b600154604080517f0505c8c900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa1580156111dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120191906139fa565b6001600160a01b0316336001600160a01b0316146000906112355760405162461bcd60e51b81526004016106879190613a52565b506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190613b5c565b60ff169050600b805490509150600b6040518060e00160405280876000600281106112c7576112c7613ad7565b60200201518152602001896001600160a01b03168152602001886001600160a01b031681526020018660006002811061130257611302613ad7565b602002015115158152602001600067ffffffffffffffff168152602001600081526020018760016002811061133957611339613ad7565b60209081029190910151909152825460018082018555600094855282852084516005909302019182558383015182820180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff199091161790556040808601516002850180546060808a015160808b015167ffffffffffffffff167501000000000000000000000000000000000000000000027fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090941695881695909517929092179190911692909217905560a0870151600386015560c090960151600490940193909355825194850183528984015115158552885165ffffffffffff9081168686019081528a8601518216878601908152600c80548087018255908a5297517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c79098018054925191517fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000009093169815157fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000ff169890981761010091841691909102177fffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffff166701000000000000009190921602179094558151808401835260ff8781168252600d8054808501825590885291517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909201805460ff1916929091169190911790558b8416808652600e8452828620805492830181558652948390200186905588820151815190815290517f00000000000000000000000000000000000000000000000000000000000000009093169286927f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f63928290030190a45095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561165d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168191906139fa565b6001600160a01b0316336001600160a01b0316146000906116b55760405162461bcd60e51b81526004016106879190613a52565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611732573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175691906139fa565b6001600160a01b0316336001600160a01b031614806117fc5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906139fa565b6001600160a01b0316336001600160a01b0316145b8061188e5750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187991906139fa565b6001600160a01b0316336001600160a01b0316145b6118da5760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a656400000000000000000000000000000000006044820152606401610687565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195191906139fa565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03828116600090815260076020908152604080832085845290915281205490911633146119f65760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e6400006044820152606401610687565b6001600160a01b0383166000908152600660205260409020805483908110611a2057611a20613ad7565b60009182526020909120600290910201600101546c01000000000000000000000000900465ffffffffffff1615611a995760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d6564000000000000006044820152606401610687565b503360009081526006602052604080822080546001600160a01b038616845291909220805491929184908110611ad157611ad1613ad7565b60009182526020808320845460018181018755958552828520600294850290920180549190940290910190815591840180549290940180547fffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000811665ffffffffffff948516908117835586546601000000000000908190048616026bffffffffffffffffffffffff19909216171780825585546c01000000000000000000000000908190048516027fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff8216811783558654600160901b908190048616027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff9091167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff90921691909117178082558554600160c01b908190049094169093027fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff841681178255945460ff600160f01b91829004161515027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9095167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff909316929092179390931790556001600160a01b0385168152600690915260409020805483908110611cc057611cc0613ad7565b60009182526020822060029091020190815560010180547fff0000000000000000000000000000000000000000000000000000000000000016905592915050565b6000806000611d3e600b8581548110611d1c57611d1c613ad7565b60009182526020909120600260059092020101546001600160a01b0316610727565b915091506000611d80600b8681548110611d5a57611d5a613ad7565b9060005260206000209060050201600401546009846009611d7b9190613d85565b612db9565b90506000611d8e8483613daa565b9695505050505050565b600b8181548110611da857600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294506001600160a01b039182169391811692600160a01b820460ff1692750100000000000000000000000000000000000000000090920467ffffffffffffffff16919087565b600061087982610507846125bb565b600e6020528160005260406000208181548110611e4157600080fd5b90600052602060002001600091509150505481565b600c8181548110611e6657600080fd5b60009182526020909120015460ff8116915065ffffffffffff610100820481169167010000000000000090041683565b6000806000806000806000600660008a6001600160a01b03166001600160a01b031681526020019081526020016000208881548110611ed757611ed7613ad7565b60009182526020918290206040805160e0810182526002909302909101805480845260019091015465ffffffffffff8082169585018690526601000000000000820481169385018490526c01000000000000000000000000820481166060860152600160901b820481166080860152600160c01b82041660a085015260ff600160f01b90910416151560c084015299509197509095509050611f798686613df4565b9350806060015165ffffffffffff166000148015611fa3575042816040015165ffffffffffff1611155b8015611faf5750805115155b92508060a001519150509295509295509295565b60606000805b600b5481101561200157611fdc81610812565b15611fef5781611feb81613bb2565b9250505b80611ff981613bb2565b915050611fc9565b5060008167ffffffffffffffff81111561201d5761201d61379e565b604051908082528060200260200182016040528015612046578160200160208202803683370190505b5090506000805b600b548110156120a35761206081610812565b15612091578083838151811061207857612078613ad7565b60209081029190910101528161208d81613bb2565b9250505b8061209b81613bb2565b91505061204d565b50909392505050565b6000428180805b8551811015612303576000806120e2898985815181106120d5576120d5613ad7565b6020026020010151611e96565b509450505050915080156122ee576001600160a01b038916600090815260066020526040902088518791908a908690811061211f5761211f613ad7565b60200260200101518154811061213757612137613ad7565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555081876121769190613d4a565b6001600160a01b038a1660009081526006602052604090208951919850908990859081106121a6576121a6613ad7565b6020026020010151815481106121be576121be613ad7565b9060005260206000209060020201600101601e9054906101000a900460ff16156122e1576001600160a01b0389166000908152600860205260408120895182908b908790811061221057612210613ad7565b602002602001015181526020019081526020016000205490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3e504098b836040518363ffffffff1660e01b815260040161228b9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce9190613e1b565b506122d98387613d4a565b9550506122ee565b6122eb8285613d4a565b93505b505080806122fb90613bb2565b9150506120b3565b50801561239f5760405163a9059cbb60e01b81526001600160a01b038781166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239d9190613b7f565b505b811561243a5760405163a9059cbb60e01b81526001600160a01b038781166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124389190613b7f565b505b50505092915050565b33600090815260066020526040902080548290811061246457612464613ad7565b600091825260209091206001600290920201015465ffffffffffff166124cc5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e640000000000006044820152606401610687565b33600090815260076020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061252e57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250660100000000000082048116916c010000000000000000000000008104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1687565b600d81815481106125a757600080fd5b60009182526020909120015460ff16905081565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156126925760008481526020908190206040805160e081018252600286029092018054835260019081015465ffffffffffff80821685870152660100000000000082048116938501939093526c01000000000000000000000000810483166060850152600160901b810483166080850152600160c01b810490921660a0840152600160f01b90910460ff16151560c083015290835290920191016125f0565b505050509050600080600090505b8251811015612721578281815181106126bb576126bb613ad7565b60200260200101516060015165ffffffffffff1660001480156126fc57508281815181106126eb576126eb613ad7565b602002602001015160000151600014155b1561270f578161270b81613bb2565b9250505b8061271981613bb2565b9150506126a0565b5060008167ffffffffffffffff81111561273d5761273d61379e565b604051908082528060200260200182016040528015612766578160200160208202803683370190505b5090506000805b8451811015610aaf5784818151811061278857612788613ad7565b60200260200101516060015165ffffffffffff1660001480156127c957508481815181106127b8576127b8613ad7565b602002602001015160000151600014155b156127fa57808383815181106127e1576127e1613ad7565b6020908102919091010152816127f681613bb2565b9250505b8061280481613bb2565b91505061276d565b600061285661281a85612e2c565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e6392505050565b905061286181612e78565b6128ad5760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c65640000006044820152606401610687565b50505050565b6001600160a01b03871660009081526006602090815260408083208054825160e0810184528b815265ffffffffffff4281168287019081528c8216958301958652606083018881528c8316608085019081528b841660a086019081528b151560c0870190815260018089018a55988c52998b209551600288029096019586559251949096018054975191519651925198511515600160f01b027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff998516600160c01b02999099167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff938516600160901b027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff9886166c0100000000000000000000000002989098167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff9386166601000000000000026bffffffffffffffffffffffff19909a16969095169590951797909717169190911793909317929092169190911792909217905590612a478886612f1a565b6009549091506001600160a01b03166340c10f1930612a66848c613d4a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015612ac457600080fd5b505af1158015612ad8573d6000803e3d6000fd5b505050508215612c5b576040517f995846bd00000000000000000000000000000000000000000000000000000000815230600482015260248101899052600160448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063995846bd9060640160408051808303816000875af1158015612b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b959190613e34565b6040517f78f1f7780000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018390529193507f000000000000000000000000000000000000000000000000000000000000000090911691506378f1f77890604401600060405180830381600087803b158015612c1e57600080fd5b505af1158015612c32573d6000803e3d6000fd5b505050506001600160a01b038a1660009081526008602090815260408083208684529091529020555b50979650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691612cf99190613e84565b6000604051808303816000865af19150503d8060008114612d36576040519150601f19603f3d011682016040523d82523d6000602084013e612d3b565b606091505b5091509150818015612d65575080511580612d65575080806020019051810190612d659190613b7f565b612db15760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610687565b505050505050565b60008160ff168360ff161015612df257612dd38383613ea0565b612de19060ff16600a613ec3565b612deb9085613ecf565b9050612e25565b8160ff168360ff161115612e2257612e0a8284613ea0565b612e189060ff16600a613ec3565b612deb9085613daa565b50825b9392505050565b6000303383600a604051602001612e469493929190613f8b565b604051602081830303815290604052805190602001209050919050565b6000612e2582612e7285613148565b90613183565b600154604080517fef81b4d400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ef81b4d49160048083019260209291908290030181865afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff91906139fa565b6001600160a01b0316826001600160a01b0316149050919050565b60008061271060025485612f2e9190613cc0565b612f389190613cf5565b9050600061271060035486612f4d9190613cc0565b612f579190613cf5565b6001600160a01b03851660009081526005602052604090205490915060ff161561306d576001600160a01b03841660009081526004602052604081208054839290612fa3908490613d4a565b9091555050600154604080517f452a9320000000000000000000000000000000000000000000000000000000008152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa15801561300f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303391906139fa565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546130629190613d4a565b909155506131359050565b6130778183613d4a565b600154604080517f452a932000000000000000000000000000000000000000000000000000000000815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310091906139fa565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461312f9190613d4a565b90915550505b61313f8183613d4a565b95945050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01612e46565b600080600061319285856131a7565b9150915061319f81613217565b509392505050565b6000808251604114156131de5760208301516040840151606085015160001a6131d28782858561340b565b94509450505050613210565b82516040141561320857602083015160408401516131fd8683836134f8565b935093505050613210565b506000905060025b9250929050565b600081600481111561322b5761322b614045565b14156132345750565b600181600481111561324857613248614045565b14156132965760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610687565b60028160048111156132aa576132aa614045565b14156132f85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610687565b600381600481111561330c5761330c614045565b14156133805760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610687565b600481600481111561339457613394614045565b14156134085760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610687565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561344257506000905060036134ef565b8460ff16601b1415801561345a57508460ff16601c14155b1561346b57506000905060046134ef565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156134bf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166134e8576000600192509250506134ef565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161352e60ff86901c601b613d4a565b905061353c8782888561340b565b935093505050935093915050565b82805461355690613a17565b90600052602060002090601f01602090048101928261357857600085556135be565b82601f106135915782800160ff198235161785556135be565b828001600101855582156135be579182015b828111156135be5782358255916020019190600101906135a3565b506135ca9291506135ce565b5090565b5b808211156135ca57600081556001016135cf565b6001600160a01b038116811461340857600080fd5b60006020828403121561360a57600080fd5b8135612e25816135e3565b60006020828403121561362757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156136665783518352928401929184019160010161364a565b50909695505050505050565b6000806040838503121561368557600080fd5b50508035926020909101359150565b60008083601f8401126136a657600080fd5b50813567ffffffffffffffff8111156136be57600080fd5b60208301915083602082850101111561321057600080fd5b600080602083850312156136e957600080fd5b823567ffffffffffffffff81111561370057600080fd5b61370c85828601613694565b90969095509350505050565b600080600080600080600060c0888a03121561373357600080fd5b8735965060208801359550604088013594506060880135613753816135e3565b93506080880135613763816135e3565b925060a088013567ffffffffffffffff81111561377f57600080fd5b61378b8a828b01613694565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156137d7576137d761379e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156138065761380661379e565b604052919050565b600082601f83011261381f57600080fd5b6138276137b4565b80604084018581111561383957600080fd5b845b81811015610aaf57803584526020938401930161383b565b801515811461340857600080fd5b6000806000806000610100868803121561387a57600080fd5b8535613885816135e3565b9450602086810135613896816135e3565b94506138a5886040890161380e565b935087609f8801126138b657600080fd5b6138be6137b4565b8060c089018a8111156138d057600080fd5b60808a015b818110156138f55780356138e881613853565b84529284019284016138d5565b508195506139038b8261380e565b9450505050509295509295909350565b6000806040838503121561392657600080fd5b8235613931816135e3565b946020939093013593505050565b6000806040838503121561395257600080fd5b823561395d816135e3565b915060208381013567ffffffffffffffff8082111561397b57600080fd5b818601915086601f83011261398f57600080fd5b8135818111156139a1576139a161379e565b8060051b91506139b28483016137dd565b81815291830184019184810190898411156139cc57600080fd5b938501935b838510156139ea578435825293850193908501906139d1565b8096505050505050509250929050565b600060208284031215613a0c57600080fd5b8151612e25816135e3565b600181811c90821680613a2b57607f821691505b60208210811415613a4c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602080835260008454613a6681613a17565b80848701526040600180841660008114613a875760018114613a9b57613ac9565b60ff198516838a0152606089019550613ac9565b896000528660002060005b85811015613ac15781548b8201860152908301908801613aa6565b8a0184019650505b509398975050505050505050565b634e487b7160e01b600052603260045260246000fd5b805169ffffffffffffffffffff81168114613b0757600080fd5b919050565b600080600080600060a08688031215613b2457600080fd5b613b2d86613aed565b9450602086015193506040860151925060608601519150613b5060808701613aed565b90509295509295909350565b600060208284031215613b6e57600080fd5b815160ff81168114612e2557600080fd5b600060208284031215613b9157600080fd5b8151612e2581613853565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613bc657613bc6613b9c565b5060010190565b600181815b80851115613c08578160001904821115613bee57613bee613b9c565b80851615613bfb57918102915b93841c9390800290613bd2565b509250929050565b600082613c1f57506001610879565b81613c2c57506000610879565b8160018114613c425760028114613c4c57613c68565b6001915050610879565b60ff841115613c5d57613c5d613b9c565b50506001821b610879565b5060208310610133831016604e8410600b8410161715613c8b575081810a610879565b613c958383613bcd565b8060001904821115613ca957613ca9613b9c565b029392505050565b6000612e2560ff841683613c10565b6000816000190483118215151615613cda57613cda613b9c565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613d0457613d04613cdf565b500490565b600082821015613d1b57613d1b613b9c565b500390565b600065ffffffffffff808316818516808303821115613d4157613d41613b9c565b01949350505050565b60008219821115613d5d57613d5d613b9c565b500190565b600067ffffffffffffffff808316818516808303821115613d4157613d41613b9c565b600060ff821660ff84168060ff03821115613da257613da2613b9c565b019392505050565b600082613db957613db9613cdf565b60001983147f800000000000000000000000000000000000000000000000000000000000000083141615613def57613def613b9c565b500590565b600065ffffffffffff83811690831681811015613e1357613e13613b9c565b039392505050565b600060208284031215613e2d57600080fd5b5051919050565b60008060408385031215613e4757600080fd5b505080516020909101519092909150565b60005b83811015613e73578181015183820152602001613e5b565b838111156128ad5750506000910152565b60008251613e96818460208701613e58565b9190910192915050565b600060ff821660ff841680821015613eba57613eba613b9c565b90039392505050565b6000612e258383613c10565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615613f1057613f10613b9c565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615613f4b57613f4b613b9c565b60008712925087820587128484161615613f6757613f67613b9c565b87850587128184161615613f7d57613f7d613b9c565b505050929093029392505050565b60006bffffffffffffffffffffffff19808760601b168352808660601b16601484015250602884516020613fc482848701838a01613e58565b818501915060008654613fd681613a17565b60018281168015613fee576001811461400357614033565b60ff1984168888015287838801019450614033565b8a6000528560002060005b848110156140295781548982018b015290830190870161400e565b5050878388010194505b50929c9b505050505050505050505050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122021fb9bebd4c3a1180a9c84b6e403601f61d2a40e355bc3e10c32d2a908b7cad364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculatePrice(uint256)": {
        "details": "get the latest price for the market's quote token in USD                          (`priceConsumerPrice`, with decimals `priceConsumerDecimals`)                          then `scalePrice` to scale the fixed bond price to THEO decimals when calculating `price`.                          finally, calculate `price` as quote tokens per THEO, in THEO decimals (9)",
        "params": {
          "_id": "market ID"
        },
        "returns": {
          "_0": "uint256 price of THEO in quote token terms, in THEO decimals (9)"
        }
      },
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,address,uint256[2],bool[2],uint256[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_market": "[capacity (in THEO or quote), fixed bond price (9 decimals) USD per THEO]",
          "_priceFeed": "address of the price consumer, to return the USD value for the quote token when deposits are made",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "deposit(uint256,uint256,uint256,address,address,bytes)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "depositInfo": "DepositInfo"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "1e18 = theo decimals (9) + fixed bond price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of THEO to be paid in THEO decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "created_": "        the time the note was created",
          "expiry_": "         the time the note is redeemable",
          "matured_": "        if the payout can be redeemed",
          "payout_": "         the payout due, in sTHEO",
          "timeRemaining_": "  the time remaining until the note is matured"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[])": {
        "details": "adapted from Olympus V2. Olympus V2 either sends payout as gOHM                     or calls an `unwrap` function on the staking contract                     to convert the payout from gOHM into sOHM and then send as sOHM.                     This current contract sends payout as sTHEO.",
        "params": {
          "_indexes": "the note indexes to redeem",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in sTHEO"
        }
      },
      "redeemAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in sTHEO"
        }
      }
    },
    "title": "Theopetra Whitelist Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculatePrice(uint256)": {
        "notice": "calculate the price of THEO in quote token terms; i.e. the number of quote tokens per THEO"
      },
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,address,uint256[2],bool[2],uint256[2])": {
        "notice": "creates a new market type"
      },
      "deposit(uint256,uint256,uint256,address,address,bytes)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "getLatestPrice(address)": {
        "notice": "Returns the latest price"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12978,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 12981,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITheopetraAuthority)2802"
      },
      {
        "astId": 12019,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "daoReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12021,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "refReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 12025,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12029,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12193,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Note)2420_storage)dyn_storage)"
      },
      {
        "astId": 12199,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 12205,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "noteForClaim",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 12214,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ITreasury)2912"
      },
      {
        "astId": 12877,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "_secret",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 11285,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Market)2931_storage)dyn_storage"
      },
      {
        "astId": 11289,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Terms)2938_storage)dyn_storage"
      },
      {
        "astId": 11293,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Metadata)2941_storage)dyn_storage"
      },
      {
        "astId": 11298,
        "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)2931_storage)dyn_storage": {
        "base": "t_struct(Market)2931_storage",
        "encoding": "dynamic_array",
        "label": "struct IWhitelistBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)2941_storage)dyn_storage": {
        "base": "t_struct(Metadata)2941_storage",
        "encoding": "dynamic_array",
        "label": "struct IWhitelistBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)2420_storage)dyn_storage": {
        "base": "t_struct(Note)2420_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)2938_storage)dyn_storage": {
        "base": "t_struct(Terms)2938_storage",
        "encoding": "dynamic_array",
        "label": "struct IWhitelistBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2303": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITheopetraAuthority)2802": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)2912": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)2420_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)2420_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Market)2931_storage": {
        "encoding": "inplace",
        "label": "struct IWhitelistBondDepository.Market",
        "members": [
          {
            "astId": 2917,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2920,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2303"
          },
          {
            "astId": 2922,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "priceFeed",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2924,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2926,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "sold",
            "offset": 21,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 2928,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2930,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "usdPricePerTHEO",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Metadata)2941_storage": {
        "encoding": "inplace",
        "label": "struct IWhitelistBondDepository.Metadata",
        "members": [
          {
            "astId": 2940,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "quoteDecimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)2420_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 2407,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2409,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2411,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2413,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2415,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2417,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "discount",
            "offset": 24,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2419,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "autoStake",
            "offset": 30,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)2938_storage": {
        "encoding": "inplace",
        "label": "struct IWhitelistBondDepository.Terms",
        "members": [
          {
            "astId": 2933,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2935,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "vesting",
            "offset": 1,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2937,
            "contract": "src/Theopetra/WhitelistBondDepository.sol:WhitelistTheopetraBondDepository",
            "label": "conclusion",
            "offset": 7,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}