{
  "address": "0x02fd7CFFaE593132036290Ed09894FA6DBf3B725",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_THEO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sTHEO",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstEpochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstEpochTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingTerm",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "THEO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basis",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "claimAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "bands",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "penalties",
          "type": "uint256[]"
        }
      ],
      "name": "definePenalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distribute",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "forfeit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getClaimsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTimePercentComplete",
          "type": "uint256"
        }
      ],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "giveLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "unRetrieved",
          "type": "bool"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isUnRedeemed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isUnRetrieved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushClaimForBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "returnLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "rewardsFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentRewards_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sTHEO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bondDepo",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "name": "setBondDepo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TheopetraStaking.CONTRACTS",
          "name": "_contract",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_warmupPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWarmup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_claim",
          "type": "bool"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gonsInWarmup",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "warmupExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gonsRemaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyInWarmup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_trigger",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "warmupContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "warmupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd92ae842107874d8d26b7c8120b7d8226d6fcb76559f450d727946fa7c5ddc70",
  "receipt": {
    "to": null,
    "from": "0x0a4B56B375aEAfB5A02ACaeEc5Ca0F6a6efb0025",
    "contractAddress": "0x02fd7CFFaE593132036290Ed09894FA6DBf3B725",
    "transactionIndex": 2,
    "gasUsed": "3995585",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000008000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000400000000080000000000000000000000000000000000000000000000008000000000000000000000040000000000000000000",
    "blockHash": "0x14422244d94720b8ce298c3e2ff50b0505321b43c41250678e7b7a8cbd11cab0",
    "transactionHash": "0xd92ae842107874d8d26b7c8120b7d8226d6fcb76559f450d727946fa7c5ddc70",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10606257,
        "transactionHash": "0xd92ae842107874d8d26b7c8120b7d8226d6fcb76559f450d727946fa7c5ddc70",
        "address": "0x02fd7CFFaE593132036290Ed09894FA6DBf3B725",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000bcdf034ce6624a817c1bfeffbde8691443e5fdbb"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x14422244d94720b8ce298c3e2ff50b0505321b43c41250678e7b7a8cbd11cab0"
      }
    ],
    "blockNumber": 10606257,
    "cumulativeGasUsed": "4664366",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1A2EA28399A2e4f8f3EEfeA5f41770B4C61fE643",
    "0x2152220456Ba96d24Ac9873B1A71ad414CA97e84",
    28800,
    "1",
    1651527494,
    31536000,
    "0xBcdF034cE6624A817c1BfEffBDE8691443e5fDbB",
    "0x6640C3FD53e4Cf446B4139f478A199147d663a44"
  ],
  "numDeployments": 1,
  "solcInputHash": "446a1be813bfb9f78647a023efb0da17",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_THEO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sTHEO\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTerm\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"THEO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bands\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"penalties\",\"type\":\"uint256[]\"}],\"name\":\"definePenalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"forfeit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTimePercentComplete\",\"type\":\"uint256\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unRetrieved\",\"type\":\"bool\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isUnRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isUnRetrieved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushClaimForBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"rewardsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRewards_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sTHEO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondDepo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setBondDepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TheopetraStaking.CONTRACTS\",\"name\":\"_contract\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_warmupPeriod\",\"type\":\"uint256\"}],\"name\":\"setWarmup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gonsInWarmup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"warmupExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gonsRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyInWarmup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"basis()\":{\"returns\":{\"_0\":\"address     the address of the staking token\"}},\"claim(address,uint256[])\":{\"details\":\"After a claim has been retrieved (and a subsequent call to `isUnRetrieved` returns false), the claim cannot be re-retrieved; gonsRemaining is therefore only set once by this method for each Claim\",\"params\":{\"_indexes\":\"uint256[]      indexes of the sTHEO to retrieve\",\"_recipient\":\"address\"},\"returns\":{\"amount_\":\"               The sum total amount of sTHEO sent\"}},\"claimAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in claim() to save gas\",\"params\":{\"_recipient\":\"address. The recipient to retrieve sTHEO from all claims for\"},\"returns\":{\"_0\":\"sum of claim amounts sent, in sTHEO\"}},\"contractBalance()\":{\"returns\":{\"_0\":\"uint\"}},\"giveLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"index()\":{\"returns\":{\"_0\":\"uint\"}},\"indexesFor(address,bool)\":{\"params\":{\"_user\":\"the user to query claims for\",\"unRetrieved\":\"bool. If true, return indexes of all un-claimed claims from warmup, else return indexes of all claims with un-redeemed sTheo\"},\"returns\":{\"_0\":\"indexes of un-retrieved claims, or of un-redeemed claims, for the user\"}},\"isUnRedeemed(address,uint256)\":{\"params\":{\"_index\":\"the index of the claim\",\"_user\":\"the user to query claims for\"},\"returns\":{\"_0\":\"bool        true if the total sTHEO on the claim has not yet been redeemed for THEO\"}},\"isUnRetrieved(address,uint256)\":{\"params\":{\"_index\":\"the index of the claim\",\"_user\":\"the user to query claims for\"},\"returns\":{\"_0\":\"bool        true if the sTHEO has not yet been retrieved for the claim\"}},\"pullClaim(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the claim transfer\",\"_index\":\"the index of the claim to transfer (in the sender's array)\"}},\"pushClaim(address,uint256)\":{\"params\":{\"_index\":\"index of claim to approve transfer for\",\"_to\":\"address to approve claim transfer for\"}},\"pushClaimForBond(address,uint256)\":{\"params\":{\"_index\":\"the index of the claim to transfer (in the sender's array)\",\"_to\":\"the address to push the claim to (must be pre-approved for transfer via `pushClaim`)\"}},\"rebase()\":{\"returns\":{\"_0\":\"uint256\"}},\"returnLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"rewardsFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the claim in the user's array\",\"_user\":\"the user that the claim belongs to\"},\"returns\":{\"currentRewards_\":\" the current total rewards expected for a claim (valid only for claims out of warmup), calculated as: (sTHEO remaining + slashedRewards) - deposit amount note that currentRewards_ does not include any potential bounty or additional sTheo balance that may be applied if rebasing when unstaking\"}},\"setBondDepo(address,bool)\":{\"details\":\"see also `pushClaimForBond`\",\"params\":{\"_bondDepo\":\"address of the bond depo\"}},\"setContract(uint8,address)\":{\"params\":{\"_contract\":\"address\"}},\"setWarmup(uint256)\":{\"params\":{\"_warmupPeriod\":\"uint\"}},\"stake(address,uint256,bool)\":{\"details\":\"if warmupPeriod is 0 and _claim is true, funds are sent immediately, and warmupExpiry is 0: this is so that the staker cannot retrieve sTHEO from warmup using the stored Claim (see also `claim`). If warmupPeriod is not 0, or if _claim is false, then funds go into warmup (sTheo is not sent)\",\"params\":{\"_amount\":\"uint\",\"_claim\":\"bool\"},\"returns\":{\"_0\":\"uint256 _amount staked\",\"_index\":\"uint256 the index of the claim added for the recipient in the recipient's stakingInfo\"}},\"unstake(address,uint256[],bool,uint256[])\":{\"details\":\"if `stakingExpiry` has not yet passed, Determine the penalty for removing early.         `percentageComplete` is the percentage of time that the stake has completed (versus the `stakingTerm`), expressed with 4 decimals.         note that For unstaking before 100% of staking term, only the principle deposit -- less a penalty -- is returned. In this case, the full claim must be redeemed         and gonsRemaining becomes zero.         note that For unstaking at or beyond 100% of the staking term, a part-redeem can be made: that is, a user may redeem less than 100% of the total amount available to redeem         (as represented by gonsRemaining), during a call to `unstake`         note that The penalty is added (after conversion to gons) to `slasheGons` and subtracted from the amount to return         gonsRemaining keeps track of the amount of sTheo (as gons) that can be redeemed for a Claim         note that When unstaking from the locked tranche (stakingTerm > 0) after the stake reaches maturity,         the Stake becomes eligible to claim against bonus pool rewards (tracked in `slashedGons`; see also `getSlashedRewards`)\",\"params\":{\"_amounts\":\"uint\",\"_indexes\":\"uint256[]\",\"_to\":\"address\",\"_trigger\":\"bool\"},\"returns\":{\"amount_\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"basis()\":{\"notice\":\"return the staking token that the tranche is based on\"},\"claim(address,uint256[])\":{\"notice\":\"retrieve sTHEO from warmup\"},\"claimAll(address)\":{\"notice\":\"claim all retrievable (from warmup) claims for user\"},\"contractBalance()\":{\"notice\":\"returns contract THEO holdings, including bonuses provided\"},\"forfeit(uint256)\":{\"notice\":\"forfeit sTHEO in warmup and retrieve THEO\"},\"giveLockBonus(uint256)\":{\"notice\":\"provide bonus to locked staking contract\"},\"index()\":{\"notice\":\"returns the sTHEO index, which tracks rebase growth\"},\"indexesFor(address,bool)\":{\"notice\":\"all un-retrieved claims (sTHEO available to retrieve from warmup), or all un-redeemed claims (sTHEO retrieved but yet to be redeemed for THEO) for a user\"},\"isUnRedeemed(address,uint256)\":{\"notice\":\"determine whether a claim has a (non-zero) sTHEO balance remaining that can be redeemed for THEO                     if the claim is still in warmup, this method will return false (as no sTheo can yet be redeemed against the claim)\"},\"isUnRetrieved(address,uint256)\":{\"notice\":\"determine whether sTHEO has been retrieved (via `claim`) for a Claim\"},\"pullClaim(address,uint256)\":{\"notice\":\"transfer a claim that has been approved by an address\"},\"pushClaim(address,uint256)\":{\"notice\":\"approve an address to transfer a claim\"},\"pushClaimForBond(address,uint256)\":{\"notice\":\"transfer a claim that has been approved by an address\"},\"rebase()\":{\"notice\":\"trigger rebase if epoch over\"},\"returnLockBonus(uint256)\":{\"notice\":\"reclaim bonus from locked staking contract\"},\"rewardsFor(address,uint256)\":{\"notice\":\"return the current expected rewards for a claim\"},\"setBondDepo(address,bool)\":{\"notice\":\"set the address of a bond depo to allow it to push claims to users when redeeming bonds\"},\"setContract(uint8,address)\":{\"notice\":\"sets the contract address for LP staking\"},\"setWarmup(uint256)\":{\"notice\":\"set warmup period for new stakers\"},\"stake(address,uint256,bool)\":{\"notice\":\"stake THEO to enter warmup\"},\"supplyInWarmup()\":{\"notice\":\"total supply in warmup\"},\"toggleLock()\":{\"notice\":\"prevent new deposits or claims to/from external address (protection from malicious activity)\"},\"unstake(address,uint256[],bool,uint256[])\":{\"notice\":\"redeem sTHEO for THEO from un-redeemed claims\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/Staking.sol\":\"TheopetraStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/Interfaces/IBondCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.7.5 <=0.8.10;\\n\\ninterface IBondCalculator {\\n    function valuation(address tokenIn, uint256 amount_) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x69bc452b443bad25ea668f74c2dffcdfc4bb24147cec627294d1f7ac10170c64\",\"license\":\"AGPL-1.0\"},\"src/Interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5 <=0.8.10;\\n\\ninterface IDistributor {\\n    function distribute() external returns (bool);\\n\\n    function bounty() external view returns (uint256);\\n\\n    function retrieveBounty() external returns (uint256);\\n\\n    function nextRewardAt(uint256 _rate, address _recipient) external view returns (uint256);\\n\\n    function nextRewardFor(address _recipient) external view returns (uint256);\\n\\n    function nextRewardRate(uint256 _index) external view returns (uint256);\\n\\n    function setBounty(uint256 _bounty) external;\\n\\n    function addRecipient(\\n        address _recipient,\\n        uint256 _startRate,\\n        int256 _drs,\\n        int256 _dys,\\n        bool _locked\\n    ) external;\\n\\n    function removeRecipient(uint256 _index) external;\\n\\n    function setDiscountRateStaking(uint256 _index, int256 _drs) external;\\n\\n    function setDiscountRateYield(uint256 _index, int256 _dys) external;\\n\\n    function setStaking(address _addr) external;\\n}\\n\",\"keccak256\":\"0x8e9f858aeba45f84955ba37b76b23ade82491992f26e352e3f4ee9a7d1174d17\",\"license\":\"AGPL-3.0-or-later\"},\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IStakedTHEOToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IStakedTHEOToken is IERC20 {\\n    function rebase(uint256 theoProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view override returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3143d844fbf32d8dc30ab9e1ea6bcc30825a74cd5586f185be87ce88a9887ebb\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITHEO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ITHEO is IERC20 {\\n    function mint(address account_, uint256 amount_) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0x3045a1b33e73bf98e16fb64fb36e74a9cf282f89f32277826d37a8bd102f2207\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITheopetraAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event ManagerPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event SignerPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function whitelistSigner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb2878b057ac95bafe9f359c26c4e7b470dcd6d00df5797f992a576d79182b287\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IBondCalculator.sol\\\";\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function tokenPerformanceUpdate() external;\\n\\n    function baseSupply() external view returns (uint256);\\n\\n    function deltaTokenPrice() external view returns (int256);\\n\\n    function deltaTreasuryYield() external view returns (int256);\\n\\n    function getTheoBondingCalculator() external view returns (IBondCalculator);\\n\\n    function setTheoBondingCalculator(address _theoBondingCalculator) external;\\n}\\n\",\"keccak256\":\"0x10a5c7e77b1e79eb7cf341bbbaf772b1f64f452cbf525d9cb7cf9ef44c04f71f\",\"license\":\"AGPL-3.0\"},\"src/Libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport { IERC20 } from \\\"../Interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{ value: amount }(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbba364b239a1a473ccd351490d3aff53f31369c461512837274a476027b35784\",\"license\":\"AGPL-3.0-only\"},\"src/Libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function percentageAmount(uint256 total_, uint8 percentage_) internal pure returns (uint256 percentAmount_) {\\n        return div(mul(total_, percentage_), 1000);\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function substractPercentage(uint256 total_, uint8 percentageToSub_) internal pure returns (uint256 result_) {\\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\\n    }\\n\\n    function percentageOfTotal(uint256 part_, uint256 total_) internal pure returns (uint256 percent_) {\\n        return div(mul(part_, 100), total_);\\n    }\\n\\n    /**\\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function quadraticPricing(uint256 payment_, uint256 multiplier_) internal pure returns (uint256) {\\n        return sqrrt(mul(multiplier_, payment_));\\n    }\\n\\n    function bondingCurve(uint256 supply_, uint256 multiplier_) internal pure returns (uint256) {\\n        return mul(multiplier_, supply_);\\n    }\\n}\\n\",\"keccak256\":\"0xc6ed927b09d3135cf05c030db1f6ff0816a8aa7d303c52c34e43a5ba03a19e78\",\"license\":\"AGPL-3.0-or-later\"},\"src/Theopetra/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\nimport \\\"../Types/TheopetraAccessControlled.sol\\\";\\nimport \\\"../Libraries/SafeMath.sol\\\";\\nimport \\\"../Libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../Interfaces/IDistributor.sol\\\";\\nimport \\\"../Interfaces/IStakedTHEOToken.sol\\\";\\nimport \\\"../Interfaces/ITHEO.sol\\\";\\nimport \\\"../Interfaces/ITreasury.sol\\\";\\n\\ncontract TheopetraStaking is TheopetraAccessControlled {\\n    using SafeMath for *;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IStakedTHEOToken;\\n    using SafeERC20 for ITHEO;\\n\\n    /* ====== VARIABLES ====== */\\n\\n    Epoch public epoch;\\n\\n    address public immutable THEO;\\n    address public immutable sTHEO;\\n    address public immutable treasury;\\n    uint256 public immutable stakingTerm;\\n\\n    address public distributor;\\n\\n    address public locker;\\n    uint256 public totalBonus;\\n\\n    address public warmupContract;\\n    uint256 public warmupPeriod;\\n\\n    uint256 private gonsInWarmup;\\n    uint256 private slashedGons;\\n\\n    mapping(address => Claim[]) public stakingInfo;\\n    mapping(address => bool) private isExternalLocked;\\n    mapping(address => mapping(uint256 => address)) private claimTransfers; // change claim ownership\\n    mapping(uint256 => uint256) penaltyBands;\\n    mapping(address => bool) private bondDepos;\\n\\n    /* ====== STRUCTS ====== */\\n\\n    struct Epoch {\\n        uint256 length;\\n        uint256 number;\\n        uint256 end;\\n        uint256 distribute;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gonsInWarmup;\\n        uint256 warmupExpiry;\\n        uint256 stakingExpiry;\\n        uint256 gonsRemaining;\\n    }\\n\\n    struct UnstakeAmounts {\\n        uint256 _amountSingle;\\n        uint256 _gonsRemaining;\\n    }\\n\\n    constructor(\\n        address _THEO,\\n        address _sTHEO,\\n        uint256 _epochLength,\\n        uint256 _firstEpochNumber,\\n        uint256 _firstEpochTime,\\n        uint256 _stakingTerm,\\n        address _authority,\\n        address _treasury\\n    ) TheopetraAccessControlled(ITheopetraAuthority(_authority)) {\\n        uint256[] memory bands = new uint256[](20);\\n        uint256[] memory penalties = new uint256[](20);\\n\\n        for (uint256 i = 1; i < 21; i++) {\\n            bands[i - 1] = i;\\n            penalties[i - 1] = 21 - i;\\n        }\\n\\n        _definePenalties(bands, penalties);\\n\\n        require(_THEO != address(0), \\\"Invalid address\\\");\\n        THEO = _THEO;\\n        require(_sTHEO != address(0), \\\"Invalid address\\\");\\n        sTHEO = _sTHEO;\\n        stakingTerm = _stakingTerm;\\n        require(_treasury != address(0), \\\"Invalid address\\\");\\n        treasury = _treasury;\\n\\n        epoch = Epoch({ length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0 });\\n    }\\n\\n    /**\\n        @notice stake THEO to enter warmup\\n        @dev    if warmupPeriod is 0 and _claim is true, funds are sent immediately, and warmupExpiry is 0:\\n                this is so that the staker cannot retrieve sTHEO from warmup using the stored\\n                Claim (see also `claim`). If warmupPeriod is not 0, or if _claim is false, then funds go into warmup (sTheo is not sent)\\n        @param _amount uint\\n        @param _claim bool\\n        @return uint256 _amount staked\\n        @return _index uint256 the index of the claim added for the recipient in the recipient's stakingInfo\\n     */\\n    function stake(\\n        address _recipient,\\n        uint256 _amount,\\n        bool _claim\\n    ) external returns (uint256, uint256 _index) {\\n        rebase();\\n        IERC20(THEO).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (!isExternalLocked[_recipient]) {\\n            require(_recipient == msg.sender, \\\"External deposits for account are locked\\\");\\n        }\\n\\n        uint256 _index = stakingInfo[_recipient].length;\\n\\n        if (warmupPeriod == 0 && _claim) {\\n            stakingInfo[_recipient].push(\\n                Claim({\\n                    deposit: _amount,\\n                    gonsInWarmup: 0,\\n                    warmupExpiry: 0,\\n                    stakingExpiry: block.timestamp.add(stakingTerm),\\n                    gonsRemaining: IStakedTHEOToken(sTHEO).gonsForBalance(_amount)\\n                })\\n            );\\n            _send(_recipient, _amount);\\n        } else {\\n            gonsInWarmup = gonsInWarmup.add(IStakedTHEOToken(sTHEO).gonsForBalance(_amount));\\n            stakingInfo[_recipient].push(\\n                Claim({\\n                    deposit: _amount,\\n                    gonsInWarmup: IStakedTHEOToken(sTHEO).gonsForBalance(_amount),\\n                    warmupExpiry: block.timestamp.add(warmupPeriod),\\n                    stakingExpiry: block.timestamp.add(stakingTerm),\\n                    gonsRemaining: 0\\n                })\\n            );\\n        }\\n\\n        return (_amount, _index);\\n    }\\n\\n    /**\\n        @notice retrieve sTHEO from warmup\\n        @dev    After a claim has been retrieved (and a subsequent call to `isUnRetrieved` returns false),\\n                the claim cannot be re-retrieved; gonsRemaining is therefore only set once by this method for each Claim\\n        @param _recipient address\\n        @param _indexes uint256[]      indexes of the sTHEO to retrieve\\n        @return amount_                The sum total amount of sTHEO sent\\n     */\\n    function claim(address _recipient, uint256[] memory _indexes) public returns (uint256 amount_) {\\n        if (!isExternalLocked[_recipient]) {\\n            require(_recipient == msg.sender, \\\"External claims for account are locked\\\");\\n        }\\n\\n        uint256 amount_ = 0;\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            if (isUnRetrieved(_recipient, i)) {\\n                Claim memory info = stakingInfo[_recipient][_indexes[i]];\\n\\n                if (block.timestamp >= info.warmupExpiry && info.warmupExpiry != 0) {\\n                    stakingInfo[_recipient][_indexes[i]].gonsInWarmup = 0;\\n\\n                    gonsInWarmup = gonsInWarmup.sub(info.gonsInWarmup);\\n                    uint256 balanceForGons = IStakedTHEOToken(sTHEO).balanceForGons(info.gonsInWarmup);\\n                    stakingInfo[_recipient][_indexes[i]].gonsRemaining = info.gonsInWarmup;\\n                    amount_ = amount_.add(balanceForGons);\\n                }\\n            }\\n        }\\n\\n        return _send(_recipient, amount_);\\n    }\\n\\n    /**\\n     * @notice             claim all retrievable (from warmup) claims for user\\n     * @dev                if possible, query indexesFor() off-chain and input in claim() to save gas\\n     * @param _recipient   address. The recipient to retrieve sTHEO from all claims for\\n     * @return             sum of claim amounts sent, in sTHEO\\n     */\\n    function claimAll(address _recipient) external returns (uint256) {\\n        return claim(_recipient, indexesFor(_recipient, true));\\n    }\\n\\n    /**\\n        @notice forfeit sTHEO in warmup and retrieve THEO\\n     */\\n    function forfeit(uint256 _index) external {\\n        Claim memory info = stakingInfo[msg.sender][_index];\\n        delete stakingInfo[msg.sender][_index];\\n\\n        gonsInWarmup = gonsInWarmup.sub(info.gonsInWarmup);\\n\\n        IERC20(THEO).safeTransfer(msg.sender, info.deposit);\\n    }\\n\\n    /**\\n        @notice prevent new deposits or claims to/from external address (protection from malicious activity)\\n     */\\n    function toggleLock() external {\\n        isExternalLocked[msg.sender] = !isExternalLocked[msg.sender];\\n    }\\n\\n    /**\\n     * @notice redeem sTHEO for THEO from un-redeemed claims\\n     * @dev    if `stakingExpiry` has not yet passed, Determine the penalty for removing early.\\n     *         `percentageComplete` is the percentage of time that the stake has completed (versus the `stakingTerm`), expressed with 4 decimals.\\n     *         note that For unstaking before 100% of staking term, only the principle deposit -- less a penalty -- is returned. In this case, the full claim must be redeemed\\n     *         and gonsRemaining becomes zero.\\n     *         note that For unstaking at or beyond 100% of the staking term, a part-redeem can be made: that is, a user may redeem less than 100% of the total amount available to redeem\\n     *         (as represented by gonsRemaining), during a call to `unstake`\\n     *         note that The penalty is added (after conversion to gons) to `slasheGons` and subtracted from the amount to return\\n     *         gonsRemaining keeps track of the amount of sTheo (as gons) that can be redeemed for a Claim\\n     *         note that When unstaking from the locked tranche (stakingTerm > 0) after the stake reaches maturity,\\n     *         the Stake becomes eligible to claim against bonus pool rewards (tracked in `slashedGons`; see also `getSlashedRewards`)\\n     * @param _to address\\n     * @param _amounts uint\\n     * @param _trigger bool\\n     * @param _indexes uint256[]\\n     * @return amount_ uint\\n     */\\n    function unstake(\\n        address _to,\\n        uint256[] memory _amounts,\\n        bool _trigger,\\n        uint256[] memory _indexes\\n    ) external returns (uint256 amount_) {\\n        if (!isExternalLocked[_to]) {\\n            require(_to == msg.sender, \\\"External unstaking for account is locked\\\");\\n        }\\n        require(_amounts.length == _indexes.length, \\\"Amounts and indexes lengths do not match\\\");\\n\\n        amount_ = 0;\\n        uint256 bounty;\\n\\n        uint256[] memory amountsAsGons = new uint256[](_indexes.length);\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            amountsAsGons[i] = IStakedTHEOToken(sTHEO).gonsForBalance(_amounts[i]);\\n        }\\n\\n        if (_trigger) {\\n            bounty = rebase();\\n        }\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            Claim memory info = stakingInfo[_to][_indexes[i]];\\n            UnstakeAmounts memory unstakeAmounts;\\n            unstakeAmounts._amountSingle = IStakedTHEOToken(sTHEO).balanceForGons(amountsAsGons[i]);\\n\\n            if (isUnRedeemed(_to, _indexes[i])) {\\n                unstakeAmounts._gonsRemaining = IStakedTHEOToken(sTHEO).gonsForBalance(\\n                    IStakedTHEOToken(sTHEO).balanceForGons(info.gonsRemaining)\\n                );\\n\\n                stakingInfo[_to][_indexes[i]].gonsRemaining = (unstakeAmounts._gonsRemaining).sub(\\n                    IStakedTHEOToken(sTHEO).gonsForBalance(unstakeAmounts._amountSingle)\\n                );\\n\\n                IStakedTHEOToken(sTHEO).safeTransferFrom(msg.sender, address(this), unstakeAmounts._amountSingle);\\n\\n                if (block.timestamp >= info.stakingExpiry) {\\n                    uint256 slashedRewards = 0;\\n                    if (stakingTerm > 0) {\\n                        slashedRewards = getSlashedRewards(unstakeAmounts._amountSingle);\\n                    }\\n\\n                    amount_ = amount_.add(bounty).add(unstakeAmounts._amountSingle).add(slashedRewards);\\n                } else if (block.timestamp < info.stakingExpiry) {\\n                    require(\\n                        stakingInfo[_to][_indexes[i]].gonsRemaining == 0,\\n                        \\\"Amount does not match available remaining to redeem\\\"\\n                    );\\n\\n                    uint256 penalty = getPenalty(\\n                        stakingInfo[_to][_indexes[i]].deposit,\\n                        (1000000.sub(((info.stakingExpiry.sub(block.timestamp)).mul(1000000)).div(stakingTerm))).div(\\n                            10000\\n                        )\\n                    );\\n\\n                    slashedGons = slashedGons.add(IStakedTHEOToken(sTHEO).gonsForBalance(penalty));\\n\\n                    amount_ = amount_.add(stakingInfo[_to][_indexes[i]].deposit).sub(penalty);\\n                }\\n            }\\n        }\\n\\n        require(amount_ <= ITHEO(THEO).balanceOf(address(this)), \\\"Insufficient THEO balance in contract\\\");\\n        ITHEO(THEO).safeTransfer(_to, amount_);\\n    }\\n\\n    /**\\n        @dev slashedRewards is calculated as: (StakerTokens/totalStakedTokens) * totalSlashedTokens\\n     */\\n    function getSlashedRewards(uint256 amount) private view returns (uint256) {\\n        uint256 circulatingSupply = IStakedTHEOToken(sTHEO).circulatingSupply();\\n        uint256 baseDecimals = 10**9;\\n\\n        return\\n            circulatingSupply > 0\\n                ? ((amount.add(circulatingSupply)).mul(baseDecimals).div(circulatingSupply).sub(baseDecimals))\\n                    .mul(IStakedTHEOToken(sTHEO).balanceForGons(slashedGons))\\n                    .div(baseDecimals)\\n                : 0;\\n    }\\n\\n    function _definePenalties(uint256[] memory bands, uint256[] memory penalties) private {\\n        require(bands.length == penalties.length, \\\"Arrays must be the same length\\\");\\n        for (uint256 i = 0; i < bands.length; i++) {\\n            _definePenalty(bands[i], penalties[i]);\\n        }\\n    }\\n\\n    function definePenalties(uint256[] memory bands, uint256[] memory penalties) public onlyPolicy {\\n        _definePenalties(bands, penalties);\\n    }\\n\\n    function _definePenalty(uint256 _percentBandMax, uint256 _penalty) private {\\n        penaltyBands[_percentBandMax] = _penalty;\\n    }\\n\\n    function ceil(uint256 a, uint256 m) private view returns (uint256) {\\n        return a == 0 ? m : ((a.add(m).sub(1)).div(m)).mul(m);\\n    }\\n\\n    function getPenalty(uint256 _amount, uint256 stakingTimePercentComplete) public view returns (uint256) {\\n        if (stakingTimePercentComplete == 100) {\\n            return 0;\\n        }\\n\\n        uint256 penaltyBand = ceil(stakingTimePercentComplete, 5).div(5);\\n        uint256 penaltyPercent = penaltyBands[penaltyBand];\\n\\n        return _amount.mul(penaltyPercent).div(100);\\n    }\\n\\n    /**\\n        @notice trigger rebase if epoch over\\n        @return uint256\\n     */\\n    function rebase() public returns (uint256) {\\n        uint256 bounty;\\n        if (epoch.end <= block.timestamp) {\\n            ITreasury(treasury).tokenPerformanceUpdate();\\n\\n            IStakedTHEOToken(sTHEO).rebase(epoch.distribute, epoch.number);\\n\\n            epoch.end = epoch.end.add(epoch.length);\\n            epoch.number++;\\n\\n            if (distributor != address(0)) {\\n                IDistributor(distributor).distribute();\\n                bounty = IDistributor(distributor).retrieveBounty(); // Will mint THEO for this contract if there exists a bounty\\n            }\\n\\n            uint256 balance = contractBalance();\\n            uint256 staked = IStakedTHEOToken(sTHEO).circulatingSupply();\\n\\n            if (balance <= staked.add(bounty)) {\\n                epoch.distribute = 0;\\n            } else {\\n                epoch.distribute = balance.sub(staked).sub(bounty);\\n            }\\n        }\\n        return bounty;\\n    }\\n\\n    /**\\n        @notice returns contract THEO holdings, including bonuses provided\\n        @return uint\\n     */\\n    function contractBalance() public view returns (uint256) {\\n        return IERC20(THEO).balanceOf(address(this)).add(totalBonus);\\n    }\\n\\n    /**\\n        @notice provide bonus to locked staking contract\\n        @param _amount uint\\n     */\\n    function giveLockBonus(uint256 _amount) external {\\n        require(msg.sender == locker);\\n        totalBonus = totalBonus.add(_amount);\\n        IERC20(sTHEO).safeTransfer(locker, _amount);\\n    }\\n\\n    /**\\n        @notice reclaim bonus from locked staking contract\\n        @param _amount uint\\n     */\\n    function returnLockBonus(uint256 _amount) external {\\n        require(msg.sender == locker);\\n        totalBonus = totalBonus.sub(_amount);\\n        IERC20(sTHEO).safeTransferFrom(locker, address(this), _amount);\\n    }\\n\\n    enum CONTRACTS {\\n        DISTRIBUTOR,\\n        WARMUP,\\n        LOCKER\\n    }\\n\\n    /**\\n        @notice sets the contract address for LP staking\\n        @param _contract address\\n     */\\n    function setContract(CONTRACTS _contract, address _address) external onlyManager {\\n        if (_contract == CONTRACTS.DISTRIBUTOR) {\\n            // 0\\n            distributor = _address;\\n        } else if (_contract == CONTRACTS.WARMUP) {\\n            // 1\\n            require(warmupContract == address(0), \\\"Warmup cannot be set more than once\\\");\\n            warmupContract = _address;\\n        } else if (_contract == CONTRACTS.LOCKER) {\\n            // 2\\n            require(locker == address(0), \\\"Locker cannot be set more than once\\\");\\n            locker = _address;\\n        }\\n    }\\n\\n    /**\\n     * @notice set warmup period for new stakers\\n     * @param _warmupPeriod uint\\n     */\\n    function setWarmup(uint256 _warmupPeriod) external onlyManager {\\n        warmupPeriod = _warmupPeriod;\\n    }\\n\\n    /**\\n     * @notice set the address of a bond depo to allow it to push claims to users when redeeming bonds\\n     * @dev    see also `pushClaimForBond`\\n     * @param _bondDepo address of the bond depo\\n     */\\n    function setBondDepo(address _bondDepo, bool val) external onlyGovernor {\\n        bondDepos[_bondDepo] = val;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice send staker their amount as sTHEO (equal unit as THEO)\\n     * @param _recipient address\\n     * @param _amount uint\\n     */\\n    function _send(address _recipient, uint256 _amount) internal returns (uint256) {\\n        IStakedTHEOToken(sTHEO).safeTransfer(_recipient, _amount);\\n        return _amount;\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a claim\\n     * @param _to          address to approve claim transfer for\\n     * @param _index       index of claim to approve transfer for\\n     */\\n    function pushClaim(address _to, uint256 _index) external {\\n        require(stakingInfo[msg.sender][_index].stakingExpiry != 0, \\\"Staking: claim not found\\\");\\n        claimTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a claim that has been approved by an address\\n     * @param _from        the address that approved the claim transfer\\n     * @param _index       the index of the claim to transfer (in the sender's array)\\n     */\\n    function pullClaim(address _from, uint256 _index) external returns (uint256 newIndex_) {\\n        require(claimTransfers[_from][_index] == msg.sender, \\\"Staking: claim not found\\\");\\n        require(\\n            stakingInfo[_from][_index].gonsInWarmup > 0 || stakingInfo[_from][_index].gonsRemaining > 0,\\n            \\\"Staking: claim redeemed\\\"\\n        );\\n\\n        newIndex_ = stakingInfo[msg.sender].length;\\n        stakingInfo[msg.sender].push(stakingInfo[_from][_index]);\\n\\n        delete stakingInfo[_from][_index];\\n    }\\n\\n    /**\\n     * @notice             transfer a claim that has been approved by an address\\n     * @param _to          the address to push the claim to (must be pre-approved for transfer via `pushClaim`)\\n     * @param _index       the index of the claim to transfer (in the sender's array)\\n     */\\n    function pushClaimForBond(address _to, uint256 _index) external returns (uint256 newIndex_) {\\n        require(bondDepos[msg.sender], \\\"Caller is not a bond depository\\\");\\n        require(claimTransfers[msg.sender][_index] == _to, \\\"Staking: claim not found\\\");\\n        require(\\n            stakingInfo[msg.sender][_index].gonsInWarmup > 0 || stakingInfo[msg.sender][_index].gonsRemaining > 0,\\n            \\\"Staking: claim redeemed\\\"\\n        );\\n\\n        newIndex_ = stakingInfo[_to].length;\\n        stakingInfo[_to].push(stakingInfo[msg.sender][_index]);\\n\\n        delete stakingInfo[msg.sender][_index];\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n        @notice returns the sTHEO index, which tracks rebase growth\\n        @return uint\\n     */\\n    function index() public view returns (uint256) {\\n        return IStakedTHEOToken(sTHEO).index();\\n    }\\n\\n    /**\\n     * @notice total supply in warmup\\n     */\\n    function supplyInWarmup() public view returns (uint256) {\\n        return IStakedTHEOToken(sTHEO).balanceForGons(gonsInWarmup);\\n    }\\n\\n    /**\\n     * @notice                all un-retrieved claims (sTHEO available to retrieve from warmup), or all un-redeemed claims (sTHEO retrieved but yet to be redeemed for THEO) for a user\\n     * @param _user           the user to query claims for\\n     * @param unRetrieved   bool. If true, return indexes of all un-claimed claims from warmup, else return indexes of all claims with un-redeemed sTheo\\n     * @return                indexes of un-retrieved claims, or of un-redeemed claims, for the user\\n     */\\n    function indexesFor(address _user, bool unRetrieved) public view returns (uint256[] memory) {\\n        Claim[] memory claims = stakingInfo[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < claims.length; i++) {\\n            if (unRetrieved ? isUnRetrieved(_user, i) : isUnRedeemed(_user, i)) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < claims.length; i++) {\\n            if (unRetrieved ? isUnRetrieved(_user, i) : isUnRedeemed(_user, i)) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             determine whether sTHEO has been retrieved (via `claim`) for a Claim\\n     * @param _user        the user to query claims for\\n     * @param _index       the index of the claim\\n     * @return bool        true if the sTHEO has not yet been retrieved for the claim\\n     */\\n    function isUnRetrieved(address _user, uint256 _index) public view returns (bool) {\\n        Claim memory claim = stakingInfo[_user][_index];\\n        return claim.gonsInWarmup > 0;\\n    }\\n\\n    /**\\n     * @notice             determine whether a claim has a (non-zero) sTHEO balance remaining that can be redeemed for THEO\\n     *                     if the claim is still in warmup, this method will return false (as no sTheo can yet be redeemed against the claim)\\n     * @param _user        the user to query claims for\\n     * @param _index       the index of the claim\\n     * @return bool        true if the total sTHEO on the claim has not yet been redeemed for THEO\\n     */\\n    function isUnRedeemed(address _user, uint256 _index) public view returns (bool) {\\n        Claim memory claim = stakingInfo[_user][_index];\\n        return claim.gonsInWarmup == 0 && claim.gonsRemaining > 0;\\n    }\\n\\n    function getClaimsCount(address _user) public view returns (uint256) {\\n        return stakingInfo[_user].length;\\n    }\\n\\n    /**\\n     * @notice                  return the current expected rewards for a claim\\n     * @param _user             the user that the claim belongs to\\n     * @param _index            the index of the claim in the user's array\\n     * @return currentRewards_  the current total rewards expected for a claim (valid only for claims out of warmup),\\n                                calculated as: (sTHEO remaining + slashedRewards) - deposit amount\\n                                note that currentRewards_ does not include any potential bounty or additional sTheo balance that\\n                                may be applied if rebasing when unstaking\\n     */\\n    function rewardsFor(address _user, uint256 _index) public view returns (uint256 currentRewards_) {\\n        Claim memory claim = stakingInfo[_user][_index];\\n        uint256 _amountRemaining = IStakedTHEOToken(sTHEO).balanceForGons(claim.gonsRemaining);\\n        currentRewards_ = 0;\\n        if (isUnRedeemed(_user, _index)) {\\n            currentRewards_ = (_amountRemaining.add(getSlashedRewards(_amountRemaining))).sub(claim.deposit);\\n        }\\n        return currentRewards_;\\n    }\\n\\n    /**\\n     * @notice             return the staking token that the tranche is based on\\n     *\\n     * @return address     the address of the staking token\\n     */\\n    function basis() public view returns (address) {\\n        return sTHEO;\\n    }\\n}\\n\",\"keccak256\":\"0xbdf419e71d06b61e18962ac091897364666f19a82d36da40efd0ecea3d166f0c\",\"license\":\"AGPL-3.0\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\n\\nabstract contract TheopetraAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ITheopetraAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(ITheopetraAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a24eaf51fcd807927a59ae694a7c752a060d278610b88c9b61d89f872a4b5\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "basis()": {
        "returns": {
          "_0": "address     the address of the staking token"
        }
      },
      "claim(address,uint256[])": {
        "details": "After a claim has been retrieved (and a subsequent call to `isUnRetrieved` returns false), the claim cannot be re-retrieved; gonsRemaining is therefore only set once by this method for each Claim",
        "params": {
          "_indexes": "uint256[]      indexes of the sTHEO to retrieve",
          "_recipient": "address"
        },
        "returns": {
          "amount_": "               The sum total amount of sTHEO sent"
        }
      },
      "claimAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in claim() to save gas",
        "params": {
          "_recipient": "address. The recipient to retrieve sTHEO from all claims for"
        },
        "returns": {
          "_0": "sum of claim amounts sent, in sTHEO"
        }
      },
      "contractBalance()": {
        "returns": {
          "_0": "uint"
        }
      },
      "giveLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "index()": {
        "returns": {
          "_0": "uint"
        }
      },
      "indexesFor(address,bool)": {
        "params": {
          "_user": "the user to query claims for",
          "unRetrieved": "bool. If true, return indexes of all un-claimed claims from warmup, else return indexes of all claims with un-redeemed sTheo"
        },
        "returns": {
          "_0": "indexes of un-retrieved claims, or of un-redeemed claims, for the user"
        }
      },
      "isUnRedeemed(address,uint256)": {
        "params": {
          "_index": "the index of the claim",
          "_user": "the user to query claims for"
        },
        "returns": {
          "_0": "bool        true if the total sTHEO on the claim has not yet been redeemed for THEO"
        }
      },
      "isUnRetrieved(address,uint256)": {
        "params": {
          "_index": "the index of the claim",
          "_user": "the user to query claims for"
        },
        "returns": {
          "_0": "bool        true if the sTHEO has not yet been retrieved for the claim"
        }
      },
      "pullClaim(address,uint256)": {
        "params": {
          "_from": "the address that approved the claim transfer",
          "_index": "the index of the claim to transfer (in the sender's array)"
        }
      },
      "pushClaim(address,uint256)": {
        "params": {
          "_index": "index of claim to approve transfer for",
          "_to": "address to approve claim transfer for"
        }
      },
      "pushClaimForBond(address,uint256)": {
        "params": {
          "_index": "the index of the claim to transfer (in the sender's array)",
          "_to": "the address to push the claim to (must be pre-approved for transfer via `pushClaim`)"
        }
      },
      "rebase()": {
        "returns": {
          "_0": "uint256"
        }
      },
      "returnLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "rewardsFor(address,uint256)": {
        "params": {
          "_index": "the index of the claim in the user's array",
          "_user": "the user that the claim belongs to"
        },
        "returns": {
          "currentRewards_": " the current total rewards expected for a claim (valid only for claims out of warmup), calculated as: (sTHEO remaining + slashedRewards) - deposit amount note that currentRewards_ does not include any potential bounty or additional sTheo balance that may be applied if rebasing when unstaking"
        }
      },
      "setBondDepo(address,bool)": {
        "details": "see also `pushClaimForBond`",
        "params": {
          "_bondDepo": "address of the bond depo"
        }
      },
      "setContract(uint8,address)": {
        "params": {
          "_contract": "address"
        }
      },
      "setWarmup(uint256)": {
        "params": {
          "_warmupPeriod": "uint"
        }
      },
      "stake(address,uint256,bool)": {
        "details": "if warmupPeriod is 0 and _claim is true, funds are sent immediately, and warmupExpiry is 0: this is so that the staker cannot retrieve sTHEO from warmup using the stored Claim (see also `claim`). If warmupPeriod is not 0, or if _claim is false, then funds go into warmup (sTheo is not sent)",
        "params": {
          "_amount": "uint",
          "_claim": "bool"
        },
        "returns": {
          "_0": "uint256 _amount staked",
          "_index": "uint256 the index of the claim added for the recipient in the recipient's stakingInfo"
        }
      },
      "unstake(address,uint256[],bool,uint256[])": {
        "details": "if `stakingExpiry` has not yet passed, Determine the penalty for removing early.         `percentageComplete` is the percentage of time that the stake has completed (versus the `stakingTerm`), expressed with 4 decimals.         note that For unstaking before 100% of staking term, only the principle deposit -- less a penalty -- is returned. In this case, the full claim must be redeemed         and gonsRemaining becomes zero.         note that For unstaking at or beyond 100% of the staking term, a part-redeem can be made: that is, a user may redeem less than 100% of the total amount available to redeem         (as represented by gonsRemaining), during a call to `unstake`         note that The penalty is added (after conversion to gons) to `slasheGons` and subtracted from the amount to return         gonsRemaining keeps track of the amount of sTheo (as gons) that can be redeemed for a Claim         note that When unstaking from the locked tranche (stakingTerm > 0) after the stake reaches maturity,         the Stake becomes eligible to claim against bonus pool rewards (tracked in `slashedGons`; see also `getSlashedRewards`)",
        "params": {
          "_amounts": "uint",
          "_indexes": "uint256[]",
          "_to": "address",
          "_trigger": "bool"
        },
        "returns": {
          "amount_": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "basis()": {
        "notice": "return the staking token that the tranche is based on"
      },
      "claim(address,uint256[])": {
        "notice": "retrieve sTHEO from warmup"
      },
      "claimAll(address)": {
        "notice": "claim all retrievable (from warmup) claims for user"
      },
      "contractBalance()": {
        "notice": "returns contract THEO holdings, including bonuses provided"
      },
      "forfeit(uint256)": {
        "notice": "forfeit sTHEO in warmup and retrieve THEO"
      },
      "giveLockBonus(uint256)": {
        "notice": "provide bonus to locked staking contract"
      },
      "index()": {
        "notice": "returns the sTHEO index, which tracks rebase growth"
      },
      "indexesFor(address,bool)": {
        "notice": "all un-retrieved claims (sTHEO available to retrieve from warmup), or all un-redeemed claims (sTHEO retrieved but yet to be redeemed for THEO) for a user"
      },
      "isUnRedeemed(address,uint256)": {
        "notice": "determine whether a claim has a (non-zero) sTHEO balance remaining that can be redeemed for THEO                     if the claim is still in warmup, this method will return false (as no sTheo can yet be redeemed against the claim)"
      },
      "isUnRetrieved(address,uint256)": {
        "notice": "determine whether sTHEO has been retrieved (via `claim`) for a Claim"
      },
      "pullClaim(address,uint256)": {
        "notice": "transfer a claim that has been approved by an address"
      },
      "pushClaim(address,uint256)": {
        "notice": "approve an address to transfer a claim"
      },
      "pushClaimForBond(address,uint256)": {
        "notice": "transfer a claim that has been approved by an address"
      },
      "rebase()": {
        "notice": "trigger rebase if epoch over"
      },
      "returnLockBonus(uint256)": {
        "notice": "reclaim bonus from locked staking contract"
      },
      "rewardsFor(address,uint256)": {
        "notice": "return the current expected rewards for a claim"
      },
      "setBondDepo(address,bool)": {
        "notice": "set the address of a bond depo to allow it to push claims to users when redeeming bonds"
      },
      "setContract(uint8,address)": {
        "notice": "sets the contract address for LP staking"
      },
      "setWarmup(uint256)": {
        "notice": "set warmup period for new stakers"
      },
      "stake(address,uint256,bool)": {
        "notice": "stake THEO to enter warmup"
      },
      "supplyInWarmup()": {
        "notice": "total supply in warmup"
      },
      "toggleLock()": {
        "notice": "prevent new deposits or claims to/from external address (protection from malicious activity)"
      },
      "unstake(address,uint256[],bool,uint256[])": {
        "notice": "redeem sTHEO for THEO from un-redeemed claims"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11008,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11010,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITheopetraAuthority)2485"
      },
      {
        "astId": 4178,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "epoch",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Epoch)4232_storage"
      },
      {
        "astId": 4188,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "distributor",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4190,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "locker",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4192,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "totalBonus",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4194,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "warmupContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4196,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "warmupPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4198,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "gonsInWarmup",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4200,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "slashedGons",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4205,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "stakingInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_struct(Claim)4243_storage)dyn_storage)"
      },
      {
        "astId": 4209,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "isExternalLocked",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4215,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "claimTransfers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 4219,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "penaltyBands",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4223,
        "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
        "label": "bondDepos",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Claim)4243_storage)dyn_storage": {
        "base": "t_struct(Claim)4243_storage",
        "encoding": "dynamic_array",
        "label": "struct TheopetraStaking.Claim[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITheopetraAuthority)2485": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Claim)4243_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TheopetraStaking.Claim[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Claim)4243_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Claim)4243_storage": {
        "encoding": "inplace",
        "label": "struct TheopetraStaking.Claim",
        "members": [
          {
            "astId": 4234,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4236,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4238,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "warmupExpiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4240,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "stakingExpiry",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4242,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "gonsRemaining",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Epoch)4232_storage": {
        "encoding": "inplace",
        "label": "struct TheopetraStaking.Epoch",
        "members": [
          {
            "astId": 4225,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "length",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4227,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4229,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4231,
            "contract": "src/Theopetra/Staking.sol:TheopetraStaking",
            "label": "distribute",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}